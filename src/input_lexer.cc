#line 2 "input_lexer.cc"

#line 4 "input_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE giac_yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via giac_yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void giac_yyrestart (FILE *input_file ,yyscan_t yyscanner );
void giac_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void giac_yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void giac_yypop_buffer_state (yyscan_t yyscanner );

static void giac_yyensure_buffer_stack (yyscan_t yyscanner );
static void giac_yy_load_buffer_state (yyscan_t yyscanner );
static void giac_yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER giac_yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE giac_yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE giac_yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *giac_yyalloc (yy_size_t ,yyscan_t yyscanner );
void *giac_yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void giac_yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer giac_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        giac_yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define giac_yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 743
#define YY_END_OF_BUFFER 744
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2981] =
    {   0,
        0,    0,   23,   23,    0,    0,    0,    0,    0,    0,
      744,  742,    1,    2,  415,    3,  740,  379,  444,  422,
       31,  328,  329,  431,  416,  326,  427,  433,  439,  726,
      726,   34,   32,  324,  377,  325,   29,  389,  739,  739,
      739,  501,  739,  739,  739,  739,   39,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  330,  331,  450,   30,   16,  739,  739,  739,  739,
      502,  739,  739,  739,   37,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  346,  401,  347,   38,  739,  739,  739,   23,

       25,   24,  743,  741,  743,   15,    6,    5,  743,   18,
       17,   19,    1,  364,    0,    0,    0,    0,    0,    0,
        0,    0,  380,    0,  338,  339,  332,  333,   41,   40,
        0,  348,  349,  395,  434,  435,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      452,  432,  417,  418,  327,  419,  360,  420,  359,  436,
      421,  428,  412,  441,  737,  453,   22,    0,  440,  736,
      726,    0,    0,    0,    0,    0,   36,   35,  383,    0,
        0,    0,  354,  371,  366,  387,  361,  386,  375,  355,

      388,  390,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  500,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  536,  739,  655,  739,  739,  739,  739,  739,  739,
      739,  739,  407,  577,  578,   46,  739,  739,   45,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      617,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  739,  739,  739,

      739,  739,  739,  475,  739,  739,  739,  739,  739,  739,
      484,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      499,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  532,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  535,  543,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  567,  568,  570,  404,  739,  739,  739,   43,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      616,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  402,   33,  423,
      424,   54,   44,   23,   24,   24,   26,    0,  741,   15,
        4,   14,    7,    8,   12,   13,    9,   11,   10,   18,
        0,    0,  728,  729,  727,  731,  730,  732,    0,  340,
      341,  334,  335,  350,  351,   42,    0,  381,  445,    0,
      437,  425,  429,    0,  442,    0,  372,    0,    0,  378,
        0,  374,    0,  393,    0,  454,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,  736,    0,    0,  738,    0,  734,  733,  735,

        0,    0,    0,    0,  397,  739,  739,  739,  739,  739,
      687,  739,  739,  739,  739,  739,  739,  458,  739,  739,
      739,  739,  739,  739,  739,  507,  739,  739,  739,  739,
      739,  530,  667,  739,  739,  739,  739,  739,  739,  739,
      681,  739,  739,  449,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  586,  739,  739,  739,  739,  739,
      686,  600,  739,  739,  607,  739,  739,  739,  739,  739,
      739,  739,  674,  739,  739,  739,  739,  411,    0,  715,
        0,    0,  721,    0,    0,    0,    0,    0,    0,    0,
        0,  690,    0,    0,    0,    0,    0,    0,  691,  714,

        0,  541,  725,  723,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  406,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  739,  467,  739,  396,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  506,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  529,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,   49,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  554,  739,  739,  739,  739,  739,  446,  562,
      739,  739,  739,  739,  739,  739,  561,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  451,  739,  739,  739,  739,  739,  585,  739,
      739,  165,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  597,  739,  739,  739,  739,  739,  739,
      288,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  623,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      408,  739,  739,  739,  739,  739,    7,    8,    0,    0,
        0,    0,    0,  342,  343,  336,  337,  352,  353,  365,
      398,  413,  384,  369,  367,  362,  376,  391,    0,    0,
      540,    0,    0,    0,    0,    0,  569,  405,    0,    0,
        0,  403,    0,  737,    0,    0,    0,  736,    0,    0,
       20,    0,    0,    0,  739,  739,  739,  486,  495,  739,
      739,  739,  739,  739,  457,  739,  739,  739,  739,  739,
      677,  739,  504,  739,  657,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  663,  739,

      648,  683,  534,  538,  739,  550,  739,  739,  664,  560,
      565,  301,  461,  739,  739,  739,  739,  739,  644,  739,
      739,  459,  739,  739,  739,  739,  606,  456,  739,  614,
      622,  637,  656,  739,  739,  633,  739,  739,    0,  692,
      724,    0,    0,  722,  704,    0,  400,    0,  698,    0,
        0,    0,  700,    0,    0,    0,    0,  697,    0,    0,
        0,  712,    0,  448,  710,    0,    0,    0,    0,    0,
      564,    0,    0,    0,  713,    0,    0,    0,    0,    0,
        0,    0,    0,  409,  739,  739,  739,  739,  739,  739,
      739,  739,  470,  739,  194,  739,  739,  294,  739,  739,

      739,  739,  172,  479,  171,  739,  739,  739,  485,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  174,  739,
      739,  739,  739,  739,  739,  505,  503,    0,  739,  739,
      739,  739,  739,  739,  739,  522,  739,  739,  739,  739,
      739,  739,  526,  739,  739,  739,  739,  739,  204,  739,
      531,  739,  649,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  270,  271,  272,
      739,  739,  739,  682,  739,  739,  739,  739,  739,  739,
      739,  537,  739,  739,  739,  549,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  289,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  559,  164,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      303,  739,  739,  314,  739,  739,  739,  739,  739,  580,
      739,  739,  739,  739,  739,  587,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  596,  739,  739,
      598,  739,  739,  739,  739,  739,  307,  308,  739,  739,
      739,  739,  739,  739,  739,  739,  605,  739,  608,  739,
      739,  612,  304,  613,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  291,  620,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  168,  218,  739,  621,

      739,  739,  739,  739,  739,  739,  739,  739,  739,    7,
        0,    0,  344,  345,  399,    0,    0,    0,    0,  447,
      563,    0,    0,  410,    0,  736,    0,  647,  643,  650,
      481,  483,  739,  673,  496,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  521,  739,  739,  739,  739,  739,  658,  739,  739,
      739,  739,  739,  739,  659,  739,  739,  739,  739,  527,
      544,  553,  654,  583,  678,  639,  739,  739,  739,  739,
      460,  739,  739,  739,  603,  739,  641,  631,  636,  670,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  373,    0,    0,  716,  703,
      702,  438,  707,  426,    0,    0,  711,    0,    0,    0,
        0,    0,    0,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  480,  739,  162,  176,  482,
      739,  739,  739,  739,  487,  489,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
        0,    0,    0,  739,  739,  739,  739,  739,  739,  739,
      739,  518,  520,  519,  739,  739,  292,  739,  739,  525,
      739,  739,  739,   65,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      163,  167,  739,  739,  739,  739,  739,  739,  739,  739,
      545,  739,  739,  170,  739,  739,  680,  739,  739,  739,
      311,  739,  739,  551,  739,  739,  739,  739,  556,  739,
      739,  739,  739,  739,  739,  739,  197,  739,  739,  739,
      739,  739,  739,  739,  574,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  581,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  323,  739,
      739,  595,  166,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  602,  604,  739,  739,  210,  739,  739,
      739,  739,  739,  615,  739,  215,  216,  739,  739,  739,
      739,  198,  739,   53,  739,  625,  739,  628,  739,  199,
      739,  739,  200,  635,  175,  739,  201,  739,  739,  202,
      203,   27,   28,  471,  539,    0,    0,    0,    0,  300,
      463,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  619,  642,  679,  297,  684,  462,  739,
      661,  662,  739,  668,  739,  739,  739,  675,  739,  669,
      739,  739,  739,  676,  739,  739,  298,  590,  593,  739,
      660,  601,  611,    0,    0,  719,  720,    0,    0,    0,

        0,  363,    0,  392,  689,    0,    0,    0,  558,  709,
      455,    0,  414,    0,    0,    0,    0,  627,  739,  739,
      739,  739,  739,  464,  473,  476,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  220,
      739,  316,  739,  739,  739,  498,  739,  739,  618,  511,
      510,    0,  739,  739,  509,  739,  739,  739,  739,  739,
      739,  523,  524,   97,  739,  739,  739,  107,  739,  195,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  533,  739,  739,  310,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      630,  739,  739,  739,  205,  739,  739,  356,  739,  739,
      739,  739,  739,  739,  739,  739,  555,   59,  739,  739,
      739,  739,  739,  492,  739,  739,  739,  572,  739,  739,
      739,  739,  739,  315,  739,  318,  739,  739,   58,  472,
      739,  739,  739,  739,  739,  739,  739,  108,  588,  739,
      739,  739,  591,  302,  739,  739,  739,  208,  739,  739,
      739,  739,  599,  739,  739,  739,  739,  739,  609,  610,
      211,  739,  739,  739,  739,  196,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  739,  739,  169,    0,
      557,    0,  626,  739,  739,  739,  739,   56,  739,  739,
      739,   71,  739,  739,   55,  739,  685,  651,  665,  645,
      739,  653,  666,  646,  739,  299,  640,    0,    0,  708,
      385,  443,    0,    0,    0,    0,    0,    0,  382,  718,
        0,    0,  739,  739,  739,  739,  739,  466,  474,  477,
      319,  739,  739,   95,  739,  739,  739,  739,  739,  490,
       63,  295,  739,  739,  739,  739,  497,  739,  739,    0,
      739,  508,  739,  739,  652,  739,  516,  739,  739,  739,
      571,  321,  739,  739,  739,  250,  739,  739,  739,  739,

      739,  247,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,   57,  739,
      739,  739,  629,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  173,  313,  739,  739,  739,  739,  739,
      739,  739,  739,  566,  739,  739,  739,  739,  293,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  290,  739,  579,  739,  739,  739,  739,  739,  589,
      739,  739,  739,  739,  739,  739,  209,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  688,  739,  739,  100,
      739,  739,  739,  739,  739,  739,  739,  312,  632,  739,
      306,  739,    0,  594,  739,  739,   74,  739,   66,  739,
      739,  739,  739,  638,  671,  672,    0,    0,    0,  394,
        0,    0,    0,  370,    0,    0,  368,  193,  739,  739,
      739,  739,  219,  739,  739,  739,  739,  739,  739,  739,
      488,  739,  739,  739,  739,  739,  181,  512,  514,  515,
      739,  739,  739,  739,  528,  739,  739,  739,  258,  739,
      739,  739,  739,  249,  265,  739,  739,  739,  739,  269,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  273,  739,  274,  739,
      275,  739,  358,  739,  739,  739,  739,  739,  739,  542,
       48,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,   76,  739,  739,   51,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  465,  584,   72,  739,  739,  592,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  582,  739,  739,
      739,  739,  739,    0,  739,   64,   68,  739,  739,  739,

      739,  706,    0,    0,    0,    0,    0,  701,  699,    0,
      430,   70,  739,  739,  739,  478,  739,  739,  739,  739,
      739,  739,  739,  739,  179,  739,  739,  739,  513,  214,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      227,  228,  229,  230,  231,  232,  233,  234,  739,  739,
      739,  739,  245,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  246,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  317,  739,  739,  739,  739,  739,
      546,  739,  739,  739,  739,  221,  739,  739,  739,  739,
      739,  739,  206,  552,  739,   94,   52,  739,  739,  142,

       61,   60,  223,  357,  573,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  322,  739,  143,
      144,  145,  146,  739,  739,  739,  739,  739,  309,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  213,  224,
      217,   99,  739,  624,  739,  739,  739,  739,  739,    0,
      739,  739,   67,   73,  739,    0,  717,    0,    0,    0,
      548,    0,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      235,  276,  739,  739,  237,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  739,  226,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,   98,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  575,
      149,  739,  739,  739,  739,  739,  739,  150,  739,  739,
      739,  739,  739,  739,  207,  739,  739,  739,  739,  739,
      177,  739,  739,  157,  739,  212,  739,   77,  739,  739,
      305,  225,  547,   62,  739,  739,  705,  696,  693,  694,
      695,  739,  739,  469,  739,  739,  739,  739,  739,  739,
      739,  153,  739,  739,  739,  739,  739,   47,  739,  296,
      739,  739,  739,  253,  739,  739,  739,  263,  739,  739,

      238,  739,  739,  739,  739,  739,  277,  739,  739,  236,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  141,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  182,  180,  739,  739,  739,  739,
      739,  152,  154,  739,  739,  739,  739,  159,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,   69,  739,  468,  739,
       90,  739,  739,  739,  493,  739,  183,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  248,  278,  739,  739,  739,  739,

      261,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  109,  110,  111,  112,  113,  114,  115,  116,
      101,  739,  739,  158,  739,  739,  102,  739,  739,  739,
       96,  739,  739,  739,  739,  739,  739,  739,  320,  151,
      739,  739,   50,  739,   75,  739,  739,  187,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  267,  739,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,   84,  739,  739,  739,  739,   93,  739,  739,

      739,  739,  739,   79,  739,  739,  148,  739,  125,  126,
      127,  128,  129,  130,  131,  132,  517,  739,  739,  147,
      739,  739,  739,   86,  739,  739,  576,  739,  739,  189,
      739,  739,  739,   80,  739,  739,  739,  739,  739,  739,
      739,  739,  739,  739,  266,  739,  739,  739,  739,  241,
      739,  739,  739,  279,  282,  739,  280,  283,  739,  281,
      284,  739,   82,   85,  739,  739,  739,  105,  739,  739,
      739,   81,  739,  156,  739,  739,  739,  739,  739,  739,
      155,  739,  739,  191,  739,  185,  739,  739,   89,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  260,

      739,  739,  285,  286,  287,  739,  739,   83,  160,  222,
      739,  739,  739,  739,  739,  161,  104,  739,  103,   78,
      739,  739,  739,   88,  739,  739,  739,  739,  264,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  268,  739,
      739,  240,  739,  739,  739,  739,  739,  739,  739,  106,
      739,  739,  739,  494,  117,  118,  119,  120,  121,  122,
      123,  124,  133,  134,  135,  136,  137,  138,  139,  140,
      739,  739,  251,  739,  739,  739,  739,  739,  739,  739,
      739,  239,  739,  739,  739,  739,  739,  184,  178,  634,
       87,  491,  739,  739,  739,  739,  739,  739,  739,  739,

      739,  739,  739,  739,  739,  188,  190,  739,  739,  739,
      739,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      192,  739,  739,  739,  739,  739,  739,  739,  739,  739,
      739,  739,   91,  739,  739,  739,  739,  739,  739,  739,
      739,  243,  739,  739,  739,  739,  739,  252,  739,  254,
      739,  739,  739,  262,  739,  739,  739,  186,  242,  739,
      739,  256,  739,  739,  739,  739,  739,  244,  739,   92,
      739,  739,  739,  739,  739,  259,  739,  255,  257,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       46,   53,   54,   55,   56,   57,   58,   59,   60,   46,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,

       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
       91,   92,   93,   94,   95,   46,    1,   96,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       97,   46,   46,   46,   46,   46,   98,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   99,  100,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
      101,   46,   46,  102,  103,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,  104,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,    1
    } ;

static yyconst flex_int32_t yy_meta[105] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    1,    1,    4,    5,    1,    5,    6,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1,
        1,    1,    1,    1,    1,    1,    8,    8,    8,    8,
        9,    8,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        1,    3,    1,    5,   10,   11,    8,    9,    8,    8,
        9,    8,   10,   10,   10,   10,   10,   10,   10,   10,
       12,   10,   10,   10,   10,   10,   10,   10,   10,   12,
       10,   10,    1,    1,    1,   10,   10,   10,   10,   10,

       10,   10,   10,   10
    } ;

static yyconst flex_int16_t yy_base[3000] =
    {   0,
        0,    0,  102,  103,  104,  105,  106,  107,  108,  111,
     3546, 3547,  118, 3547, 3512, 3547,  166, 3547,  148,  111,
      252, 3547, 3547,  101,  108, 3528,  110,  114,  116,  158,
      269,  282, 3547,  104,  113,  106, 3547,  335, 3493,  109,
      121,  169,  224,  134, 3461, 3504,  174,    0, 3495,  150,
     3488,  208,   73,  320,  266,   97,  299, 3488, 3500,   80,
     3485, 3547, 3547, 3547,  363, 3547,  308,  340,  382,  301,
      374,  400,   89,  188,  193,   92, 3464,  254,  322,  341,
      236,  405, 3447,  424,  433,  451,   68,  325,   91,  173,
      111, 3448, 3547, 3438, 3547,    0,  152, 3430, 3434,    0,

     3547,  213, 3526, 3547, 3547,    0, 3547, 3522,  517,    0,
     3547, 3547,  279, 3547, 3512, 3509,  479,  177,  541,  279,
      550,    0, 3547,  518, 3547, 3547, 3547, 3547, 3547, 3547,
     3450, 3547, 3547, 3547, 3547, 3547, 3491, 3512, 3511, 3511,
     3509, 3508, 3507, 3499, 3505, 3482,  315,  312,  333,  206,
     3503,  196,  231,  294, 3432,  295, 3441, 3431, 3429, 3415,
     3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547,
     3547, 3547, 3547, 3547,  603, 3547, 3547, 3505, 3547,  613,
      635,  666,  364,  594,    0, 3488, 3547, 3547, 3547, 3419,
     3421, 3417, 3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547,

      676, 3547,    0, 3463, 3459, 3460, 3420, 3445, 3448, 3419,
     3427, 3457, 3451,  365, 3442, 3440,  347,  511, 3410, 3436,
     3449, 3435, 3402, 3416, 3410, 3436, 3430, 3398, 3401, 3394,
     3431, 3423, 3422,    0, 3428, 3436, 3396,  370, 3433, 3413,
     3423, 3386,    0,    0,    0, 3430, 3415, 3380,    0,  295,
      257, 3418,  410, 3417,  393, 3375, 3408,  472,  384, 3421,
        0, 3405, 3370, 3388, 3372, 3366, 3401, 3402, 3409, 3378,
     3399, 3384, 3385, 3398, 3411,  436, 3361, 3367,  470,  286,
     3370,  446,  513, 3379,  442,  477,  469,  487,  517, 3362,
     3358,  509,  480, 3374,  520, 3360, 3358, 3371,  404,  532,

     3355,  537, 3351,    0, 3364,  581, 3361, 3348,  641, 3361,
        0,  561, 3356,  588, 3349, 3345, 3361, 3342,  528, 3355,
      559,  595, 3355,  642, 3337,  646, 3356, 3344, 3339,  645,
     3345, 3332, 3340, 3336,  593,  513,  571,  645,  638,  601,
     3338, 3345, 3346,  647,  648, 3332,  642, 3327, 3340, 3342,
     3337,  658,  606,  127,  655, 3333, 3337,  666,  665, 3320,
     3327, 3325,    0,    0,  267,    0, 3329, 3318, 3320,    0,
      671, 3314,  672, 3318, 3314, 3330,  668, 3318,  693, 3327,
     3313,  668,  678, 3313,  639,  699,  699, 3319, 3313, 3306,
     3302, 3321,  700, 3319, 3311, 3306, 3304, 3312,  702,  701,

        0,  709, 3296,  722,  417,  711,  384, 3314, 3294, 3304,
     3292, 3293, 3290, 3300, 3296, 3287, 3286, 3547,    0,    0,
        0,    0,    0,    0,  750,  769, 3547, 3368, 3547,    0,
     3547, 3547,  789,  799, 3547, 3547, 3547, 3547, 3547,    0,
     3355, 3352,    0, 3547, 3547,  778,  809,    0,  792, 3547,
     3547, 3547, 3547, 3547, 3547, 3547, 3357, 3547, 3547, 3356,
     3547, 3547, 3547, 3355, 3547, 3354, 3547, 3353, 3352, 3547,
     3351, 3547, 3350, 3547, 3349, 3547, 3289, 3285,  779, 3271,
     3276, 3285, 3268, 3342, 3341, 3265, 3275, 3265, 3337,  822,
     3344, 3547,  847,  874,  884,  899,  914,  782,  857,    0,

     3343, 3265, 3271, 3263,    0, 3297, 3304, 3273, 3298, 3283,
        0, 3259, 3280, 3290, 3269, 3283, 3280,    0, 3256,  781,
     3252, 3254, 3246, 3245, 3285,    0, 3274, 3253,  904, 3237,
     3268,    0,    0, 3252, 3239, 3264, 3277, 3260, 3268, 3278,
        0, 3247, 3231,    0, 3257, 3263, 3219, 3262, 3265, 3222,
     3219, 3219, 3232, 3224,    0, 3261, 3245, 3252, 3212, 3211,
        0, 3232, 3243, 3243,    0, 3242, 3238, 3242, 3250, 3204,
     3209, 3210,    0, 3242, 3232, 3237, 3206,    0, 3199, 3547,
     3217, 3216, 3547, 3200, 3209, 3213, 3212, 3194, 3205, 3189,
     3208, 3547, 3184, 3186, 3183, 3204, 3187, 3196, 3547, 3547,

     3199, 3547, 3179, 3547, 3199, 3184,  769, 3197, 3181, 3190,
      851,  913, 3173, 3547, 3183, 3170, 3167,  776, 3184, 3174,
     3170, 3179, 3183,  785, 3166, 3167, 3177, 3182,    0, 3168,
     3161,  879, 3159, 3156, 3157, 3164, 3169, 3168, 3163, 3166,
      322, 3149, 3166, 3163,  726, 3168, 3161, 3162, 3161,  780,
      875, 3145, 3143, 3139, 3146, 3151, 3157, 3148, 3133, 3156,
     3140, 3147, 3147,  888, 3142, 3141, 3148, 3129, 3132, 3143,
     3140,  888, 3139, 3124, 3118, 3122, 3131, 3127, 3137, 3133,
     3116,    0, 3122, 3121, 3121, 3129,  927, 3129, 3109, 3116,
     3113, 3122,  883, 3120, 3121, 3106, 3120, 3117, 3112, 3115,

     3110, 3105, 3102, 3102, 3098, 3098, 3108, 3092, 3097,  790,
     3090, 3108,    0, 3103, 3089, 3102,  886, 3086,    0, 3095,
     3083, 3082, 3083, 3101,  784, 3086,    0, 3093, 3098,  804,
     3078, 3086, 3089, 3087, 3087, 3067, 3070, 3070, 3093, 3073,
     3061,  893,    0,  912, 3078, 3080, 3079, 3073,    0, 3077,
     3060,    0, 3063, 3073, 3062,  890, 3064, 3074, 3061, 3065,
     3069, 3051, 3063, 3070,  901, 3049, 3055, 3061, 3064, 3069,
     3068, 3048, 3052, 3055, 3058, 3044,  848,  906, 3045, 3037,
     3035, 3052, 3045, 3045, 3037, 3047,  921, 3038,  923,  905,
      947, 3043, 3048, 3041, 3026, 3039, 3042, 3027, 3032, 3031,

     3021, 3033, 3017, 3016, 3012, 3027, 3024, 3027,  872, 3023,
        0, 3025, 3026, 3016, 3022, 3021, 1001, 1011, 3076, 3075,
     3072, 3071,  991, 3547, 3547, 3547, 3547, 3547, 3547, 3547,
     3547, 3547, 3547, 3547, 3547, 3547, 3547, 3547, 3076, 3001,
     3547, 3014, 3013, 2996, 3071, 3070, 3547, 3547, 2993, 2998,
     3067, 3547, 1021, 1031, 1046, 1061, 1071, 1083, 1098, 3074,
     3547, 3007, 2996, 3005, 3023, 3025, 2987,    0,    0, 2999,
     3026, 3013, 1089, 3012,    0, 2986, 2998, 2978, 2982, 2976,
        0, 3001,    0, 2976,  511, 2928, 1048, 2925, 2893, 2889,
     2879, 2875, 1049, 2867, 2856, 2850, 2843, 2852,    0, 2883,

        0,    0,    0,    0,  169,    0,  220,  434,    0,    0,
        0,    0,    0,  567,  581,  596,  613,  646,    0,  709,
      861,  917,  904,  905,  955,  960,    0,    0,  977,    0,
        0,    0,    0,  991, 1016,    0, 1024, 1006, 1012, 3547,
     3547, 1008, 1062, 3547, 3547, 1027, 3547, 1041, 3547, 1058,
     1064, 1073, 3547, 1061, 1059, 1061, 1075, 3547, 1079, 1065,
     1064, 3547, 1063, 3547, 3547, 1080, 1087, 1088, 1089, 1069,
     3547, 1091, 1072, 1087, 3547, 1074, 1095, 1088, 1089, 1084,
     1079, 1083, 1086, 3547, 1082, 1101, 1084, 1100, 1091, 1092,
     1099, 1108,    0, 1097, 1105, 1095, 1104,    0, 1100, 1112,

     1105, 1114,    0,    0,    0, 1107, 1099, 1114,    0, 1113,
     1111, 1118, 1112, 1107, 1117, 1123, 1109, 1124,    0, 1131,
     1110, 1112, 1116, 1125, 1118,    0,    0, 1135, 1137, 1120,
     1123, 1133, 1135, 1143, 1131,    0, 1132, 1138, 1140, 1137,
     1151, 1152,    0, 1138, 1147, 1156, 1142, 1158,    0, 1159,
        0, 1149,    0, 1153, 1167, 1154, 1161, 1158, 1160, 1164,
     1173, 1166, 1170, 1155, 1162, 1178, 1176, 1189, 1190, 1191,
     1191, 1191, 1190,    0, 1183, 1196, 1183, 1188, 1196, 1193,
     1183,    0, 1190, 1198, 1187,    0, 1205, 1203, 1191, 1214,
     1202, 1216, 1212, 1206, 1224,    0, 1208, 1207, 1213, 1212,

     1207, 1207, 1212, 1214, 1214,    0,    0, 1227, 1226, 1217,
     1232, 1218, 1220, 1221, 1229, 1237, 1224, 1222, 1223, 1236,
        0, 1238, 1246, 3547, 1226, 1292, 1234, 1235, 1249,    0,
     1233, 1247, 1235, 1240, 1240,    0, 1255, 1245, 1257, 1248,
     1240, 1244, 1258, 1269, 1263, 1246, 1259,    0, 1263, 1263,
        0, 1258, 1272, 1263, 1259, 1260, 3547, 3547, 1274, 1272,
     1277, 1261, 1276, 1270, 1283, 1277,    0, 1279, 1270, 1283,
     1272,    0,    0,    0, 1277, 1288, 1267, 1278, 1287, 1288,
     1289, 1290, 1282,    0,    0, 1295, 1283, 1281, 1295, 1299,
     1289, 1297, 1293, 1308, 1292, 1294,    0,    0, 1289,    0,

     1295, 1307, 1308, 1315, 1299, 1305, 1302, 1302, 1303, 1366,
     1389, 1390, 3547, 3547, 3547, 1387, 1388, 1316, 1316, 3547,
     3547, 1318, 1323, 3547, 1388, 1398, 1413, 3547, 3547, 3547,
        0,    0, 1314,    0,    0, 1352, 1378, 1395, 1404, 1401,
     1394, 1395, 1390, 1367, 1397, 1378, 1369, 1384, 1383, 1372,
     1377,    0, 1387, 1388, 1380, 1378, 1383,    0, 1383, 1392,
     1375, 1392, 1384, 1389,    0, 1389, 1398, 1381, 1398,    0,
        0,    0,    0,    0,    0,    0, 1399, 1385, 1421, 1427,
        0, 1393, 1399, 1430,    0, 1437,    0,    0,    0,    0,
     1412, 1408, 1419, 1420, 1419, 1414, 1418, 1411, 1412, 1422,

     1406, 1428, 1410, 1425, 1409, 3547, 1412, 1433, 3547, 3547,
     3547, 3547, 3547, 3547, 1415, 1425, 3547, 1430, 1431, 1436,
     1420, 1418, 1426, 1432, 1424, 1425, 1445, 1421, 1427, 1433,
     1434, 1444, 1435, 1430, 1433,    0, 1433,    0,    0,    0,
     1455, 1443, 1441, 1440,    0,    0, 1444, 1454, 1459, 1447,
     1443, 1464, 1469, 1453, 1451, 1455, 1463, 1454, 1461, 1456,
     1457, 1467, 1456, 1474, 1461, 1471, 1460, 1471, 1466, 1462,
     1467,    0,    0,    0, 1484, 1480,    0, 1465, 1464, 1471,
     1470, 1477, 1486,    0, 1473, 1473, 1492, 1492, 1486, 1493,
     1492, 1486, 1493, 1492, 1501, 1488, 1497, 1485, 1501, 1487,

     1488, 1491, 1491, 1511, 1493, 1498, 1506, 1502, 1502, 1513,
     1516, 1496, 1521, 1514, 1523, 1516, 1525, 1518, 1517, 1531,
        0,    0, 1517, 1537, 1524, 1520, 1531, 1521, 1528, 1533,
     1520, 1531, 1532,    0, 1543, 1527, 1541, 1528, 1549, 1542,
     3547, 1527, 1531, 1550, 1533, 1530, 1550, 1557, 1558, 1545,
     1539, 1547, 1561, 1556, 1545, 1553,    0, 1552, 1558, 1563,
     1549, 1556, 1548, 1571,    0, 1552, 1565, 1580, 1581, 1573,
     1563, 1560, 1563, 1584, 1583,    0, 1584, 1571, 1582, 1574,
     1575, 1581, 1571, 1587, 1572, 1576, 1581, 1572, 3547, 1576,
     1599,    0,    0, 1578, 1595, 1595, 1588, 1583, 1584, 1593,

     1607, 1603, 1603,    0,    0, 1593, 1605,    0, 1595, 1604,
     1601, 1600, 1611,    0, 1615, 1611,    0, 1599, 1593, 1613,
     1620,    0, 1613,    0, 1603,    0, 1610,    0, 1610,    0,
     1608, 1615,    0,    0,    0, 1625,    0, 1616, 1607,    0,
        0, 1683, 1682, 3547, 3547, 1615, 1690, 1622, 1692,    0,
        0, 1655, 1654, 1656, 1666, 1653, 1655, 1660, 1656, 1657,
     1660, 1665, 1629,    0,    0,    0,    0,    0,    0, 1627,
        0,    0, 1644,    0, 1649, 1637, 1641,    0, 1643,    0,
     1653, 1641, 1645,    0, 1647, 1636,    0,    0,    0, 1641,
        0,    0,    0, 1661, 1649, 3547, 3547, 1665, 1651, 1661,

     1652, 3547, 1667, 3547, 3547, 1650, 1669, 1670, 3547, 3547,
     3547, 1660, 3547, 1659, 1675, 1674, 1675, 3547, 1655, 1677,
     1670, 1662, 1682, 1674, 1675, 1676, 1690, 1672, 1672, 1669,
     1680, 1671, 1690, 1671, 1672, 1674, 1671, 1693, 1676,    0,
     1682, 3547, 1690, 1680, 1681,    0, 1688, 1689,    0, 3547,
     3547, 1689, 1686, 1688,    0, 1692, 1699, 1706, 1705, 1697,
     1705,    0,    0,    0, 1698, 1705, 1710,    0, 1721,    0,
     1699, 1709, 1706, 1709, 1707, 1707, 1704, 1718, 1706, 1706,
     1713, 1720, 1724, 1725, 1732, 1723, 1725, 1715, 1726, 1732,
     1736, 1737, 1725, 1717, 1734, 1727, 1740, 1724, 1746, 1726,

     1723, 1745, 1725, 1747, 1727, 1750,    0, 1736, 1750, 3547,
     1742, 1758, 1759, 1741, 1740, 1743, 1757, 1761, 1765, 1764,
        0, 1757, 1758, 1753,    0, 1765, 1768,    0, 1763, 1748,
     1762, 1774, 1781, 1778, 1775, 1771,    0,    0, 1782, 1779,
     1774, 1776, 1780,    0, 1773, 1774, 1775,    0, 1782, 1790,
     1780, 1781, 1781, 3547, 1794, 3547, 1780, 1787,    0,    0,
     1796, 1789, 1790, 1787, 1803, 1808, 1804,    0,    0, 1794,
     1793, 1801,    0,    0, 1797, 1800, 1805,    0, 1819, 1814,
     1813, 1824,    0, 1812, 1806, 1827, 1812, 1814,    0,    0,
     1810, 1825, 1812, 1814, 1818,    0, 1829, 1823, 1816, 1830,

     1823, 1834, 1824, 1846, 1837, 1828, 1886, 1845,    0, 1842,
     3547, 1903, 3547, 1863, 1879, 1878, 1868,    0, 1864, 1877,
     1868,    0, 1877, 1885,    0, 1844,    0,    0,    0,    0,
     1854,    0,    0,    0, 1855,    0,    0, 1836, 1853, 3547,
     3547, 3547, 1849, 1844, 1860, 1912, 1855, 1853, 3547, 3547,
     1866, 1858, 1866, 1863, 1866, 1873, 1862,    0,    0,    0,
     3547, 1856, 1857,    0, 1863, 1864, 1860, 1867, 1881,    0,
     1884,    0, 1879, 1870, 1872, 1888,    0, 1889, 1884, 1887,
     1886,    0, 1890, 1882,    0, 1874,    0, 1895, 1878, 1896,
        0, 3547, 1893, 1895, 1900,    0, 1898, 1885, 1884, 1884,

     1887,    0, 1887, 1888, 1908, 1892, 1898, 1897, 1898, 1898,
     1896, 1899, 1913, 1899, 1902, 1912, 1921, 1911, 1904, 1904,
     1927, 1926, 1907, 1920, 1919, 1922, 1921, 1924, 1923, 1931,
     1919, 1933, 1925, 1921, 1942, 1943, 1924, 1919,    0, 1942,
     1934, 1943,    0, 1926, 1931, 1936, 1948, 1944, 1939, 1946,
     1952, 1945, 1943,    0, 3547, 1943, 1955, 1947, 1943, 1964,
     1957, 1952, 1953,    0, 1948, 1951, 1952, 1952,    0, 1969,
     1967, 1965, 1974, 1956, 1963, 1963, 1970, 1968, 1963, 1973,
     1979,    0, 1969,    0, 1966, 1974, 1984, 1977, 1978,    0,
     1982, 1988, 1995, 1990, 1993, 1994,    0, 1992, 1980, 1991,

     1993, 1986, 1994, 1985, 1996, 1987,    0, 1996, 1994,    0,
     2000, 2005, 2008, 1998, 1995, 2010, 2010, 3547,    0, 2013,
        0, 1999, 2015, 3547, 2037, 2031,    0, 2032,    0, 2046,
     2044, 2040, 2040,    0,    0,    0, 2027, 2007, 2074, 3547,
     2026, 2031, 2032, 3547, 2018, 2013, 3547,    0, 2031, 2036,
     2032, 2022,    0, 2033, 2025, 2028, 2042, 2038, 2025, 2031,
        0, 2036, 2041, 2035, 2033, 2030,    0, 3547,    0,    0,
     2045, 2033, 2039, 2055,    0, 2037, 2042, 2037,    0, 2059,
     2058, 2041, 2052, 2063, 2109, 2053, 2063, 2064, 2060,    0,
     2070, 2067, 2076, 2060, 2070, 2079, 2067, 2058, 2082, 2079,

     2077, 2074, 2087, 2075, 2070, 2075,    0, 2076,    0, 2077,
        0, 2088,    0, 2103, 2098, 2085, 2082, 2083, 2104,    0,
        0, 2084, 2100, 2101, 2092, 2104, 2090, 2091, 2111, 2104,
     2096, 2114, 2096, 2112, 2115, 2104, 2100, 2115, 2107, 2104,
     2119, 2105, 2106, 2108, 2103,    0, 2124, 2174,    0, 2117,
     2114, 2118, 2119, 2113, 2117, 2125, 2117, 2130, 2131, 2137,
     2147, 2124, 2189,    0,    0, 2149, 2144, 2135,    0, 2135,
     2149, 2158, 2134, 2146, 2141, 2143, 2153, 2144, 2146, 2146,
     2136, 2144, 2145, 2145, 2162, 2168, 2160,    0, 2164, 2171,
     2153, 2157, 2162, 2154, 2200,    0,    0, 2194, 2184, 2201,

     2197, 3547, 2155, 2182, 2158, 2174, 2164, 3547, 3547, 2231,
     3547,    0, 2167, 2178, 2184,    0, 2190, 2168, 2179, 2193,
     2188, 2179, 2194, 2182,    0, 2188, 2178, 2185,    0, 2202,
     2189, 2184, 2203, 2185, 2201, 2198, 2194, 2204, 2195, 2210,
        0,    0,    0,    0,    0,    0,    0,    0, 2199, 2214,
     2213, 2201,    0, 2213, 2202, 2198, 2205, 2205, 2201, 2217,
     2218, 2211, 2226,    0, 2225, 2206, 2219, 2205, 2214, 2226,
     2233, 2234, 2235, 2221, 3547, 2223, 2225, 2223, 2224, 2221,
        0, 2242, 2239, 2223, 2241,    0, 2244, 2230, 2233, 2243,
     2240, 2242,    0,    0, 2242,    0,    0, 2240, 2238,    0,

        0,    0,    0,    0,    0, 2250, 2235, 2238, 2248, 2249,
     2250, 2259, 2252, 2243, 2249, 2263, 2245, 3547, 2257,    0,
        0,    0,    0, 2263, 2269, 2255, 2255, 2251, 3547, 2257,
     2270, 2262, 2270, 2271, 2268, 2258, 2265, 2275,    0,    0,
        0,    0, 2265,    0, 2278, 2274, 2283, 2284, 2267, 2342,
     2295, 2304,    0,    0, 2311, 2292, 3547, 2293, 2294, 2295,
     3547, 2296, 2281, 2296, 2293, 2280, 2295, 2292, 2290, 2304,
     2300, 2287, 2286, 2293, 2309, 2297, 2298, 2310, 2297, 2310,
     2316,    0, 2302, 2297,    0, 2304, 2305, 2305, 2320, 2310,
     2302, 2304, 2311, 2317, 2318, 2314, 2324, 2311, 2312, 2327,

     2330, 2316, 2315, 2318, 2321, 2330,    0, 2336, 2337, 2338,
     2323, 2338, 2322, 2333, 2334, 2332, 2332, 2334,    0, 2333,
     2340, 2350, 2336, 2340, 2341, 2363, 2349, 2342, 2353,    0,
        0, 2361, 2343, 2356, 2350, 2356, 2366,    0, 2352, 2359,
     2366, 2363, 2371, 2373,    0, 2369, 2378, 2363, 2383, 2361,
        0, 2364, 2371,    0, 2387,    0, 2372,    0, 2374, 2369,
        0,    0, 3547,    0, 2419, 2418, 3547, 3547, 3547, 3547,
     3547, 2380, 2379,    0, 2379, 2377, 2382, 2388, 2386, 2394,
     2391,    0, 2396, 2390, 2381, 2395, 2390,    0, 2394,    0,
     2406, 2404, 2410,    0, 2406, 2407, 2392,    0, 2394, 2405,

        0, 2412, 2401, 2418, 2419, 2400,    0, 2401, 2406,    0,
     2407, 2418, 2409, 2424, 2411, 2426, 2414, 2414, 2429, 2417,
     2417, 2432, 2420, 2432,    0, 2431, 2415, 2416, 2427, 2425,
     2428, 2433, 2436, 2443,    0, 2446, 2447, 2492, 2435, 2451,
     2435,    0,    0, 2453, 2450, 2453, 2440,    0, 2455, 2464,
     2449, 2445, 2448, 2466, 2454, 2455, 2461, 2465, 2467, 2478,
     2454, 2456, 2467, 2471, 2463, 2490,    0, 2459,    0, 2469,
        0, 2477, 2469, 2475,    0, 2484,    0, 2477, 2482, 2481,
     2480, 2468, 2477, 2487, 2492, 2495, 2490, 2476, 2498, 2476,
     2500, 2486, 2500, 2483,    0,    0, 2491, 2498, 2502, 2492,

        0, 2495, 2495, 2500, 2498, 2498, 2503, 2501, 2501, 2506,
     2508, 2499, 2513, 2514, 2498, 2512, 2506, 2508, 2512, 2504,
     2510, 2511,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 2510, 2524,    0, 2528, 2526,    0, 2520, 2578, 2527,
        0, 2527, 2522, 2524, 2538, 2527, 2532, 2530, 3547,    0,
     2534, 2536,    0, 2533,    0, 2532, 2531,    0, 2549, 2541,
     2554, 2543, 2540, 2545, 2546, 2556, 2558, 2539, 2544, 2563,
     2554, 2562, 2549, 2564, 2569,    0, 2547, 2556, 2558, 2568,
     2555, 2571, 2562, 2573, 2559, 2565, 2576, 2562, 2568, 2579,
     2565, 2587,    0, 2569, 2570, 2584, 2576,    0, 2577, 2587,

     2594, 2579, 2583,    0, 2578, 2585,    0, 2593,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 2590, 2597,    0,
     2589, 2597, 2585,    0, 2592, 2585,    0, 2597, 2602,    0,
     2603, 2597, 2605,    0, 2606, 2592, 2595, 2615, 2610, 2596,
     2616, 2619, 2605, 2602,    0, 2601, 2613, 2618, 2606,    0,
     2616, 2612, 2609,    0,    0, 2610,    0,    0, 2611,    0,
        0, 2626,    0,    0, 2613, 2612, 2614,    0, 2631, 2626,
     2631,    0, 2632,    0, 2618, 2632, 2636, 2624, 2630, 2622,
        0, 2630, 2628,    0, 2643,    0, 2651, 2652,    0, 2648,
     2634, 2649, 2652, 2655, 2636, 2656, 2640, 2642, 2659,    0,

     2648, 2644,    0,    0,    0, 2660, 2651,    0,    0,    0,
     2667, 2657, 2655, 2657, 2663,    0,    0, 2668,    0,    0,
     2673, 2671, 2663,    0, 2659, 2724, 2732, 2686,    0, 2682,
     2686, 2685, 2684, 2685, 2678, 2701, 2704, 2699,    0, 2684,
     2692,    0, 2704, 2704, 2691, 2709, 2697, 2692, 2699,    0,
     2694, 2697, 2697,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     2711, 2697,    0, 2717, 2708, 2718, 2707, 2703, 2723, 2711,
     2714,    0, 2712, 2729, 2711, 2710, 2727, 2716,    0,    0,
        0,    0, 2727, 2733, 2726, 2721, 2736, 2739, 2730, 2728,

     2720, 2741, 2730, 2740, 2740,    0,    0, 2731, 2726, 2728,
     2744, 2732, 2739, 2733, 2738, 2738, 2754, 2738, 2741, 2753,
        0, 2750, 2741, 2752, 2748, 2764, 2765, 2756, 2752, 2759,
     2748, 2770,    0, 2767, 2757, 2767, 2758, 2754, 2772, 2754,
     2773,    0, 2777, 2770, 2777, 2766, 2762,    0, 2769,    0,
     2769, 2776, 2781,    0, 2772, 2773, 2776,    0,    0, 2776,
     2786,    0, 2778, 2781, 2778, 2775, 2773,    0, 2782,    0,
     2780, 2794, 2782, 2786, 2784,    0, 2791,    0,    0, 3547,
     2869, 2881, 2893, 2905, 2914, 2916, 2923, 2935, 2947, 2959,
     2971, 2983, 2995, 3001, 3010, 3016, 3025, 3037, 3049

    } ;

static yyconst flex_int16_t yy_def[3000] =
    {   0,
     2980,    1, 2981, 2981, 2982, 2982, 2983, 2983, 2984, 2984,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2985, 2980, 2986,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2980, 2980, 2980, 2980, 2980, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2980, 2980, 2980, 2987, 2987, 2987, 2987, 2988,

     2980, 2989, 2990, 2980, 2980, 2991, 2980, 2980, 2992, 2993,
     2980, 2980, 2980, 2980, 2980, 2980,   17,  117,  117,  119,
     2980, 2994, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2995, 2980, 2980,
     2980, 2980, 2980, 2980, 2996, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,

     2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987, 2987,
     2987, 2987, 2987, 2988, 2989, 2989, 2980, 2990, 2980, 2991,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2993,
     2997, 2998,  119, 2980, 2980,  119, 2980, 2994, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2995, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2996,

     2999, 2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,

     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2980, 2980, 2997, 2997,
     2998, 2998, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2999,
     2980, 2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2980, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2980, 2980, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980,
     2997, 2998, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,

     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2997, 2998, 2980, 2980, 2980, 2980, 2980, 2980, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2980, 2980, 2980, 2980, 2980, 2980, 2980,

     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980,
     2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2980, 2987, 2980, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980,
     2980, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2980, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987, 2987,
     2987, 2987, 2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2980, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2980, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980,
     2987, 2987, 2987, 2987, 2987, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2980, 2987, 2987, 2987, 2980, 2980, 2980, 2980,
     2980, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2980, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,

     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987, 2987,    0,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980

    } ;

static yyconst flex_int16_t yy_nxt[3652] =
    {   0,
       12,   13,   14,   13,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   48,
       62,   13,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
       91,   92,   93,   94,   95,   48,   96,   48,   48,   48,

       48,   97,   98,   99,  101,  101,  104,  104,  107,  107,
      111,  108,  108,  111,  161,  102,  102,  105,  105,  113,
      134,  113,  163,  269,  135,  243,  166,  170,  171,  177,
      172,  173,  174,  162,  178,  193,  194,  195,  199,  200,
      164,  167,  168,  169,  196,  197,  198,  404,  179,  205,
      257,  258,  405,  270,  259,  123,  124,  208,  347,  125,
      126,  206,  244,  245,  410,  411,  338,  109,  109,  339,
      226,  209,  340,  112,  136,  180,  112,  176,  348,  113,
      115,  415,  116,  207,  227,  117,  117,  118,  118,  118,
      118,  118,  118,  119,  119,  416,  118,  118,  182,  714,

      236,  210,  119,  119,  119,  119,  119,  119,  127,  212,
      128,  211,  715,  213,  228,  232,  474,  237,  129,  214,
      229,  215,  130,  233,  216,  183,  426, 1271,  182,  131,
      238,  427,  119,  120,  119,  119,  119,  119,  184,  217,
      132,  475,  133,  218,  119,  234,  121,  185,  240,  419,
      420,  421,  219,  412,  341,  122,  137,  413,  414,  138,
      139,  140,  342,  241,  344,  141,  142, 1272,  143,  144,
      145,  220,  345,  221,  242,  477,  222,  346,  343,  478,
      113,  146,  113,  147,  148,  149,  180,  150,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  446,  446,

      186,  223,  479,  224,  252,  363,  253,  364,  591,  182,
      480,  187,  188,  225,  189,  151,  254,  365,  152,  366,
      350,  367,  470,  190,  351,  467,  153,  553,  352,  554,
      154,  155,  156,  191,  353,  157,  255,  731,  158,  182,
      113,  159,  260,  472,  471,  160,  256,  468,  469,  261,
      592,  262,  732,  192,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  246,  473,  484,  318,  481,  263,
      202,  319,  264,  265,  482,  247,  551,  298,  485,  552,
      320,  321,  266,  498,  498,  299,  248,  300,  354,  301,
     1001,  302,  303,  304,  249,  406,  355,  305,  356,  407,

      250, 1002,  357,  251,  272,  273,  306,  274,  408,  409,
      307,  358,  275,  515,  308,  276,  277,  309,  519,  278,
      566,  359,  516,  310,  520,  360,  361,  362,  567,  279,
      311,  280,  281,  282,  283,  284,  285,  286,  542,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  312,  296,
      543,  322,  297,  323,  805,  324,  325,  326,  327,  313,
      328,  556,  314,  329,  557,  315,  330,  806,  316,  331,
      332,  368,  317,  369,  333,  559,  627,  334,  560,  370,
      335,  628,  371,  336,  372,  373,  337,  801,  374,  587,
      377,  375,  378, 2980,  379, 2980,  380,  381,  382,  385,

      583,  386,  802,  387,  383,  384,  600,  388,  563,  601,
      584, 1273,  564,  389,  390,  391,  392,  397,  393,  394,
      398,  395,  565,  396,  399,  400,  449,  594,  595,  450,
      451,  401,  596,  604,  402,  403,  433,  433,  433,  433,
      433,  433,  433,  433,  434,  434,  443,  588,  602,  589,
      618,  605,  444,  606,  590, 1253,  603,  607,  619,  445,
      119,  119,  119,  119,  119,  119,  119,  119, 2980,  447,
      447,  447,  447,  447,  447,  447,  447,  521,  452,  683,
      453,  597,  615,  522,  435, 1254,  616,  608,  436,  617,
      621,  609,  598,  684,  622,  523,  437,  610,  611,  657,

      438,  629,  439,  612,  630,  632,  623, 1274,  119,  633,
      454,  658,  455,  499,  499,  499,  499,  499,  499,  499,
      499, 2980,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  646,  490,  660,  647,  648,  661,  685,  636,
      686, 1275,  180,  494,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  637,  638,  650,  651,  652,  662,
      680,  692,  681,  490,  712,  182,  682, 1276,  713,  663,
      495,  693,  495,  494, 1277,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  182,  497,  641,  665,  687,
      703,  642,  668,  697,  673,  689,  690,  765,  766,  699,
     1278,  643,  674,  691,  716,  688,  666,  644,  704,  669,
      709,  675,  698,  700,  717,  701,  497,  710,  720,  723,
      760,  736,  711,  724,  725, 1279,  740,  747,  726,  741,
      727,  737,  761,  748,  721,  722,  742,  738,  762,  750,
      743,  751,  752, 2980,  763,  767,  777,  769, 2980,  788,
      778,  753,  785,  768,  754,  790,  786,  755,  756,  803,
      757,  770,  426,  791,  771,  787,  789,  427,  795,  841,
      779,  796, 1006,  797,  804,  792,  798,  446,  446,  793,

      823,  498,  498,  824,  825, 1007,  799,  800,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  447,  447,
      447,  447,  447,  447,  447,  447,  853,  877,  853,  960,
      975,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  878,  826,  961,  827,  982, 1094,  976, 1012,  983,
     1095, 1013,  855, 1109,  842, 1110,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  499,  499,  499,  499,
      499,  499,  499,  499,  828, 1114,  829,  856,  857, 1115,
      857, 1028,  855,  858,  858,  858,  858,  858,  858,  858,

      858,  858,  858,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496, 1280,  859,  965, 1164,  856,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  495,  966,
      495, 1165,  967,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  886,  859,  887, 1014,  990,  888, 1202,
      968,  889, 1029, 1076, 1038,  890, 1281, 1203,  891, 1030,
     1015,  892,  969,  991,  992, 1039, 1101, 1127, 1040, 1077,
     1141, 1151, 1102, 1128, 1282,  893, 1142, 1166,  894, 1129,
     1130,  895, 1152, 1181, 1131,  896, 1182, 1167, 1283,  897,
      970, 1176,  898, 1054, 1055, 1056, 1057, 1058, 1059, 1284,

     1179, 1177, 1213, 1214, 1060, 1061, 1180, 1062, 1063, 1064,
     1065, 1066, 1067, 1183, 1285, 1286, 1068, 1069, 1070, 1184,
     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      853, 1287,  853, 1288, 1289,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854, 1225, 1290, 1225, 1291, 1292,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
      858,  858,  858,  858,  858,  858,  858,  858,  858,  858,

     1295, 1227,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  857, 1293,  857, 1296, 1294,  858,  858,  858,
      858,  858,  858,  858,  858,  858,  858, 1237, 1256, 1263,
     1238, 1227, 1297, 1239, 1257, 1264, 1240, 1241, 1298, 1299,
     1300, 1242, 1243, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
     1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
     1318, 1319, 1320, 1244, 1321, 1322, 1323, 1324, 1325, 1326,
     1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
     1337, 1338, 1339, 1340, 1341, 1342, 1345, 1346, 1347, 1348,
     1349, 1350, 1351, 1352, 1353, 1354, 1356, 1343, 1344, 1357,

     1355, 1358, 1359, 1360, 1361, 1364, 1369, 1370, 1365, 1362,
     1371, 1366, 1372, 1373, 1374, 1375, 1363, 1376, 1367, 1377,
     1378, 1379, 1380, 1381, 1382, 1368, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1392, 1393, 1394, 1395, 1397, 1398,
     1402, 1404, 1405, 1396, 1391, 1399, 1412, 1400, 1406, 1401,
     1403, 1407, 1408, 1413, 1415, 1417, 1409, 1419, 1420, 1410,
     1421, 1411, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1432, 1433, 1434, 1414, 1416, 1418, 1435, 1436, 1437,
     1438, 1431, 1439, 1440, 1441, 1444, 1445, 1446, 1442, 1447,
     1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,

     1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1443, 1466,
     1467, 1468, 1469, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
     1480, 1481, 1482, 1483, 1479, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,
     1500, 1501, 1484, 1502, 1503, 1504, 1505, 1506, 1507, 1508,
     1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
     1519, 1520, 1470, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
     1528, 1471, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
     1537, 1538, 1539, 1540, 1541,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818, 1542, 1543, 1544, 1545, 1546,

     1547, 1548, 1549, 1211, 1550, 1551, 1212, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1225, 1552, 1225,
     1559, 1560, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1553, 1555, 1561, 1557, 1563, 1564, 1565, 1562,
     1554, 1558, 1566, 1556, 1567, 1568, 1569, 1570, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
     1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592,
     1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602,
     1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612,

     1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622,
     1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632,
     1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652,
     1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
     1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672,
     1673, 1674, 1675, 1676, 1678, 1677, 1679, 1680, 1681, 1682,
     1684, 1685, 1686, 1687, 1688, 1689, 1683, 1690, 1691, 1692,
     1693, 1695, 1696, 1697, 1699, 1700, 1694, 1701, 1702, 1703,
     1704, 1705, 1706, 1698, 1707, 1708, 1709, 1710, 1711, 1712,

     1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1722, 1721,
     1723, 1726, 1724, 1727, 1728, 1729, 1730, 1731, 1732, 1733,
     1734, 1735, 1736, 1737, 1738, 1725, 1739, 1740, 1741, 1742,
     1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752,
     1754, 1756, 1757, 1758, 1755, 1759, 1753, 1760, 1761, 1762,
     1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772,
     1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782,
     1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
     1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802,
     1803, 1804, 1805, 1806, 1808, 1809, 1807,  820,  822, 1810,

     1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
     1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
     1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
     1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
     1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
     1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
     1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
     1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
     1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,

     1911, 1912, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
     1922, 1923, 1924, 1925, 1926, 1927, 1928, 1913, 1929, 1930,
     1931, 1932, 1933, 1934, 1937, 1938, 1939, 1940, 1941, 1942,
     1943, 1944, 1945, 1946, 1935, 1947, 1948, 1951, 1952, 1953,
     1954, 1955, 1956, 1936, 1957, 1958, 1959, 1961, 1962, 1949,
     1963, 1964, 1965, 1950, 1966, 1967, 1968, 1960, 1969, 1970,
     1971, 1972, 1973, 1981, 1974, 1982, 1983, 1984, 1975, 1985,
     1986, 1976, 1977, 1987, 1988, 1978, 1989, 1990, 1991, 1979,
     1992, 1993, 1980, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
     2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,

     2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2011,
     2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
     2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040,
     2041, 2042, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
     2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
     2062, 2063, 2064, 2066, 2067, 2068, 2069, 2065, 2070, 2071,
     2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
     2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
     2043, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2100, 2101,
     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,

     2099, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2120, 2121,
     2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2119, 2130,
     2131, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2132,
     2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150,
     2151, 2153, 2154, 2155, 2156, 2157, 2159, 2160, 2158, 2161,
     2162, 2163, 2164, 2165, 2166, 2167, 2168, 2152, 2169, 2170,
     2171, 2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180,
     2181, 2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190,
     2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200,
     2201, 2202, 2203, 2204, 2207, 2208, 2209, 2210, 2211, 2212,

     2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
     2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2223, 2232,
     2233, 2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242,
     2243, 2244, 2245, 2246, 2247, 2248, 2250, 2251, 2252, 2253,
     2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262, 2263,
     2264, 2265, 2269, 2270, 2205, 2266, 2267, 2268, 2206, 2271,
     2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281,
     2282, 2283, 2284, 2249, 2285, 2286, 2287, 2288, 2289, 2290,
     2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300,
     2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310,

     2311, 2312, 2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320,
     2321, 2322, 2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330,
     2331, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340,
     2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350,
     2351, 2352, 2353, 2354, 2355, 2356, 2357, 2359, 2360, 2361,
     2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371,
     2372, 2373, 2374, 2375, 2358, 2376, 2377, 2378, 2379, 2380,
     2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,
     2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400,
     2401, 2402, 2403, 2404, 2405, 2406, 2407, 2408, 2409, 2410,

     2411, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420,
     2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430,
     2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440,
     2441, 2442, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450,
     2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460,
     2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470,
     2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480,
     2481, 2482, 2483, 2484, 2485, 2486, 2488, 2489, 2490, 2487,
     2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500,
     2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510,

     2511, 2512, 2513, 2514, 2515, 2518, 2521, 2524, 2525, 2526,
     2527, 2528, 2529, 2530, 2531, 2516, 2519, 2522, 2532, 2533,
     2534, 2535, 2517, 2520, 2523, 2536, 2537, 2538, 2539, 2540,
     2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2550,
     2551, 2552, 2553, 2555, 2556, 2554, 2557, 2558, 2559, 2560,
     2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570,
     2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580,
     2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590,
     2591, 2592, 2593, 2594, 2595, 2596, 2597, 2598, 2599, 2600,
     2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610,

     2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619, 2620,
     2621, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630,
     2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640,
     2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650,
     2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660,
     2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670,
     2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680,
     2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690,
     2691, 2692, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700,
     2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710,

     2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720,
     2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730,
     2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740,
     2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750,
     2751, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760,
     2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770,
     2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780,
     2781, 2782, 2783, 2784, 2785, 2786, 2787, 2788, 2789, 2790,
     2791, 2792, 2793, 2794, 2795, 2796, 2797, 2798, 2799, 2800,
     2801, 2802, 2803, 2804, 2805, 2806, 2808, 2809, 2810, 2811,

     2814, 2815, 2816, 2817, 2807, 2818, 2819, 2820, 2821, 2822,
     2823, 2824, 2812, 2825, 2813, 2826, 2827, 2828, 2829, 2830,
     2831, 2832, 2836, 2833, 2837, 2838, 2839, 2840, 2841, 2842,
     2843, 2844, 2834, 2845, 2846, 2847, 2848, 2849, 2850, 2851,
     2835, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860,
     2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870,
     2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2880,
     2881, 2882, 2883, 2884, 2885, 2886, 2887, 2888, 2889, 2890,
     2891, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2900,
     2901, 2902, 2903, 2904, 2905, 2906, 2907, 2908, 2909, 2910,

     2911, 2912, 2913, 2914, 2915, 2916, 2917, 2918, 2919, 2920,
     2921, 2922, 2923, 2924, 2925, 2926, 2927, 2928, 2929, 2930,
     2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940,
     2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950,
     2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960,
     2961, 2962, 2963, 2964, 2965, 2966, 2967, 2968, 2969, 2970,
     2971, 2972, 2973, 2974, 2975, 2976, 2977, 2978, 2979,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  106,  106,  106,  106,  106,  106,  106,

      106,  106,  106,  106,  106,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  175,  175,  175,
      175,  181,  181, 1270,  181, 1269, 1268,  181,  203,  203,
      203,  203,  203, 1267,  203,  424, 1266,  424, 1265,  424,
      424,  424,  424,  424,  424,  424,  424,  425, 1262,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  428,
      428,  428, 1261,  428,  428,  428,  428,  428,  428,  428,
      428,  430, 1260, 1259,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  432,  432,  432,  432,  432,  432,  432,
      432,  432,  432,  432,  432,  440, 1258,  440,  440,  440,

      440,  440,  440,  440,  440, 1255,  440,  448,  448,  448,
      491,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  500,  500,  500,  819,  819,  819, 1252,  819,
      819,  819,  819,  819,  819,  819,  819,  821,  821,  821,
     1251,  821,  821,  821,  821,  821,  821,  821,  821,  860,
      860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
      860, 1250, 1249, 1248, 1247, 1246, 1245, 1236, 1235, 1234,
     1233, 1232, 1231, 1230, 1229, 1228,  861, 1224, 1223, 1222,
     1221, 1220, 1219, 1218, 1217, 1216, 1215, 1212,  822, 1211,
      820, 1209, 1208, 1207, 1206, 1205, 1204, 1201, 1200, 1199,

     1198, 1197, 1196, 1195, 1194, 1193, 1192, 1191, 1190, 1189,
     1188, 1187, 1186, 1185, 1178, 1175, 1174, 1173, 1172, 1171,
     1170, 1169, 1168, 1163, 1162, 1161, 1160, 1159, 1158, 1157,
     1156, 1155, 1154, 1153, 1150, 1149, 1148, 1147, 1146, 1145,
     1144, 1143, 1140, 1139, 1138, 1137, 1136, 1135, 1134, 1133,
     1132, 1126, 1125, 1124, 1123, 1122, 1121, 1120, 1119, 1118,
     1117, 1116, 1113, 1112, 1111, 1108, 1107, 1106, 1105, 1104,
     1103, 1100, 1099, 1098, 1097, 1096, 1093, 1092, 1091, 1090,
     1089, 1088, 1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080,
     1079, 1078, 1075, 1074, 1073, 1072, 1071, 1053, 1052, 1051,

     1050, 1049, 1048, 1047, 1046, 1045, 1044, 1043, 1042, 1041,
     1037, 1036, 1035, 1034, 1033, 1032, 1031, 1027, 1026, 1025,
     1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1011,
     1010, 1009, 1008, 1005, 1004, 1003, 1000,  999,  998,  997,
      996,  995,  994,  993,  989,  988,  987,  986,  985,  984,
      981,  980,  979,  978,  977,  974,  973,  972,  971,  964,
      963,  962,  959,  958,  957,  956,  955,  954,  953,  952,
      951,  950,  949,  948,  947,  946,  945,  944,  943,  942,
      941,  940,  939,  938,  937,  936,  935,  934,  933,  932,
      931,  930,  929,  928,  927,  926,  925,  924,  923,  922,

      921,  920,  919,  918,  917,  916,  915,  914,  913,  912,
      911,  910,  909,  908,  907,  906,  905,  904,  903,  902,
      901,  900,  899,  885,  884,  883,  882,  881,  880,  879,
      876,  875,  874,  873,  872,  871,  870,  869,  868,  867,
      866,  865,  864,  863,  862,  861,  492,  852,  851,  850,
      849,  848,  847,  846,  845,  844,  843,  840,  839,  838,
      837,  836,  835,  834,  833,  832,  831,  830,  822,  820,
      429,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      807,  794,  784,  783,  782,  781,  780,  776,  775,  774,
      773,  772,  764,  759,  758,  749,  746,  745,  744,  739,

      735,  734,  733,  730,  729,  728,  719,  718,  708,  707,
      706,  705,  702,  696,  695,  694,  679,  678,  677,  676,
      672,  671,  670,  667,  664,  659,  656,  655,  654,  653,
      649,  645,  640,  639,  635,  634,  631,  626,  625,  624,
      620,  614,  613,  599,  593,  586,  585,  582,  581,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  570,
      569,  568,  562,  561,  558,  555,  550,  549,  548,  547,
      546,  545,  544,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  518,  517,  514,  513,  512,  511,  510,  509,  508,

      507,  506,  505,  504,  503,  502,  501,  492,  489,  488,
      487,  486,  483,  476,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  442,  441,  431,  429,  423,
      422,  418,  417,  376,  349,  271,  268,  267,  239,  235,
      231,  230,  204,  165,  114, 2980,   11, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,

     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980
    } ;

static yyconst flex_int16_t yy_chk[3652] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    3,    4,    5,    6,    7,    8,
        9,    7,    8,   10,   24,    3,    4,    5,    6,   13,
       20,   13,   25,   60,   20,   53,   27,   28,   28,   29,
       28,   28,   28,   24,   29,   34,   34,   34,   36,   36,
       25,   27,   27,   27,   35,   35,   35,   87,   29,   40,
       56,   56,   87,   60,   56,   19,   19,   41,   76,   19,
       19,   40,   53,   53,   89,   89,   73,    7,    8,   73,
       44,   41,   73,    9,   20,   30,   10,   28,   76,   13,
       17,   91,   17,   40,   44,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   91,  118,  118,   30,  354,

       50,   41,   17,   17,   17,   17,   17,   17,   19,   42,
       19,   41,  354,   42,   44,   47,  150,   50,   19,   42,
       44,   42,   19,   47,   42,   30,  102,  905,   30,   19,
       50,  102,   17,   17,   17,   17,   17,   17,   30,   42,
       19,  150,   19,   42,  118,   47,   17,   30,   52,   97,
       97,   97,   42,   90,   74,   17,   21,   90,   90,   21,
       21,   21,   74,   52,   75,   21,   21,  907,   21,   21,
       21,   43,   75,   43,   52,  152,   43,   75,   74,  152,
      113,   21,  113,   21,   21,   21,   31,   21,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,  120,  120,

       32,   43,  153,   43,   55,   81,   55,   81,  280,   31,
      153,   32,   32,   43,   32,   21,   55,   81,   21,   81,
       78,   81,  148,   32,   78,  147,   21,  251,   78,  251,
       21,   21,   21,   32,   78,   21,   55,  365,   21,   31,
      113,   21,   57,  149,  148,   21,   55,  147,  147,   57,
      280,   57,  365,   32,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   54,  149,  156,   70,  154,   57,
       38,   70,   57,   57,  154,   54,  250,   67,  156,  250,
       70,   70,   57,  183,  183,   67,   54,   67,   79,   67,
      641,   67,   67,   67,   54,   88,   79,   67,   79,   88,

       54,  641,   79,   54,   65,   65,   68,   65,   88,   88,
       68,   80,   65,  214,   68,   65,   65,   68,  217,   65,
      259,   80,  214,   68,  217,   80,   80,   80,  259,   65,
       68,   65,   65,   65,   65,   65,   65,   65,  238,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   69,   65,
      238,   71,   65,   71,  407,   71,   71,   71,   71,   69,
       71,  253,   69,   71,  253,   69,   72,  407,   69,   72,
       72,   82,   69,   82,   72,  255,  299,   72,  255,   82,
       72,  299,   82,   72,   82,   82,   72,  405,   82,  279,
       84,   82,   84,  117,   84,  117,   84,   84,   84,   85,

      276,   85,  405,   85,   84,   84,  285,   85,  258,  285,
      276,  908,  258,   85,   85,   85,   85,   86,   85,   85,
       86,   85,  258,   85,   86,   86,  124,  282,  282,  124,
      124,   86,  283,  287,   86,   86,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  117,  279,  286,  279,
      293,  287,  117,  288,  279,  885,  286,  288,  293,  117,
      119,  119,  119,  119,  119,  119,  119,  119,  117,  121,
      121,  121,  121,  121,  121,  121,  121,  218,  124,  336,
      124,  283,  292,  218,  109,  885,  292,  289,  109,  292,
      295,  289,  283,  336,  295,  218,  109,  289,  289,  319,

      109,  300,  109,  289,  300,  302,  295,  914,  119,  302,
      124,  319,  124,  184,  184,  184,  184,  184,  184,  184,
      184,  119,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  312,  175,  321,  312,  312,  321,  337,  306,
      337,  915,  181,  180,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  306,  306,  314,  314,  314,  322,
      335,  340,  335,  175,  353,  181,  335,  916,  353,  322,
      182,  340,  182,  180,  917,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  181,  182,  309,  324,  338,
      347,  309,  326,  344,  330,  339,  339,  385,  385,  345,
      918,  309,  330,  339,  355,  338,  324,  309,  347,  326,
      352,  330,  344,  345,  355,  345,  182,  352,  358,  359,
      382,  371,  352,  359,  359,  920,  373,  377,  359,  373,
      359,  371,  382,  377,  358,  358,  373,  371,  383,  379,
      373,  379,  379,  425,  383,  386,  393,  387,  425,  400,
      393,  379,  399,  386,  379,  402,  399,  379,  379,  406,
      379,  387,  426,  402,  387,  399,  400,  426,  404,  479,
      393,  404,  645,  404,  406,  402,  404,  446,  446,  402,

      449,  498,  498,  449,  449,  645,  404,  404,  433,  433,
      433,  433,  433,  433,  433,  433,  433,  433,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  447,  447,
      447,  447,  447,  447,  447,  447,  490,  520,  490,  607,
      618,  490,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  520,  449,  607,  449,  624,  710,  618,  650,  624,
      710,  650,  490,  725,  479,  725,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  499,  499,  499,  499,
      499,  499,  499,  499,  449,  730,  449,  493,  494,  730,
      494,  664,  490,  494,  494,  494,  494,  494,  494,  494,

      494,  494,  494,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  921,  494,  611,  777,  493,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  497,  611,
      497,  777,  612,  497,  497,  497,  497,  497,  497,  497,
      497,  497,  497,  529,  494,  529,  651,  632,  529,  809,
      612,  529,  664,  693,  672,  529,  922,  809,  529,  664,
      651,  529,  612,  632,  632,  672,  717,  742,  672,  693,
      756,  765,  717,  742,  923,  529,  756,  778,  529,  744,
      744,  529,  765,  790,  744,  529,  790,  778,  924,  529,
      612,  787,  529,  687,  687,  687,  687,  687,  687,  925,

      789,  787,  823,  823,  687,  687,  789,  687,  687,  687,
      687,  687,  687,  791,  926,  929,  687,  687,  687,  791,
      817,  817,  817,  817,  817,  817,  817,  817,  817,  817,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      853,  853,  853,  853,  853,  853,  853,  853,  853,  853,
      854,  854,  854,  854,  854,  854,  854,  854,  854,  854,
      855,  934,  855,  935,  937,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  856,  938,  856,  939,  942,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      857,  857,  857,  857,  857,  857,  857,  857,  857,  857,

      946,  856,  858,  858,  858,  858,  858,  858,  858,  858,
      858,  858,  859,  943,  859,  948,  943,  859,  859,  859,
      859,  859,  859,  859,  859,  859,  859,  873,  887,  893,
      873,  856,  950,  873,  887,  893,  873,  873,  951,  952,
      954,  873,  873,  955,  956,  957,  959,  960,  961,  963,
      966,  967,  968,  969,  970,  972,  973,  974,  976,  977,
      978,  979,  980,  873,  981,  982,  983,  985,  986,  987,
      988,  989,  990,  991,  992,  994,  995,  996,  997,  999,
     1000, 1001, 1002, 1006, 1007, 1008, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018, 1020, 1021, 1008, 1008, 1022,

     1020, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1029, 1028,
     1032, 1029, 1033, 1034, 1035, 1037, 1028, 1038, 1029, 1039,
     1040, 1041, 1042, 1044, 1045, 1029, 1046, 1047, 1048, 1050,
     1052, 1054, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
     1063, 1064, 1065, 1059, 1055, 1062, 1067, 1062, 1066, 1062,
     1063, 1066, 1066, 1068, 1069, 1070, 1066, 1071, 1072, 1066,
     1073, 1066, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1083,
     1084, 1085, 1087, 1088, 1068, 1069, 1070, 1089, 1090, 1091,
     1092, 1084, 1093, 1094, 1095, 1097, 1098, 1099, 1095, 1100,
     1101, 1102, 1103, 1104, 1105, 1108, 1109, 1110, 1111, 1112,

     1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1095, 1122,
     1123, 1125, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134,
     1135, 1137, 1138, 1139, 1134, 1140, 1141, 1142, 1143, 1144,
     1145, 1146, 1147, 1149, 1150, 1152, 1153, 1154, 1155, 1156,
     1159, 1160, 1139, 1161, 1162, 1163, 1164, 1165, 1166, 1168,
     1169, 1170, 1171, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1183, 1126, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1126, 1194, 1195, 1196, 1199, 1201, 1202, 1203, 1204,
     1205, 1206, 1207, 1208, 1209, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1211, 1212, 1216, 1217, 1218,

     1219, 1222, 1223, 1211, 1233, 1236, 1212, 1225, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1227, 1237, 1227,
     1241, 1242, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1238, 1239, 1243, 1240, 1244, 1245, 1246, 1243,
     1238, 1240, 1247, 1239, 1248, 1249, 1250, 1251, 1253, 1254,
     1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1266,
     1267, 1268, 1269, 1277, 1278, 1279, 1280, 1282, 1283, 1284,
     1286, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
     1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1315, 1316,

     1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
     1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1337, 1341,
     1342, 1343, 1344, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1375, 1376,
     1378, 1379, 1380, 1381, 1382, 1383, 1385, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 1392, 1394, 1395, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1397, 1404, 1405, 1406,
     1407, 1408, 1409, 1410, 1411, 1412, 1407, 1413, 1414, 1415,
     1416, 1417, 1418, 1410, 1419, 1420, 1423, 1424, 1425, 1426,

     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1435, 1436, 1435,
     1437, 1438, 1437, 1439, 1440, 1442, 1443, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1451, 1437, 1452, 1453, 1454, 1455,
     1456, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1466, 1467,
     1468, 1469, 1470, 1471, 1468, 1472, 1467, 1473, 1474, 1475,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1490, 1491, 1494, 1495, 1496, 1497, 1498, 1499,
     1500, 1501, 1502, 1503, 1506, 1507, 1509, 1510, 1511, 1512,
     1513, 1515, 1516, 1518, 1519, 1520, 1521, 1523, 1525, 1527,
     1529, 1531, 1532, 1536, 1538, 1539, 1536, 1542, 1543, 1546,

     1547, 1548, 1549, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
     1559, 1560, 1561, 1562, 1563, 1570, 1573, 1575, 1576, 1577,
     1579, 1581, 1582, 1583, 1585, 1586, 1590, 1594, 1595, 1598,
     1599, 1600, 1601, 1603, 1606, 1607, 1608, 1612, 1614, 1615,
     1616, 1617, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626,
     1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636,
     1637, 1638, 1639, 1641, 1643, 1644, 1645, 1647, 1648, 1652,
     1653, 1654, 1656, 1657, 1658, 1659, 1660, 1661, 1665, 1666,
     1667, 1669, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,

     1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698,
     1699, 1700, 1701, 1702, 1703, 1704, 1705, 1690, 1706, 1708,
     1709, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1722, 1723, 1724, 1713, 1726, 1727, 1729, 1730, 1731,
     1732, 1733, 1734, 1713, 1735, 1736, 1739, 1740, 1741, 1727,
     1742, 1743, 1745, 1727, 1746, 1747, 1749, 1739, 1750, 1751,
     1752, 1753, 1755, 1757, 1755, 1758, 1761, 1762, 1755, 1763,
     1764, 1755, 1755, 1765, 1766, 1755, 1767, 1770, 1771, 1755,
     1772, 1775, 1755, 1776, 1777, 1779, 1780, 1781, 1782, 1784,
     1785, 1786, 1787, 1788, 1791, 1792, 1793, 1794, 1795, 1797,

     1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1797,
     1807, 1808, 1810, 1812, 1814, 1815, 1816, 1817, 1819, 1820,
     1821, 1823, 1824, 1826, 1831, 1835, 1838, 1839, 1843, 1844,
     1845, 1846, 1847, 1848, 1851, 1852, 1853, 1854, 1855, 1856,
     1857, 1862, 1863, 1865, 1866, 1867, 1868, 1869, 1871, 1873,
     1874, 1875, 1876, 1878, 1879, 1880, 1881, 1876, 1883, 1884,
     1886, 1888, 1889, 1890, 1893, 1894, 1895, 1897, 1898, 1899,
     1900, 1901, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
     1846, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919,
     1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929,

     1917, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938,
     1940, 1941, 1942, 1944, 1945, 1946, 1947, 1948, 1936, 1949,
     1950, 1951, 1952, 1953, 1956, 1957, 1958, 1959, 1960, 1950,
     1961, 1962, 1963, 1965, 1966, 1967, 1968, 1970, 1971, 1972,
     1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1978, 1981,
     1983, 1985, 1986, 1987, 1988, 1989, 1991, 1973, 1992, 1993,
     1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
     2005, 2006, 2008, 2009, 2011, 2012, 2013, 2014, 2015, 2016,
     2017, 2020, 2022, 2023, 2025, 2026, 2028, 2030, 2031, 2032,
     2033, 2037, 2038, 2039, 2041, 2042, 2043, 2045, 2046, 2049,

     2050, 2051, 2052, 2054, 2055, 2056, 2057, 2058, 2059, 2060,
     2062, 2063, 2064, 2065, 2066, 2071, 2072, 2073, 2060, 2074,
     2076, 2077, 2078, 2080, 2081, 2082, 2083, 2084, 2085, 2085,
     2085, 2085, 2085, 2085, 2085, 2085, 2086, 2087, 2088, 2089,
     2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
     2101, 2102, 2104, 2105, 2039, 2103, 2103, 2103, 2039, 2106,
     2108, 2110, 2112, 2114, 2115, 2116, 2117, 2118, 2119, 2122,
     2123, 2124, 2125, 2085, 2126, 2127, 2128, 2129, 2130, 2131,
     2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2147, 2148, 2150, 2151, 2152, 2153,

     2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162, 2163,
     2163, 2163, 2163, 2166, 2167, 2168, 2170, 2171, 2172, 2173,
     2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183,
     2184, 2185, 2186, 2187, 2189, 2190, 2191, 2192, 2193, 2194,
     2195, 2198, 2199, 2200, 2201, 2203, 2204, 2205, 2206, 2207,
     2210, 2213, 2214, 2215, 2217, 2218, 2219, 2220, 2221, 2222,
     2223, 2224, 2226, 2227, 2204, 2228, 2230, 2231, 2232, 2233,
     2234, 2235, 2236, 2237, 2238, 2239, 2240, 2249, 2250, 2251,
     2252, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2262,
     2263, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273,

     2274, 2276, 2277, 2278, 2279, 2280, 2282, 2283, 2284, 2285,
     2287, 2288, 2289, 2290, 2291, 2292, 2295, 2298, 2299, 2306,
     2307, 2308, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316,
     2317, 2319, 2324, 2325, 2326, 2327, 2328, 2330, 2331, 2332,
     2333, 2334, 2335, 2336, 2337, 2338, 2343, 2345, 2346, 2347,
     2348, 2349, 2350, 2351, 2352, 2355, 2356, 2358, 2359, 2360,
     2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371,
     2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2377,
     2381, 2383, 2384, 2386, 2387, 2388, 2389, 2390, 2391, 2392,
     2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402,

     2403, 2404, 2405, 2406, 2408, 2409, 2410, 2411, 2412, 2413,
     2414, 2415, 2416, 2417, 2418, 2408, 2409, 2410, 2420, 2421,
     2422, 2423, 2408, 2409, 2410, 2424, 2425, 2426, 2427, 2428,
     2429, 2432, 2433, 2434, 2435, 2436, 2437, 2439, 2440, 2441,
     2442, 2443, 2444, 2446, 2447, 2444, 2448, 2449, 2450, 2452,
     2453, 2455, 2457, 2459, 2460, 2465, 2466, 2472, 2473, 2475,
     2476, 2477, 2478, 2479, 2480, 2481, 2483, 2484, 2485, 2486,
     2487, 2489, 2491, 2492, 2493, 2495, 2496, 2497, 2499, 2500,
     2502, 2503, 2504, 2505, 2506, 2508, 2509, 2511, 2512, 2513,
     2514, 2515, 2516, 2517, 2518, 2519, 2520, 2521, 2522, 2523,

     2524, 2526, 2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534,
     2536, 2537, 2538, 2538, 2538, 2538, 2538, 2538, 2538, 2538,
     2539, 2540, 2541, 2544, 2545, 2546, 2547, 2549, 2550, 2551,
     2552, 2553, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2561,
     2562, 2563, 2564, 2565, 2566, 2568, 2570, 2572, 2573, 2574,
     2576, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586,
     2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2597, 2598,
     2599, 2600, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609,
     2610, 2611, 2612, 2613, 2614, 2615, 2616, 2617, 2618, 2619,
     2620, 2621, 2622, 2632, 2633, 2635, 2636, 2638, 2639, 2639,

     2639, 2639, 2639, 2639, 2639, 2639, 2640, 2642, 2643, 2644,
     2645, 2646, 2647, 2648, 2651, 2652, 2654, 2656, 2657, 2659,
     2660, 2661, 2662, 2663, 2664, 2665, 2666, 2667, 2668, 2669,
     2670, 2671, 2672, 2673, 2674, 2675, 2677, 2678, 2679, 2680,
     2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690,
     2691, 2692, 2694, 2695, 2696, 2697, 2699, 2700, 2701, 2702,
     2703, 2705, 2706, 2708, 2718, 2719, 2721, 2722, 2723, 2725,
     2726, 2728, 2729, 2731, 2732, 2733, 2735, 2736, 2737, 2738,
     2739, 2740, 2741, 2742, 2743, 2744, 2746, 2747, 2748, 2749,
     2751, 2752, 2753, 2756, 2759, 2762, 2765, 2766, 2767, 2769,

     2770, 2771, 2773, 2775, 2762, 2776, 2777, 2778, 2779, 2780,
     2782, 2783, 2769, 2785, 2769, 2787, 2788, 2790, 2791, 2792,
     2793, 2794, 2795, 2794, 2796, 2797, 2798, 2799, 2801, 2802,
     2806, 2807, 2794, 2811, 2812, 2813, 2814, 2815, 2818, 2821,
     2794, 2822, 2823, 2825, 2826, 2826, 2826, 2826, 2826, 2826,
     2826, 2826, 2827, 2827, 2827, 2827, 2827, 2827, 2827, 2827,
     2828, 2830, 2831, 2832, 2833, 2834, 2835, 2836, 2837, 2838,
     2840, 2841, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2851,
     2852, 2853, 2871, 2872, 2874, 2875, 2876, 2877, 2878, 2879,
     2880, 2881, 2883, 2884, 2885, 2886, 2887, 2888, 2893, 2894,

     2895, 2896, 2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904,
     2905, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916,
     2917, 2918, 2919, 2920, 2922, 2923, 2924, 2925, 2926, 2927,
     2928, 2929, 2930, 2931, 2932, 2934, 2935, 2936, 2937, 2938,
     2939, 2940, 2941, 2943, 2944, 2945, 2946, 2947, 2949, 2951,
     2952, 2953, 2955, 2956, 2957, 2960, 2961, 2963, 2964, 2965,
     2966, 2967, 2969, 2971, 2972, 2973, 2974, 2975, 2977, 2981,
     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981,
     2981, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982,
     2982, 2982, 2982, 2983, 2983, 2983, 2983, 2983, 2983, 2983,

     2983, 2983, 2983, 2983, 2983, 2984, 2984, 2984, 2984, 2984,
     2984, 2984, 2984, 2984, 2984, 2984, 2984, 2985, 2985, 2985,
     2985, 2986, 2986,  900, 2986,  898,  897, 2986, 2987, 2987,
     2987, 2987, 2987,  896, 2987, 2988,  895, 2988,  894, 2988,
     2988, 2988, 2988, 2988, 2988, 2988, 2988, 2989,  892, 2989,
     2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2989, 2990,
     2990, 2990,  891, 2990, 2990, 2990, 2990, 2990, 2990, 2990,
     2990, 2991,  890,  889, 2991, 2991, 2991, 2991, 2991, 2991,
     2991, 2991, 2991, 2992, 2992, 2992, 2992, 2992, 2992, 2992,
     2992, 2992, 2992, 2992, 2992, 2993,  888, 2993, 2993, 2993,

     2993, 2993, 2993, 2993, 2993,  886, 2993, 2994, 2994, 2994,
     2995, 2995, 2995, 2995, 2995, 2995, 2995, 2995, 2995, 2995,
     2995, 2995, 2996, 2996, 2996, 2997, 2997, 2997,  884, 2997,
     2997, 2997, 2997, 2997, 2997, 2997, 2997, 2998, 2998, 2998,
      882, 2998, 2998, 2998, 2998, 2998, 2998, 2998, 2998, 2999,
     2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999,
     2999,  880,  879,  878,  877,  876,  874,  872,  871,  870,
      867,  866,  865,  864,  863,  862,  860,  851,  850,  849,
      846,  845,  844,  843,  842,  840,  839,  822,  821,  820,
      819,  816,  815,  814,  813,  812,  810,  808,  807,  806,

      805,  804,  803,  802,  801,  800,  799,  798,  797,  796,
      795,  794,  793,  792,  788,  786,  785,  784,  783,  782,
      781,  780,  779,  776,  775,  774,  773,  772,  771,  770,
      769,  768,  767,  766,  764,  763,  762,  761,  760,  759,
      758,  757,  755,  754,  753,  751,  750,  748,  747,  746,
      745,  741,  740,  739,  738,  737,  736,  735,  734,  733,
      732,  731,  729,  728,  726,  724,  723,  722,  721,  720,
      718,  716,  715,  714,  712,  711,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  692,  691,  690,  689,  688,  686,  685,  684,

      683,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      671,  670,  669,  668,  667,  666,  665,  663,  662,  661,
      660,  659,  658,  657,  656,  655,  654,  653,  652,  649,
      648,  647,  646,  644,  643,  642,  640,  639,  638,  637,
      636,  635,  634,  633,  631,  630,  628,  627,  626,  625,
      623,  622,  621,  620,  619,  617,  616,  615,  613,  610,
      609,  608,  606,  605,  603,  601,  598,  597,  596,  595,
      594,  593,  591,  590,  589,  588,  587,  586,  585,  584,
      582,  581,  579,  577,  576,  575,  574,  572,  571,  570,
      569,  568,  567,  566,  564,  563,  562,  560,  559,  558,

      557,  556,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  543,  542,  540,  539,  538,  537,  536,  535,
      534,  531,  530,  528,  527,  525,  524,  523,  522,  521,
      519,  517,  516,  515,  514,  513,  512,  510,  509,  508,
      507,  506,  504,  503,  502,  501,  491,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  478,  477,  475,
      473,  471,  469,  468,  466,  464,  460,  457,  442,  441,
      428,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  403,  398,  397,  396,  395,  394,  392,  391,  390,
      389,  388,  384,  381,  380,  378,  376,  375,  374,  372,

      369,  368,  367,  362,  361,  360,  357,  356,  351,  350,
      349,  348,  346,  343,  342,  341,  334,  333,  332,  331,
      329,  328,  327,  325,  323,  320,  318,  317,  316,  315,
      313,  310,  308,  307,  305,  303,  301,  298,  297,  296,
      294,  291,  290,  284,  281,  278,  277,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  260,  257,  256,  254,  252,  248,  247,  246,  242,
      241,  240,  239,  237,  236,  235,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  216,  215,  213,  212,  211,  210,  209,  208,  207,

      206,  205,  204,  192,  191,  190,  186,  178,  160,  159,
      158,  157,  155,  151,  146,  145,  144,  143,  142,  141,
      140,  139,  138,  137,  131,  116,  115,  108,  103,   99,
       98,   94,   92,   83,   77,   61,   59,   58,   51,   49,
       46,   45,   39,   26,   15,   11, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,

     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980,
     2980
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "input_lexer.ll"
/* -*- mode: C++; compile-command: "flex input_lexer.ll && g++ -g -I.. -c input_lexer.cc -Wall" -*- */
/** @file input_lexer.ll
 *
 *  Lexical analyzer definition for reading expressions.
 *  Note Maple input should be processed replacing # with // and { } for set
 *  This file must be processed with flex. */
/*
 *  Early version modified from GiNaC by B. Parisse (C) 2001, 7
 *  GiNaC Copyright (C) 1999-2000 Johannes Gutenberg University Mainz, Germany
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
/*
 * The lexer will first check for static patterns and strings (defined below)
 * If a match is not found, it calls find_or_make_symbol
 * This function looks first if the string should be translated
 * (e.g. add a prefix from the export table)
 * then look in lexer_functions for a match, then look in sym_tab
 * if not found in sym_tab, a new identificateur is created & added in sym_tab
 * Functions in lexer_functions are added during the construction
 * of the corresponding unary_functions using lexer_functions_register
 */
/*
 *  Definitions
 */
#line 45 "input_lexer.ll"
#include "first.h"
#include <iostream>
#include <stdexcept>

#include "input_lexer.h"
#include "help.h"
#include "gen.h"
#include "identificateur.h"
#include "usual.h"
#include "derive.h"
#include "series.h"
#include "intg.h"
#include "sym2poly.h"
#include "moyal.h"
#include "subst.h"
#include "vecteur.h"
#include "modpoly.h"
#include "lin.h"
#include "solve.h"
#include "ifactor.h"
#include "alg_ext.h"
#include "gauss.h"
#include "isom.h"
#include "plot.h"
#include "prog.h"
#include "rpn.h"
#include "ezgcd.h"
#include "tex.h"
#include "risch.h"
#include "input_parser.h"    


  using namespace std;
  using namespace giac;
#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC
    sym_tab & syms(){
      static sym_tab * ans=new sym_tab;
      return * ans;
    }

    sym_tab & lexer_functions(){
      static sym_tab * ans=new sym_tab;
      return * ans;
    }

    std::vector<int> lexer_localization_vector;
    std::map<std::string,std::string> & lexer_localization_map(){
      static std::map<std::string,std::string> * ans = new std::map<std::string,std::string>;
      return * ans;
    }
    std::multimap<std::string,giac::localized_string> back_lexer_localization_map;
    // lexer_localization_vector is the list of languages currently translated
    // lexer_localization_map translates keywords from the locale to giac 
    // back_lexer_localization_map lists for a giac keyword the translations

    std::map<std::string,std::vector<std::string> > & lexer_translator (){
      static std::map<std::string,std::vector<std::string> > * ans = new std::map<std::string,std::vector<std::string> >;
      return * ans;
    }
    // lexer_translator will be updated when export/with is called
    // To each string (w/o ::) in a given library, 
    // If it exists, we push_back the full string (with ::)
    // If not we create a vector with the full string
    // If a library is unexported we remove the corresponding entry in the 
    // vector and remove the entry if the vector is empty
    std::map<std::string,std::vector<std::string> > & library_functions (){
      static std::map<std::string,std::vector<std::string> > * ans=new std::map<std::string,std::vector<std::string> >;
      return *ans;
    }
    // First string is the library name, second is the vector of function names
    // User defined relations
    vector<user_function> & registered_lexer_functions(){
      static vector<user_function> * ans = new vector<user_function>;
      return * ans;
    }


#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC

/* Abbreviations */
/* If changed, modify isalphan in help.cc FIXME is . allowed inside alphanumeric */




/*
 *  Lexical rules
 */
#line 2360 "input_lexer.cc"

#define INITIAL 0
#define comment 1
#define comment_hash 2
#define str 3
#define backquote 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int giac_yylex_init (yyscan_t* scanner);

int giac_yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int giac_yylex_destroy (yyscan_t yyscanner );

int giac_yyget_debug (yyscan_t yyscanner );

void giac_yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE giac_yyget_extra (yyscan_t yyscanner );

void giac_yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *giac_yyget_in (yyscan_t yyscanner );

void giac_yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *giac_yyget_out (yyscan_t yyscanner );

void giac_yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int giac_yyget_leng (yyscan_t yyscanner );

char *giac_yyget_text (yyscan_t yyscanner );

int giac_yyget_lineno (yyscan_t yyscanner );

void giac_yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * giac_yyget_lval (yyscan_t yyscanner );

void giac_yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int giac_yywrap (yyscan_t yyscanner );
#else
extern int giac_yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int giac_yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int giac_yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 151 "input_lexer.ll"


#line 2600 "input_lexer.cc"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			giac_yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		giac_yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2981 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3547 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 153 "input_lexer.ll"
/* skip whitespace */
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 154 "input_lexer.ll"
increment_lexer_line_number(yyextra); //cerr << "Scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
/* Strings */
/* \"[^\"]*\"        yylval = string2gen( giac_yytext); return T_STRING; */
case 3:
YY_RULE_SETUP
#line 157 "input_lexer.ll"
BEGIN(str); comment_s("",yyextra);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 158 "input_lexer.ll"
increment_comment_s('"',yyextra);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 159 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
                  (*yylval)=string2gen(comment_s(yyextra),false); 
                  return T_STRING; }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 162 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number(yyextra);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 163 "input_lexer.ll"
{
                   /* octal escape sequence */
                   int result;
                   (void) sscanf( yytext + 1, "%o", &result );
                   increment_comment_s(char(result & 0xff),yyextra);
                   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 169 "input_lexer.ll"
{
                   /* generate error - bad escape sequence; something
                    * like '\48' or '\0777777'
                    */
                   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 174 "input_lexer.ll"
increment_comment_s('\n',yyextra);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 175 "input_lexer.ll"
increment_comment_s('\t',yyextra);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 176 "input_lexer.ll"
increment_comment_s('\r',yyextra);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 177 "input_lexer.ll"
increment_comment_s('\b',yyextra);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "input_lexer.ll"
increment_comment_s('\f',yyextra);
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 179 "input_lexer.ll"
increment_comment_s(yytext[1],yyextra);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 180 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 181 "input_lexer.ll"
if (rpn_mode){ index_status(yyextra)=0; return T_ACCENTGRAVE; } else { BEGIN(backquote); comment_s("",yyextra); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 182 "input_lexer.ll"
increment_comment_s('\n',yyextra); increment_lexer_line_number(yyextra);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 183 "input_lexer.ll"
increment_comment_s(yytext,yyextra);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 184 "input_lexer.ll"
{  index_status(yyextra)=1; BEGIN(INITIAL); 
     return find_or_make_symbol(comment_s(yyextra),(*yylval),yyextra); }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 187 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number(yyextra);
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 188 "input_lexer.ll"
index_status(yyextra)=0; increment_lexer_line_number(yyextra);/* (*yylval) = string2gen('"'+string(giac_yytext).substr(2,string(giac_yytext).size()-3)+'"');   return T_COMMENT; */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 189 "input_lexer.ll"
BEGIN(comment); comment_s(yyextra)="";
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 191 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat anything that's not a '*' */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 192 "input_lexer.ll"
comment_s(yyextra)+=yytext; /* eat up '*'s not followed by '/'s */
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 193 "input_lexer.ll"
comment_s(yyextra) += '\n'; increment_lexer_line_number(yyextra); cerr << "(Comment) scanning line " << lexer_line_number(yyextra) << endl;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 194 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; /* (*yylval) = string2gen(comment_s(yyextra),false); return T_COMMENT; */
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 195 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 196 "input_lexer.ll"
index_status(yyextra)=0; /* (*yylval) = string2gen('"'+string(yytext).substr(3,string(yytext).size()-6)+'"'); return T_COMMENT; */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 198 "input_lexer.ll"
if (index_status(yyextra)) return T_INTERROGATION; else return T_HELP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 199 "input_lexer.ll"
return T_UNIT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 200 "input_lexer.ll"
if (opened_quote(yyextra)) { opened_quote(yyextra)=0; return T_QUOTE; } if (index_status(yyextra) && !in_rpn(yyextra) && xcas_mode(yyextra)!= 1) return T_PRIME; opened_quote(yyextra)=1; return T_QUOTE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 201 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return TI_SEMI; (*yylval)=0; return T_SEMI;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 202 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) return T_SEMI; return TI_SEMI;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 203 "input_lexer.ll"
if (spread_formula(yyextra)) return T_DEUXPOINTS; if ( xcas_mode(yyextra)==3 ) { index_status(yyextra)=0; return TI_DEUXPOINTS; }  index_status(yyextra)=0; if (xcas_mode(yyextra)>0) { (*yylval)=1; return T_SEMI; } else return T_DEUXPOINTS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 204 "input_lexer.ll"
(*yylval)=1; return T_SEMI;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 205 "input_lexer.ll"
return T_DOUBLE_DEUX_POINTS;
	YY_BREAK
/* special values */
case 37:
YY_RULE_SETUP
#line 208 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra) > 0 ) { (*yylval)=i__IDNT_e; return T_SYMBOL; } else { (*yylval) = cst_i; return T_LITERAL;};
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 209 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 210 "input_lexer.ll"
index_status(yyextra)=1; if (xcas_mode(yyextra)==0 || xcas_mode(yyextra)==3 || rpn_mode) { (*yylval)=I__IDNT_e; return T_SYMBOL; } else { (*yylval) = cst_i; return T_LITERAL; };
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 211 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_i; return T_LITERAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 212 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = symbolic(at_exp,1); return T_LITERAL;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 213 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 214 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 215 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 216 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 217 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_pi; return T_LITERAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 218 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = cst_euler_gamma; return T_LITERAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 219 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 220 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 221 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = unsigned_inf; return T_LITERAL;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 222 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = plus_inf; return T_LITERAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 223 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = minus_inf; return T_LITERAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 224 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = undef; return T_LITERAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 225 "input_lexer.ll"
return T_END_INPUT;
	YY_BREAK
/* integer values */
case 55:
YY_RULE_SETUP
#line 228 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _INT_; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 229 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _ZINT; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 230 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _ZINT; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 231 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _POSINT; (*yylval).subtype=_INT_MAPLECONVERSION; return T_TYPE_ID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 232 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _NEGINT; (*yylval).subtype=_INT_MAPLECONVERSION; return T_TYPE_ID;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 233 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _NONPOSINT; (*yylval).subtype=_INT_MAPLECONVERSION; return T_TYPE_ID;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 234 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _NONNEGINT; (*yylval).subtype=_INT_MAPLECONVERSION; return T_TYPE_ID;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 235 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _CPLX; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 236 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _CPLX; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 237 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _DOUBLE_; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 238 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _DOUBLE_; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 239 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _VECT; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 240 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _VECT; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 241 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _IDNT; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 242 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _SYMB; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 243 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _SYMB; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 244 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _FRAC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 245 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _FRAC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 246 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _STRNG; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 247 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _FUNC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 248 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _REAL; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 249 "input_lexer.ll"
if (xcas_mode(yyextra)==2){ (*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP; }  index_status(yyextra)=0; (*yylval) = _FUNC; (*yylval).subtype=_INT_TYPE; return T_TYPE_ID;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 250 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _UNFACTORED; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 251 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _UNFACTORED; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 252 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _NEWTON_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 253 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DNEWTON_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 254 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _NEWTONJ_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 255 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _HYBRIDJ_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 256 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _HYBRIDSJ_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 257 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _HYBRID_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 258 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _HYBRIDS_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 259 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _SECANT_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 260 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _STEFFENSON_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 261 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BISECTION_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 262 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _FALSEPOS_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 263 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BRENT_SOLVER; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 264 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _GOLUB_REINSCH_DECOMP; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 265 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _GOLUB_REINSCH_MOD_DECOMP; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 266 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _JACOBI_DECOMP; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 267 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _MINOR_DET; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 268 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BAREISS; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 269 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RATIONAL_DET; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 270 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _FADEEV; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 271 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _KEEP_PIVOT; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 272 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _TRAPEZE; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 273 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _TRAPEZE; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 274 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_MILIEU; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 275 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_MILIEU; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 276 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RECTANGLE_DROIT; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 277 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RECTANGLE_DROIT; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 278 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RECTANGLE_GAUCHE; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 279 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RECTANGLE_GAUCHE; (*yylval).subtype=_INT_SOLVER;return T_NUMBER;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 280 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _FILL_POLYGON; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 281 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _FILL_POLYGON ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 282 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 283 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_2 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 284 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_3 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 285 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_4 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 286 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_5 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 287 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_6 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 288 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_7 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 289 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_8 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 290 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 291 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_2 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 292 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_3 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 293 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_4 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 294 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_5 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 295 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_6 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 296 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_7 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 297 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINE_WIDTH_8 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 298 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 299 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_2 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 300 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_3 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 301 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_4 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 302 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_5 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 303 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_6 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 304 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_7 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 305 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_8 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 306 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 307 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_2 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 308 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_3 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 309 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_4 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 310 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_5 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 311 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_6 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 312 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_7 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 313 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_WIDTH_8 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 314 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _HIDDEN_NAME ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 315 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _HIDDEN_NAME ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 316 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _QUADRANT1 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 317 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _QUADRANT2 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 318 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _QUADRANT3 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 319 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _QUADRANT4 ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 320 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_LOSANGE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 321 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_LOSANGE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 322 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_PLUS ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 323 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_PLUS ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 324 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_CARRE  ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 325 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_CARRE  ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 326 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0  ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 327 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0  ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 328 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_TRIANGLE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 329 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_TRIANGLE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 330 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_ETOILE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 331 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_ETOILE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 332 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_POINT ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 333 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_INVISIBLE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 334 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _POINT_INVISIBLE ; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 335 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BLACK; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 336 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _WHITE; /* was 49 */ (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 337 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BLACK; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 338 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RED; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 339 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _RED; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 340 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _GREEN; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 341 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _GREEN; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 342 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _YELLOW; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 343 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _YELLOW; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 344 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BLUE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 345 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _BLUE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 346 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _MAGENTA; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 347 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CYAN; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 348 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _WHITE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 349 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _WHITE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 350 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 351 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = 0; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 352 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DASH_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 353 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DASH_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 354 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DOT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 355 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DOT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 356 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DASHDOT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 357 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DASHDOT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 358 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DASHDOTDOT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 359 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _DASHDOTDOT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 360 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CAP_FLAT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 361 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CAP_FLAT_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 362 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CAP_ROUND_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 363 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CAP_ROUND_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 364 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CAP_SQUARE_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 365 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _CAP_SQUARE_LINE; (*yylval).subtype=_INT_COLOR ;return T_NUMBER;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 366 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_ADAPTIVE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 367 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_AXES ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 368 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_FRAMES ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 369 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_FRAMES ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 370 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _NSTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 371 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _TSTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 372 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _USTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 373 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _VSTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 374 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _XSTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 375 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _YSTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 376 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _ZSTEP ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 377 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_FONT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 378 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LABELS; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 379 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LINESTYLE; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 380 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_RESOLUTION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 381 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _SAMPLE; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 382 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _SCALING; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 383 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _STYLE; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 384 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = _SYMBOL; (*yylval).subtype=_INT_PLOT ;return T_TYPE_ID;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 385 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_SYMBOLSIZE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 386 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _THICKNESS; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 387 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _THICKNESS; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 388 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _TITLE; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 389 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _TITLE; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 390 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _TITLEFONT; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 391 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _VIEW; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 392 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_AXESFONT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 393 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _COORDS; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 394 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LABELFONT; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 395 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _LABELDIRECTIONS; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 396 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) = _NUMPOINTS; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 397 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_TICKMARKS ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 398 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_XTICKMARKS ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 399 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_TEXTURE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 400 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT0 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 401 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT1 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 402 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT2 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 403 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT3 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 404 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT4 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 405 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT5 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 406 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT6 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 407 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT7 ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 408 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_AMBIENT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 409 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SPECULAR ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 410 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_DIFFUSE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 411 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_POSITION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 412 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SPOT_DIRECTION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 413 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SPOT_EXPONENT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 414 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SPOT_CUTOFF ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 415 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_CONSTANT_ATTENUATION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 416 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LINEAR_ATTENUATION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 417 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_QUADRATIC_ATTENUATION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 418 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_OPTION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 419 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SMOOTH ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 420 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_FLAT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 421 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SHININESS ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 422 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_FRONT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 423 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_BACK ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 424 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_FRONT_AND_BACK ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 425 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_AMBIENT_AND_DIFFUSE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 426 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_EMISSION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 427 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT_MODEL_AMBIENT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 428 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT_MODEL_LOCAL_VIEWER ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 429 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT_MODEL_TWO_SIDE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 430 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT_MODEL_COLOR_CONTROL ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 431 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_BLEND ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 432 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SEPARATE_SPECULAR_COLOR ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 433 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SINGLE_COLOR ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 434 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SRC_ALPHA ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 435 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_ONE_MINUS_SRC_ALPHA ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 436 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_MATERIAL ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 437 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_COLOR_INDEXES ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 438 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_LIGHT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 439 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_PERSPECTIVE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 440 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_QUATERNION ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 441 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_ROTATION_AXIS ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 442 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_ORTHO ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 443 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_X ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 444 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Y ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 445 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Z ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 446 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_XTICK ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 447 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_YTICK ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 448 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_ZTICK ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 449 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_ANIMATE ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 450 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SHOWAXES ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 451 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_SHOWNAMES ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 452 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_X_AXIS_NAME ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 453 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Y_AXIS_NAME ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 454 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Z_AXIS_NAME ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 455 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_X_AXIS_UNIT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 456 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Y_AXIS_UNIT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 457 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Z_AXIS_UNIT ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 458 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_X_AXIS_COLOR ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 459 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Y_AXIS_COLOR ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 460 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_GL_Z_AXIS_COLOR ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER; 
	YY_BREAK
/* "gl_"       index_status(yyextra)=1; (*yylval) =_GL_ ; (*yylval).subtype=_INT_PLOT ;return T_NUMBER;  */
case 288:
YY_RULE_SETUP
#line 462 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) =_SET__VECT ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 463 "input_lexer.ll"
if (xcas_mode(yyextra)==3) { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyextra); } index_status(yyextra)=0; (*yylval) = _MAPLE_LIST ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 464 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) =_POLY1__VECT ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_TYPE_ID;
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 465 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_TRIG ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_NUMBER;
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 466 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_EXPLN ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_NUMBER;
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 467 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_PARFRAC ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_NUMBER;
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 468 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_BASE ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_NUMBER;
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 469 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_CONFRAC ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_NUMBER;
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 470 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_FULLPARFRAC ; (*yylval).subtype=_INT_MAPLECONVERSION ;return T_NUMBER;
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 471 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_DELETE_OPERATOR ; (*yylval).subtype=_INT_MUPADOPERATOR ;return T_NUMBER;
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 472 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_PREFIX_OPERATOR ; (*yylval).subtype=_INT_MUPADOPERATOR ;return T_NUMBER;
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 473 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_POSTFIX_OPERATOR ; (*yylval).subtype=_INT_MUPADOPERATOR ;return T_NUMBER;
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 474 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_BINARY_OPERATOR ; (*yylval).subtype=_INT_MUPADOPERATOR ;return T_NUMBER;
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 475 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_NARY_OPERATOR ; (*yylval).subtype=_INT_MUPADOPERATOR ;return T_NUMBER;
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 476 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_REVLEX_ORDER ; (*yylval).subtype=_INT_GROEBNER ;return T_NUMBER;
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 477 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_PLEX_ORDER ; (*yylval).subtype=_INT_GROEBNER ;return T_NUMBER;
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 478 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_TDEG_ORDER ; (*yylval).subtype=_INT_GROEBNER ;return T_NUMBER;
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 479 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_WITH_COCOA ; (*yylval).subtype=_INT_GROEBNER ;return T_NUMBER;
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 480 "input_lexer.ll"
index_status(yyextra)=1; (*yylval) =_WITH_F5 ; (*yylval).subtype=_INT_GROEBNER ;return T_NUMBER;
	YY_BREAK
/* vector/polynom/matrice delimiters */
case 307:
YY_RULE_SETUP
#line 484 "input_lexer.ll"
(*yylval) = _SEQ__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 485 "input_lexer.ll"
(*yylval) = _SET__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 486 "input_lexer.ll"
(*yylval) = _RPN_FUNC__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 487 "input_lexer.ll"
(*yylval) = _GROUP__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 488 "input_lexer.ll"
(*yylval) = _LINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 489 "input_lexer.ll"
(*yylval) = _VECTOR__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 490 "input_lexer.ll"
(*yylval) = _MATRIX__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 491 "input_lexer.ll"
(*yylval) = _PNT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 492 "input_lexer.ll"
(*yylval) = _POINT__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 493 "input_lexer.ll"
(*yylval) = _CURVE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 494 "input_lexer.ll"
(*yylval) = _HALFLINE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 495 "input_lexer.ll"
(*yylval) = _POLY1__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 496 "input_lexer.ll"
(*yylval) = _ASSUME__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 497 "input_lexer.ll"
(*yylval) = _SPREAD__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 498 "input_lexer.ll"
(*yylval) = _FOLDER__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 499 "input_lexer.ll"
(*yylval) = _POLYEDRE__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 500 "input_lexer.ll"
(*yylval) = _RGBA__VECT; return T_VECT_DISPATCH;
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 501 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2);  return T_TEST_EQUAL;
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 502 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_TEST_EQUAL;
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 503 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 504 "input_lexer.ll"
index_status(yyextra)=0; return T_VIRGULE;
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 505 "input_lexer.ll"
index_status(yyextra)=0; return T_BEGIN_PAR;
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 506 "input_lexer.ll"
index_status(yyextra)=1; return T_END_PAR;
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 507 "input_lexer.ll"
if (index_status(yyextra)) { index_status(yyextra)=0; return T_INDEX_BEGIN; } else { (*yylval) = 0; return T_VECT_DISPATCH; } ;
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 508 "input_lexer.ll"
index_status(yyextra)=1; return T_VECT_END;
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 509 "input_lexer.ll"
index_status(yyextra)=0; return T_POLY1_BEGIN;
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 510 "input_lexer.ll"
index_status(yyextra)=1; return T_POLY1_END;
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 511 "input_lexer.ll"
index_status(yyextra)=0; return T_MATRICE_BEGIN;
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 512 "input_lexer.ll"
index_status(yyextra)=1; return T_MATRICE_END;
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 513 "input_lexer.ll"
index_status(yyextra)=0; return T_ASSUME_BEGIN;
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 514 "input_lexer.ll"
index_status(yyextra)=1; return T_ASSUME_END;
	YY_BREAK
/* geometric delimiters */
case 338:
YY_RULE_SETUP
#line 516 "input_lexer.ll"
index_status(yyextra)=0; return T_GROUPE_BEGIN;
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 517 "input_lexer.ll"
index_status(yyextra)=1; return T_GROUPE_END;
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 518 "input_lexer.ll"
index_status(yyextra)=0; return T_LINE_BEGIN;
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 519 "input_lexer.ll"
index_status(yyextra)=1; return T_LINE_END;
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 520 "input_lexer.ll"
index_status(yyextra)=0; return T_VECTOR_BEGIN;
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 521 "input_lexer.ll"
index_status(yyextra)=1; return T_VECTOR_END;
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 522 "input_lexer.ll"
index_status(yyextra)=0; return T_CURVE_BEGIN;
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 523 "input_lexer.ll"
index_status(yyextra)=1; return T_CURVE_END;
	YY_BREAK
/* gen delimiters */
case 346:
YY_RULE_SETUP
#line 525 "input_lexer.ll"
index_status(yyextra)=0; if (rpn_mode) { (*yylval)=0; return T_VECT_DISPATCH; } if (xcas_mode(yyextra)==3) return T_VECT_BEGIN; if (xcas_mode(yyextra) > 0 ) return T_SET_BEGIN; else return T_BLOC_BEGIN;
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 526 "input_lexer.ll"
index_status(yyextra)=1; if (rpn_mode) return T_VECT_END; if (xcas_mode(yyextra)==3) return T_VECT_END; if (xcas_mode(yyextra) > 0) return T_SET_END; else return T_BLOC_END;
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 527 "input_lexer.ll"
index_status(yyextra)=0; return T_SET_BEGIN;
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 528 "input_lexer.ll"
index_status(yyextra)=1; return T_SET_END;
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 529 "input_lexer.ll"
index_status(yyextra)=0; return T_ROOTOF_BEGIN;
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 530 "input_lexer.ll"
index_status(yyextra)=1; return T_ROOTOF_END;
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 531 "input_lexer.ll"
index_status(yyextra)=0; return T_SPOLY1_BEGIN;
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 532 "input_lexer.ll"
index_status(yyextra)=1; return T_SPOLY1_END;
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 533 "input_lexer.ll"
index_status(yyextra)=0; ++in_rpn(yyextra); return T_RPN_BEGIN;
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 534 "input_lexer.ll"
index_status(yyextra)=0; --in_rpn(yyextra); return T_RPN_END;
	YY_BREAK
/* Maple libraries names */
case 356:
YY_RULE_SETUP
#line 537 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=_LINALG; (*yylval).subtype=_INT_MAPLELIB; return T_MAPLELIB;
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 538 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=_NUMTHEORY; (*yylval).subtype=_INT_MAPLELIB; return T_MAPLELIB;
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 539 "input_lexer.ll"
index_status(yyextra)=1; (*yylval)=_GROEBNER; (*yylval).subtype=_INT_MAPLELIB; return T_MAPLELIB;
	YY_BREAK
/* binary operators */
case 359:
YY_RULE_SETUP
#line 542 "input_lexer.ll"
index_status(yyextra)=0; return T_MAPSTO;
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 543 "input_lexer.ll"
(*yylval) = gen(at_couleur,2); index_status(yyextra)=0; return T_INTERVAL;
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 544 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_TEST_EQUAL;
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 545 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 546 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_same,2); return T_QUOTED_BINARY;
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 547 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 548 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 549 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_TEST_EQUAL;
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 550 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 551 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_different,2); return T_QUOTED_BINARY;
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 552 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 553 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 554 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 555 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 556 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_inferieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 557 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_strict,2); return T_QUOTED_BINARY;
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 558 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_TEST_EQUAL;
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 559 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_superieur_egal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 560 "input_lexer.ll"
spread_formula(yyextra)=!index_status(yyextra); index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_EQUAL;
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 561 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_equal,2); return T_QUOTED_BINARY;
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 562 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); if (xcas_mode(yyextra)>0) return T_DOLLAR_MAPLE; else return T_DOLLAR;
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 563 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_DOLLAR_MAPLE;
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 564 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 565 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_dollar,2); return T_QUOTED_BINARY;
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 566 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_AFFECT;
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 567 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 568 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return T_QUOTED_BINARY;
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 569 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_sto,2); return TI_STO;
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 570 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_array_sto,2); return T_AFFECT;
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 571 "input_lexer.ll"
index_status(yyextra)=1; yytext[0]='0'; (*yylval) = symb_double_deux_points(makevecteur(_IDNT_break,chartab2gen(yytext,yyextra))); return T_SYMBOL;
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 572 "input_lexer.ll"
if (xcas_mode(yyextra)!=3) {index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_COMPOSE; } BEGIN(comment_hash);
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 573 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_POW;
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 574 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 575 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_composepow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 576 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 577 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_compose,2); return T_QUOTED_BINARY;
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 578 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 579 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 580 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_AND_OP;
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 581 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 582 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 583 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_and,2); return T_QUOTED_BINARY;
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 584 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_tilocal,2); return T_PIPE;
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 585 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 586 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 587 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 588 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 589 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_QUOTED_BINARY;
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 590 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ou,2); return T_AND_OP;
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 591 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 592 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 593 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_QUOTED_BINARY;
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 594 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_xor,2); return T_AND_OP;
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 595 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_INTERVAL;
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 596 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 597 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_interval,2); return T_QUOTED_BINARY;
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 598 "input_lexer.ll"
if (xcas_mode(yyextra) || index_status(yyextra)) { (*yylval)=gen(at_factorial); return T_FACTORIAL; } else { index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_NOT; }
	YY_BREAK
/* standard functions */
case 416:
YY_RULE_SETUP
#line 601 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 602 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_FACTORIAL;
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 603 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_increment,1); return T_PLUS;
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 604 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_FACTORIAL;
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 605 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_decrement,1); return T_PLUS;
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 606 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 607 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_PLUS;
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 608 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=2; return T_SQ;
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 609 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=3; return T_SQ;
	YY_BREAK
/* "','"                   index_status(yyextra)=0; (*yylval)=gen(at_makevector,2); return T_QUOTED_BINARY; commented because of f('a','b') */
case 425:
YY_RULE_SETUP
#line 611 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 612 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_plus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 613 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_MOINS;
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 614 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_MOINS;
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 615 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 616 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_binary_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 617 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_FOIS;
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 618 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_multcrement,1); return T_FOIS;
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 619 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_FOIS;
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 620 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ampersand_times,2); return T_FOIS;
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 621 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_quote_pow,2); return T_POW;
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 622 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointprod,2); return T_FOIS;
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 623 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 624 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_prod,2); return T_QUOTED_BINARY;
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 625 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_DIV;
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 626 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_divcrement,1); return T_DIV;
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 627 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointdivision,2); return T_DIV;
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 628 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 629 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_division,2); return T_QUOTED_BINARY;
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 630 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_pourcent); return T_FACTORIAL; } if (xcas_mode(yyextra)==1) { (*yylval)=symbolic(at_ans,vecteur(0)); return T_NUMBER; }  if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD;
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 631 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 632 "input_lexer.ll"
index_status(yyextra)=0; if (xcas_mode(yyextra)==3) { (*yylval)=gen(at_irem,2); return T_UNARY_OP; } else { if (xcas_mode(yyextra)) (*yylval)=gen(at_irem,2); else (*yylval)=0; return T_MOD; }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 633 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 634 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_irem,2); return T_QUOTED_BINARY;
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 635 "input_lexer.ll"
index_status(yyextra)=0; return T_MOD;
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 636 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 637 "input_lexer.ll"
(*yylval) = gen(at_pow,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 638 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_POW;
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 639 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pointpow,2); return T_POW;
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 640 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 641 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_pow,2); return T_QUOTED_BINARY;
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 642 "input_lexer.ll"
(*yylval) = gen(at_SWAP,0); index_status(yyextra)=0; return T_RPN_OP;
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 643 "input_lexer.ll"
(*yylval) = gen(at_DROP,0); index_status(yyextra)=0; return T_RPN_OP;
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 644 "input_lexer.ll"
(*yylval) = gen(at_DUP,0); index_status(yyextra)=0; return T_RPN_OP;
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 645 "input_lexer.ll"
(*yylval) = gen(at_ROLL,0); index_status(yyextra)=0; return T_RPN_OP;
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 646 "input_lexer.ll"
(*yylval) = gen(at_ROLLD,0); index_status(yyextra)=0; return T_RPN_OP;
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 647 "input_lexer.ll"
(*yylval) = gen(at_PICK,0); index_status(yyextra)=0; return T_RPN_OP;
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 648 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 649 "input_lexer.ll"
(*yylval) = gen(at_Digits,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 650 "input_lexer.ll"
(*yylval) = gen(at_acos,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 651 "input_lexer.ll"
(*yylval) = gen(at_randNorm,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 652 "input_lexer.ll"
(*yylval) = gen(at_acosh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 653 "input_lexer.ll"
(*yylval) = gen(at_alg,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 654 "input_lexer.ll"
(*yylval) = gen(at_angle_radian,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 655 "input_lexer.ll"
(*yylval) = gen(at_approx_mode,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 656 "input_lexer.ll"
index_status(yyextra)=1; return T_ARGS;
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 657 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_args,0); return T_QUOTED_BINARY;
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 658 "input_lexer.ll"
(*yylval) = gen(at_assume,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 659 "input_lexer.ll"
(*yylval) = gen(at_asin,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 660 "input_lexer.ll"
(*yylval) = gen(at_asinh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 661 "input_lexer.ll"
(*yylval) = gen(at_at,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 662 "input_lexer.ll"
(*yylval) = gen(at_atan,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 663 "input_lexer.ll"
(*yylval) = gen(at_atanh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 664 "input_lexer.ll"
(*yylval) = gen(at_backquote,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 665 "input_lexer.ll"
(*yylval) = gen(at_bloc,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 666 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_BEGIN;
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 667 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_BEGIN;
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 668 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_break,0); return T_BREAK;
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 669 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_break,0); return T_BREAK;
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 670 "input_lexer.ll"
index_status(yyextra)=0; return T_BY;
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 671 "input_lexer.ll"
index_status(yyextra)=0; return T_CASE;
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 672 "input_lexer.ll"
index_status(yyextra)=0; return T_CASE;
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 673 "input_lexer.ll"
index_status(yyextra)=0; return T_CATCH;
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 674 "input_lexer.ll"
index_status(yyextra)=0; return T_CONTINUE;
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 675 "input_lexer.ll"
(*yylval) = gen(at_click,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 676 "input_lexer.ll"
(*yylval) = gen(at_comment,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 677 "input_lexer.ll"
(*yylval) = gen(at_all_trig_solutions,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 678 "input_lexer.ll"
(*yylval) = gen(at_ntl_on,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 679 "input_lexer.ll"
(*yylval) = gen(at_complex_mode,1); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 680 "input_lexer.ll"
(*yylval) = gen(at_complex_variables,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 681 "input_lexer.ll"
(*yylval) = gen(at_cont,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 682 "input_lexer.ll"
(*yylval) = gen(at_debug,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 683 "input_lexer.ll"
index_status(yyextra)=1; return T_DEFAULT;
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 684 "input_lexer.ll"
(*yylval) = gen(at_derive,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 685 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO;
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 686 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_DO;
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 687 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval) = gen(at_function_diff,1); index_status(yyextra)=1; return T_UNARY_OP;} else { index_status(yyextra)=1; return find_or_make_symbol(yytext,(*yylval),yyextra); }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 688 "input_lexer.ll"
if (xcas_mode(yyextra)==1 || xcas_mode(yyextra)==2) { (*yylval)=e__IDNT_e; }else (*yylval)=symbolic(at_exp,1); return T_NUMBER;
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 689 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_ELSE;
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 690 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_ELSE;
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 691 "input_lexer.ll"
index_status(yyextra)=0; return T_ELIF;
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 692 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 693 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 694 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 695 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 696 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 697 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 698 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 699 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 700 "input_lexer.ll"
index_status(yyextra)=0; return T_ENDCASE;
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 701 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 702 "input_lexer.ll"
(*yylval) = gen(at_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 703 "input_lexer.ll"
(*yylval) = gen(at_proba_epsilon,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 704 "input_lexer.ll"
(*yylval) = gen(at_equal,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 705 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 706 "input_lexer.ll"
(*yylval) = gen(at_erase,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 707 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 708 "input_lexer.ll"
index_status(yyextra)=0; return T_ENDCASE;
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 709 "input_lexer.ll"
if (xcas_mode(yyextra)==3) (*yylval)=gen(at_partfrac); else (*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 710 "input_lexer.ll"
(*yylval) = gen(at_insmod,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 711 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = zero; (*yylval).subtype=_INT_BOOLEAN; return T_NUMBER;
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 712 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = zero; (*yylval).subtype=_INT_BOOLEAN; return T_NUMBER;
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 713 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = zero; (*yylval).subtype=_INT_BOOLEAN; return T_NUMBER;
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 714 "input_lexer.ll"
(*yylval) = gen(at_expand,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 715 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 716 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_FOR;
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 717 "input_lexer.ll"
index_status(yyextra)=0; return T_FROM;
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 718 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 719 "input_lexer.ll"
(*yylval)=1; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 720 "input_lexer.ll"
(*yylval) = gen(at_halt,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 721 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 722 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_RPN_IF;
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 723 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IFTE;
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 724 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IFTE;
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 725 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 726 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 727 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_QUOTED_BINARY;
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 728 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_ifactors); else (*yylval) = gen(at_ifactors,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 729 "input_lexer.ll"
index_status(yyextra)=0; return T_IN;
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 730 "input_lexer.ll"
(*yylval) = gen(at_integrate,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 731 "input_lexer.ll"
(*yylval) = gen(at_inter,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 732 "input_lexer.ll"
index_status(yyextra)=0; return T_INTERSECT;
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 733 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 734 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_intersect,2); return T_QUOTED_BINARY;
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 735 "input_lexer.ll"
(*yylval) = gen(at_isom,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 736 "input_lexer.ll"
(*yylval) = gen(at_kill,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 737 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 738 "input_lexer.ll"
index_status(yyextra)=0; return T_LOCALBLOC;
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 739 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 740 "input_lexer.ll"
(*yylval) = gen(at_ln,1); index_status(yyextra)=1; return T_UNARY_OP; /* index_status(yyextra)=1 to accept log[] for a basis log */
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 741 "input_lexer.ll"
(*yylval) = gen(at_mkisom,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 742 "input_lexer.ll"
index_status(yyextra)=0; return T_MINUS;
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 743 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 744 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_minus,2); return T_QUOTED_BINARY;
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 745 "input_lexer.ll"
index_status(yyextra)=0; return T_CONTINUE;
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 746 "input_lexer.ll"
index_status(yyextra)=0; return T_CONTINUE;
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 747 "input_lexer.ll"
(*yylval) = gen(at_not,1); if (xcas_mode(yyextra)) return T_NOT;  index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 748 "input_lexer.ll"
(*yylval) = gen(at_neg,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 749 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 750 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_not,1); return T_QUOTED_BINARY;
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 751 "input_lexer.ll"
index_status(yyextra)=1; return T_NULL;
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 752 "input_lexer.ll"
(*yylval) = gen(at_greduce,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 753 "input_lexer.ll"
index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 754 "input_lexer.ll"
index_status(yyextra)=0; return T_OF;
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 755 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_of,2); return T_QUOTED_BINARY;
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 756 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_op,1); else (*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 757 "input_lexer.ll"
(*yylval) = gen(at_feuille,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 758 "input_lexer.ll"
(*yylval)=2; index_status(yyextra)=0; return T_LOCAL;
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 759 "input_lexer.ll"
index_status(yyextra)=0; return T_DEFAULT;
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 760 "input_lexer.ll"
(*yylval) = gen(at_pcoeff,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 761 "input_lexer.ll"
(*yylval) = gen(at_funcplot,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 762 "input_lexer.ll"
(*yylval) = gen(at_user_operator,6); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 763 "input_lexer.ll"
(*yylval) = _droite(makevecteur(zero,plus_one),0); return T_EXPRESSION;
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 764 "input_lexer.ll"
(*yylval) = _droite(makevecteur(zero,cst_i),0); return T_EXPRESSION;
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 765 "input_lexer.ll"
index_status(yyextra)=0; return T_PROGRAM;
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 766 "input_lexer.ll"
index_status(yyextra)=0; return T_PROC;
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 767 "input_lexer.ll"
if (rpn_mode) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 768 "input_lexer.ll"
if (rpn_mode) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 769 "input_lexer.ll"
if (rpn_mode) {(*yylval)=gen(at_purge,0); index_status(yyextra)=0; return T_RPN_OP;} else {(*yylval) = gen(at_purge,1); index_status(yyextra)=0; return T_UNARY_OP;};
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 770 "input_lexer.ll"
(*yylval) = gen(at_srand,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 771 "input_lexer.ll"
(*yylval) = gen(at_RCL,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 772 "input_lexer.ll"
(*yylval) = gen(at_RCL,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 773 "input_lexer.ll"
(*yylval) = gen(at_read,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 774 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 775 "input_lexer.ll"
(*yylval) = gen(at_for,1) ; index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 776 "input_lexer.ll"
(*yylval) = gen(at_for,1) ;index_status(yyextra)=0; return T_REPEAT;
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 777 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 778 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 779 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 780 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_QUOTED_BINARY;
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 781 "input_lexer.ll"
(*yylval) = gen(at_risch,4); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 782 "input_lexer.ll"
(*yylval) = gen(at_maple_root,1); index_status(yyextra)=1; return T_UNARY_OP;
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 783 "input_lexer.ll"
(*yylval) = gen(at_rpn,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 784 "input_lexer.ll"
(*yylval) = gen(at_same,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 785 "input_lexer.ll"
(*yylval) = gen(at_signal,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 786 "input_lexer.ll"
(*yylval) = gen(at_sst,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 787 "input_lexer.ll"
(*yylval) = gen(at_sst_in,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 788 "input_lexer.ll"
(*yylval) = gen(at_srand,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 603:
YY_RULE_SETUP
#line 789 "input_lexer.ll"
index_status(yyextra)=0; return T_START;
	YY_BREAK
case 604:
YY_RULE_SETUP
#line 790 "input_lexer.ll"
index_status(yyextra)=0; return T_STACK;
	YY_BREAK
case 605:
YY_RULE_SETUP
#line 791 "input_lexer.ll"
index_status(yyextra)=0; return T_BY;
	YY_BREAK
case 606:
YY_RULE_SETUP
#line 792 "input_lexer.ll"
index_status(yyextra)=0; return T_BY;
	YY_BREAK
case 607:
YY_RULE_SETUP
#line 793 "input_lexer.ll"
(*yylval) = gen(at_sto,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 608:
YY_RULE_SETUP
#line 794 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subs,2); else (*yylval) = gen(at_subs,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 609:
YY_RULE_SETUP
#line 795 "input_lexer.ll"
if (xcas_mode(yyextra)==1) (*yylval) = gen(at_maple_subsop,2); else (*yylval) = gen(at_subsop,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 610:
YY_RULE_SETUP
#line 796 "input_lexer.ll"
index_status(yyextra)=0; return T_SWITCH;
	YY_BREAK
case 611:
YY_RULE_SETUP
#line 797 "input_lexer.ll"
index_status(yyextra)=0; return T_SWITCH;
	YY_BREAK
case 612:
YY_RULE_SETUP
#line 798 "input_lexer.ll"
(*yylval) = gen(at_tanh,1); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 613:
YY_RULE_SETUP
#line 799 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_THEN;
	YY_BREAK
case 614:
YY_RULE_SETUP
#line 800 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_THEN;
	YY_BREAK
case 615:
YY_RULE_SETUP
#line 801 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_throw,1); return T_RETURN;
	YY_BREAK
case 616:
YY_RULE_SETUP
#line 802 "input_lexer.ll"
(*yylval)=1; return T_TO;
	YY_BREAK
case 617:
YY_RULE_SETUP
#line 803 "input_lexer.ll"
(*yylval)=1; return T_TO;
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 804 "input_lexer.ll"
(*yylval)=-1; return T_TO;
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 805 "input_lexer.ll"
(*yylval)=-1; return T_TO;
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 806 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = plus_one; (*yylval).subtype=_INT_BOOLEAN; return T_NUMBER;
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 807 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = plus_one; (*yylval).subtype=_INT_BOOLEAN; return T_NUMBER;
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 808 "input_lexer.ll"
index_status(yyextra)=0; (*yylval) = plus_one; (*yylval).subtype=_INT_BOOLEAN; return T_NUMBER;
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 809 "input_lexer.ll"
index_status(yyextra)=0; return T_TRY;
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 810 "input_lexer.ll"
index_status(yyextra)=0; return T_TRY_CATCH;
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 811 "input_lexer.ll"
index_status(yyextra)=0; return T_UNION;
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 812 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 813 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_union,2); return T_QUOTED_BINARY;
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 814 "input_lexer.ll"
index_status(yyextra)=0; return T_UNTIL;
	YY_BREAK
case 629:
YY_RULE_SETUP
#line 815 "input_lexer.ll"
index_status(yyextra)=0; return T_UNTIL;
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 816 "input_lexer.ll"
index_status(yyextra)=0; return T_UNTIL;
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 817 "input_lexer.ll"
index_status(yyextra)=0; return T_UNTIL;
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 818 "input_lexer.ll"
(*yylval) = gen(at_virgule,2); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 819 "input_lexer.ll"
(*yylval) = gen(at_VARS,0); index_status(yyextra)=0; return T_UNARY_OP;
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 820 "input_lexer.ll"
(*yylval) = gen(at_scientific_format,0); index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 821 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); if (xcas_mode(yyextra)==3) return TI_WHILE; if (xcas_mode(yyextra)!=0) return T_MUPMAP_WHILE; return T_WHILE;
	YY_BREAK
case 636:
YY_RULE_SETUP
#line 822 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,4); return T_RPN_WHILE;
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 823 "input_lexer.ll"
(*yylval) = gen(at_Text,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 824 "input_lexer.ll"
(*yylval) = gen(at_DropDown,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 825 "input_lexer.ll"
(*yylval) = gen(at_Popup,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 826 "input_lexer.ll"
(*yylval) = gen(at_Request,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 641:
YY_RULE_SETUP
#line 827 "input_lexer.ll"
(*yylval) = gen(at_Title,1); index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 828 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_DEFINE;
	YY_BREAK
case 643:
YY_RULE_SETUP
#line 829 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 644:
YY_RULE_SETUP
#line 830 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 645:
YY_RULE_SETUP
#line 831 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 646:
YY_RULE_SETUP
#line 832 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 647:
YY_RULE_SETUP
#line 833 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 648:
YY_RULE_SETUP
#line 834 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 649:
YY_RULE_SETUP
#line 835 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 650:
YY_RULE_SETUP
#line 836 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_PRGM;
	YY_BREAK
case 651:
YY_RULE_SETUP
#line 837 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 652:
YY_RULE_SETUP
#line 838 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 653:
YY_RULE_SETUP
#line 839 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 654:
YY_RULE_SETUP
#line 840 "input_lexer.ll"
(*yylval)=0; index_status(yyextra)=0; return TI_LOCAL;
	YY_BREAK
case 655:
YY_RULE_SETUP
#line 841 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_IF;
	YY_BREAK
case 656:
YY_RULE_SETUP
#line 842 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_THEN;
	YY_BREAK
case 657:
YY_RULE_SETUP
#line 843 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_ELSE;
	YY_BREAK
case 658:
YY_RULE_SETUP
#line 844 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 659:
YY_RULE_SETUP
#line 845 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_ifte,3); return T_BLOC_END;
	YY_BREAK
case 660:
YY_RULE_SETUP
#line 846 "input_lexer.ll"
(*yylval) = gen(at_return,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 661:
YY_RULE_SETUP
#line 847 "input_lexer.ll"
(*yylval) = gen(at_ifte,3) ;  index_status(yyextra)=0; return T_ELIF;
	YY_BREAK
case 662:
YY_RULE_SETUP
#line 848 "input_lexer.ll"
(*yylval) = gen(at_ifte,3) ;  index_status(yyextra)=0; return T_ELIF;
	YY_BREAK
case 663:
YY_RULE_SETUP
#line 849 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_breakpoint,0); return T_BREAK;
	YY_BREAK
case 664:
YY_RULE_SETUP
#line 850 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_LOOP;
	YY_BREAK
case 665:
YY_RULE_SETUP
#line 851 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 666:
YY_RULE_SETUP
#line 852 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 667:
YY_RULE_SETUP
#line 853 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_FOR;
	YY_BREAK
case 668:
YY_RULE_SETUP
#line 854 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 669:
YY_RULE_SETUP
#line 855 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 670:
YY_RULE_SETUP
#line 856 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_WHILE;
	YY_BREAK
case 671:
YY_RULE_SETUP
#line 857 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 672:
YY_RULE_SETUP
#line 858 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 673:
YY_RULE_SETUP
#line 859 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_CONTINUE;
	YY_BREAK
case 674:
YY_RULE_SETUP
#line 860 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return TI_TRY;
	YY_BREAK
case 675:
YY_RULE_SETUP
#line 861 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 676:
YY_RULE_SETUP
#line 862 "input_lexer.ll"
index_status(yyextra)=0; (*yylval)=gen(at_for,0); return T_BLOC_END;
	YY_BREAK
case 677:
YY_RULE_SETUP
#line 863 "input_lexer.ll"
(*yylval) = gen(at_print,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 678:
YY_RULE_SETUP
#line 864 "input_lexer.ll"
(*yylval) = gen(at_Pause,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 679:
YY_RULE_SETUP
#line 865 "input_lexer.ll"
(*yylval) = gen(at_DelVar,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 680:
YY_RULE_SETUP
#line 866 "input_lexer.ll"
(*yylval) = gen(at_label,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 681:
YY_RULE_SETUP
#line 867 "input_lexer.ll"
(*yylval) = gen(at_label,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 682:
YY_RULE_SETUP
#line 868 "input_lexer.ll"
(*yylval) = gen(at_goto,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 683:
YY_RULE_SETUP
#line 869 "input_lexer.ll"
(*yylval) = gen(at_goto,1) ; index_status(yyextra)=0; return T_RETURN;
	YY_BREAK
case 684:
YY_RULE_SETUP
#line 870 "input_lexer.ll"
(*yylval) = gen(at_Dialog,1) ; index_status(yyextra)=0; return TI_DIALOG; 
	YY_BREAK
case 685:
YY_RULE_SETUP
#line 871 "input_lexer.ll"
(*yylval) = gen(at_Dialog,1) ; index_status(yyextra)=0; return T_BLOC_END;
	YY_BREAK
case 686:
YY_RULE_SETUP
#line 872 "input_lexer.ll"
(*yylval) = gen(at_Row,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 687:
YY_RULE_SETUP
#line 873 "input_lexer.ll"
(*yylval) = gen(at_Col,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 688:
YY_RULE_SETUP
#line 874 "input_lexer.ll"
(*yylval) = gen(at_threads,0) ; index_status(yyextra)=0; return T_DIGITS;
	YY_BREAK
case 689:
YY_RULE_SETUP
#line 875 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.05457266e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
	YY_BREAK
case 690:
YY_RULE_SETUP
#line 876 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(299792458,_m_unit/_s_unit)); index_status(yyextra)=0; return T_SYMBOL;
	YY_BREAK
case 691:
YY_RULE_SETUP
#line 877 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(9.80665,_m_unit*unitpow(_s_unit,2))); index_status(yyextra)=0; return T_SYMBOL;
	YY_BREAK
case 692:
YY_RULE_SETUP
#line 878 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1e-12,_W_unit*unitpow(_m_unit,-2))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 693:
YY_RULE_SETUP
#line 879 "input_lexer.ll"
(*yylval) = 3.9; index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 694:
YY_RULE_SETUP
#line 880 "input_lexer.ll"
(*yylval) = 11.9; index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 695:
YY_RULE_SETUP
#line 881 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.4185979e-30,_F_unit*_C_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 696:
YY_RULE_SETUP
#line 882 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(55263469.6,_F_unit/(_m_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 697:
YY_RULE_SETUP
#line 883 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(8.617386e-5,_J_unit/(_K_unit*_C_unit))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 698:
YY_RULE_SETUP
#line 884 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(.002897756,_m_unit*_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 699:
YY_RULE_SETUP
#line 885 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur( 0.00242631058e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 700:
YY_RULE_SETUP
#line 886 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(2.4179883e14,_Hz_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 701:
YY_RULE_SETUP
#line 887 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1239.8425e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 702:
YY_RULE_SETUP
#line 888 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(5.0507866e-27,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 703:
YY_RULE_SETUP
#line 889 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur( 9.2740154e-24,_J_unit/_T_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 704:
YY_RULE_SETUP
#line 890 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(.0529177249e-9,_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 705:
YY_RULE_SETUP
#line 891 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(10973731.534,unitpow(_m_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 706:
YY_RULE_SETUP
#line 892 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(96485.309,_C_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 707:
YY_RULE_SETUP
#line 893 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(2.06783461e-15,_Wb_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 708:
YY_RULE_SETUP
#line 894 "input_lexer.ll"
(*yylval) = 7.29735308e-3; index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 709:
YY_RULE_SETUP
#line 895 "input_lexer.ll"
(*yylval) = 1836.152701; index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 710:
YY_RULE_SETUP
#line 896 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.6726231e-27,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 711:
YY_RULE_SETUP
#line 897 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.75881962e11,_C_unit/_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 712:
YY_RULE_SETUP
#line 898 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(9.1093897e-31,_kg_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 713:
YY_RULE_SETUP
#line 899 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.60217733e-19,_C_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 714:
YY_RULE_SETUP
#line 900 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(6.6260755e-34,_J_unit*_s_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 715:
YY_RULE_SETUP
#line 901 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(6.67259e-11,unitpow(_m_unit,3)*unitpow(_s_unit,-2)*unitpow(_kg_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 716:
YY_RULE_SETUP
#line 902 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.25663706144e-6,_H_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 717:
YY_RULE_SETUP
#line 903 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(8.85418781761e-12,_F_unit/_m_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 718:
YY_RULE_SETUP
#line 904 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur( 5.67051e-8,_W_unit*unitpow(_m_unit,-2)*unitpow(_K_unit,-4))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 719:
YY_RULE_SETUP
#line 905 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(101325.0,_Pa_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 720:
YY_RULE_SETUP
#line 906 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(273.15,_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 721:
YY_RULE_SETUP
#line 907 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(8.31451,_J_unit/_molK_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 722:
YY_RULE_SETUP
#line 908 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(22.4141,_l_unit/_mol_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 723:
YY_RULE_SETUP
#line 909 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1.380658e-23,_J_unit/_K_unit)); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 724:
YY_RULE_SETUP
#line 910 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(6.0221367e23,unitpow(_mol_unit,-1))); index_status(yyextra)=0; return T_SYMBOL; 
	YY_BREAK
case 725:
YY_RULE_SETUP
#line 911 "input_lexer.ll"
(*yylval) = symbolic(at_unit,makevecteur(1,_in_unit)); index_status(yyextra)=0; return T_SYMBOL;
	YY_BREAK
/* numbers */
case 726:
#line 915 "input_lexer.ll"
case 727:
#line 916 "input_lexer.ll"
case 728:
#line 917 "input_lexer.ll"
case 729:
#line 918 "input_lexer.ll"
case 730:
#line 919 "input_lexer.ll"
case 731:
#line 920 "input_lexer.ll"
case 732:
#line 921 "input_lexer.ll"
case 733:
#line 922 "input_lexer.ll"
case 734:
#line 923 "input_lexer.ll"
case 735:
#line 924 "input_lexer.ll"
case 736:
#line 925 "input_lexer.ll"
case 737:
#line 926 "input_lexer.ll"
case 738:
YY_RULE_SETUP
#line 926 "input_lexer.ll"
{ 
  index_status(yyextra)=1;
  int l=strlen(yytext);
  char ch,ch2;
  if (l>2 && yytext[1]!='x' && (yytext[l-1]=='o' || yytext[l-1]=='b' || yytext[l-1]=='h') ){
    char base=yytext[l-1];
    for (int i=l-1;i>1;--i){
      yytext[i]=yytext[i-1];
    }
    if (base=='h')
      base='x';
    yytext[1]=base;
  }
  else {
    for (l=0;(ch=*(yytext+l));++l){
      if (ch=='x')
	break;
      if (ch=='e' || ch=='E'){
	if ( (ch2=*(yytext+l+1)) && (ch2=='e' || ch2=='E')){
	  ++l;
	  for (;(ch=*(yytext+l));++l)
	    *(yytext+l-1)=ch;
	  *(yytext+l-1)=0;
	  --l;
	  break;
	}
      }
    }
  }
  (*yylval) = chartab2gen(yytext,yyextra); return T_NUMBER; 
}
	YY_BREAK
/* symbols */
case 739:
YY_RULE_SETUP
#line 959 "input_lexer.ll"
{
  index_status(yyextra)=1; 
  return find_or_make_symbol(yytext,(*yylval),yyextra);
}
	YY_BREAK
case 740:
YY_RULE_SETUP
#line 963 "input_lexer.ll"
if (!xcas_mode(yyextra) || xcas_mode(yyextra)==3) { 
  // cerr << "hash" << endl;
  (*yylval)=gen(at_hash,1); return TI_HASH; 
} else BEGIN(comment_hash);
	YY_BREAK
case 741:
/* rule 741 can match eol */
YY_RULE_SETUP
#line 967 "input_lexer.ll"
BEGIN(INITIAL); index_status(yyextra)=0; increment_lexer_line_number(yyextra);  /* comment_s(yyextra)=string(yytext); (*yylval)=string2gen(comment_s(yyextra).substr(0,comment_s(yyextra).size()-1),false); return T_COMMENT; */
	YY_BREAK
/* everything else */
case 742:
YY_RULE_SETUP
#line 969 "input_lexer.ll"
(*yylval)=string2gen(string(yytext),false); return T_STRING;
	YY_BREAK
case 743:
YY_RULE_SETUP
#line 971 "input_lexer.ll"
ECHO;
	YY_BREAK
#line 6437 "input_lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment_hash):
case YY_STATE_EOF(str):
case YY_STATE_EOF(backquote):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * giac_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( giac_yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of giac_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					giac_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			giac_yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) giac_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2981 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2981 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2980);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					giac_yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( giac_yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void giac_yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        giac_yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            giac_yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	giac_yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	giac_yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void giac_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		giac_yypop_buffer_state();
	 *		giac_yypush_buffer_state(new_buffer);
     */
	giac_yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	giac_yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (giac_yywrap()) processing, but the only time this flag
	 * is looked at is after giac_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void giac_yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE giac_yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) giac_yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	giac_yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with giac_yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void giac_yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		giac_yyfree((void *) b->yy_ch_buf ,yyscanner );

	giac_yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a giac_yyrestart() or at EOF.
 */
    static void giac_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	giac_yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then giac_yy_init_buffer was _probably_
     * called from giac_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void giac_yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		giac_yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void giac_yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	giac_yyensure_buffer_stack(yyscanner);

	/* This block is copied from giac_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from giac_yy_switch_to_buffer. */
	giac_yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void giac_yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		giac_yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void giac_yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)giac_yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in giac_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE giac_yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) giac_yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	giac_yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to giac_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       giac_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE giac_yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return giac_yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to giac_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE giac_yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) giac_yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in giac_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = giac_yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in giac_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE giac_yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int giac_yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *giac_yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int giac_yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *giac_yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void giac_yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void giac_yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "giac_yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see giac_yy_switch_to_buffer
 */
void giac_yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void giac_yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int giac_yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void giac_yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * giac_yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void giac_yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* giac_yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int giac_yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* giac_yylex_init_extra has the same functionality as giac_yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to giac_yyalloc in
 * the yyextra field.
 */

int giac_yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    giac_yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) giac_yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    giac_yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from giac_yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * giac_yylex_init()
     */
    return 0;
}

/* giac_yylex_destroy is for both reentrant and non-reentrant scanners. */
int giac_yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		giac_yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		giac_yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	giac_yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        giac_yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * giac_yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    giac_yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *giac_yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *giac_yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void giac_yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see giac_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 971 "input_lexer.ll"



/*
 *  Routines
 */
#ifndef NO_NAMESPACE_GIAC
  namespace giac {
#endif // ndef NO_NAMESPACE_GIAC
    
    void update_lexer_localization(const std::vector<int> & v,std::map<std::string,std::string> &lexer_map,std::multimap<std::string,giac::localized_string> &back_lexer_map){
      lexer_map.clear();
      back_lexer_map.clear();
      int s=v.size();
      for (int i=0;i<s;++i){
	int lang=v[i];
	if (lang>=1 && lang<=3){
	  std::string doc=find_doc_prefix(lang);
	  std::string file=giac::giac_aide_dir()+doc+"keywords";
	  std::string giac_kw,local_kw;
	  size_t l;
	  char * line = (char *)malloc(1024);
	  ifstream f(file.c_str());
	  if (f){
	    cerr << "// Using keyword file " << file << endl;
	    for (;;){
	      f.getline(line,1023,'\n');
	      l=strlen(line);
	      if (f.eof()){
		f.close();
		break;
	      }
	      if (l>3 && line[0]!='#'){
		if (line[l-1]=='\n')
		  --l;
		// read giac keyword
		size_t j;
		giac_kw="";
		for (j=0;j<l;++j){
		  if (line[j]==' ')
		    break;
		  giac_kw += line[j];
		}
		// read corresponding local keywords
		local_kw="";
		for (++j;j<l;++j){
		  if (line[j]==' '){
		    lexer_map[local_kw]=giac_kw;
		    back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		    local_kw="";
		  }
		  else
		    local_kw += line[j];
		}
		if (!local_kw.empty()){
		  lexer_map[local_kw]=giac_kw;
		  back_lexer_map.insert(pair<string,localized_string>(giac_kw,localized_string(lang,local_kw)));
		}
	      }
	    }
	    free(line);
	  } // if (f)
	  else
	    cerr << "// Unable to find keyword file " << file << endl;
	}
      }
    }

    bool has_special_syntax(const string & s){
      sym_tab::const_iterator i = lexer_functions().find(s);
      if (i==lexer_functions().end())
	return false;
      return (i->second.subtype!=T_UNARY_OP);
    }
    
    bool lexer_functions_register(const unary_function_ptr & u,const string & s,int parser_token){
      sym_tab::const_iterator i = lexer_functions().find(s);
      if (i!=lexer_functions().end())
	return false;
      registered_lexer_functions().push_back(user_function(s,parser_token));
      lexer_functions()[s] = gen(u);
      if (parser_token==1)
	lexer_functions()[s].subtype=T_UNARY_OP;
      else
	lexer_functions()[s].subtype=parser_token;
      // If s is a library function name (with ::), update the library
      int ss=s.size(),j=0;
      for (;j<ss-1;++j){
	if (s[j]==':' && s[j+1]==':')
	  break;
      }
      if (j<ss-1){
	string libname=s.substr(0,j);
	string funcname=s.substr(j+2,ss-j-2);
	std::map<std::string,std::vector<string> >::iterator it=library_functions().find(libname);
	if (it!=library_functions().end())
	  it->second.push_back(funcname);
	else
	  library_functions()[libname]=vector<string>(1,funcname);
      }
      return true;
    }

    bool lexer_function_remove(const vector<user_function> & v){
      vector<user_function>::const_iterator it=v.begin(),itend=v.end();
      sym_tab::const_iterator i,iend;
      bool ok=true;
      for (;it!=itend;++it){
	i = lexer_functions().find(it->s);
	iend=lexer_functions().end();
	if (i==iend)
	  ok=false;
	else
	  lexer_functions().erase(it->s);
      }
      return ok;
    }

    int find_or_make_symbol(const string & s,gen & res,GIAC_CONTEXT){
      if (s.size()==1){
	switch (s[0]){
	case '+':
	  res=at_plus;
	  return T_UNARY_OP;
	case '-':
	  res=at_neg;
	  return T_UNARY_OP;
	case '*':
	  res=at_prod;
	  return T_UNARY_OP;
	case '/':
	  res=at_division;
	  return T_UNARY_OP;
	case '^':
	  res=at_pow;
	  return T_UNARY_OP;
	}
      }
      string ts(s);
      std::map<std::string,std::string>::const_iterator trans=lexer_localization_map().find(ts);
      if (trans!=lexer_localization_map().end())
	ts=trans->second;
      std::map<std::string,std::vector<string> >::const_iterator j=lexer_translator().find(ts);
      if (j!=lexer_translator().end() && !j->second.empty())
	ts=j->second.back();
      sym_tab::const_iterator i = lexer_functions().find(ts);
      if (i!=lexer_functions().end()){
	if (i->second.subtype==T_TO)
	  res=plus_one;
	else
	  res = i->second;
	res.subtype=1;
	index_status(contextptr)=(i->second.subtype==T_UNARY_OP);
	return i->second.subtype ;
      }
      i = syms().find(s);
      if (i == syms().end()) {
	// std::cerr << "lexer new" << s << endl;
	res = *(new identificateur(s));
	syms()[s] = res;
      } else {
	// std::cerr << "lexer" << s << endl;
	res = i->second;
      }
      return T_SYMBOL;
    }

  // Add to the list of predefined symbols
  void set_lexer_symbols(const vecteur & l,GIAC_CONTEXT){
    if (initialisation_done(contextptr) && (l==list_one_letter__IDNT) )
      return;
    initialisation_done(contextptr)=true;
    const_iterateur it=l.begin(),itend=l.end();
    for (; it!=itend; ++it) {
      if (it->type!=_IDNT)
	continue;
      sym_tab::const_iterator i = syms().find(* (it->_IDNTptr->name));
      if (i==syms().end())
	syms()[* (it->_IDNTptr->name)] = *it;
    }
  }


    // Set the input string
    YY_BUFFER_STATE set_lexer_string(const std::string &s_orig,yyscan_t & scanner,GIAC_CONTEXT){
      string s(s_orig),lexer_string;
      bool instring=false;
      // stupid match of bracket then parenthesis
      int l=s.size(),nb=0,np=0;
      int i=0;
      for (;i<l;++i){
	if (s[i]==92){
	  i += 2;
	  if (i>=l)
	    break;
	}
	if (instring){
	  if (s[i]=='"')
	    instring=false;
	}
	else {
	  switch (s[i]){
	  case '"':
	    instring=true;
	    break;
	  case '(':
	    ++np;
	    break;
	  case ')':
	    --np;
	    break;
	  case '[':
	    ++nb;
	    break;
	  case ']':
	    --nb;
	    break;
	  }
	}
      }
      while (np<0 && i>=0 && s[i-1]==')'){
	--i;
	++np;
      }
      while (nb<0 && i>=0 && s[i-1]==']'){
	--i;
	++nb;
      }
      s=s.substr(0,i);
      if (nb<0)
	cerr << "Too many ]" << endl;
      if (np<0)
	cerr << "Too many )" << endl;
      if (nb>0)
	s=s+string(nb,']');
      if (np>0)
	s=s+string(np,')');
      index_status(contextptr)=0;
      opened_quote(contextptr)=0;
      in_rpn(contextptr)=0;
      lexer_line_number(contextptr)=1;
      first_error_line(contextptr)=0;
      spread_formula(contextptr)=0;
      l=s.size();
      for (;l;l--){
	if (s[l-1]!=' ')
	  break;
      }
      while (l>=4 && s[l-1]==';' && s[l-2]==':' && s[l-3]==';'){
	if (s[l-4]==':')
	  l -= 2;
	else {
	  s[l-3]=':';
	  s[l-2]=';';
	  l--;
	}
      }
      s=s.substr(0,l);
      /* if (l && ( (s[l-1]==';') || (s[l-1]==':')))
	 l--; */
      string ss;
      for (int i=0;i<l;++i){
	if (s[i]=='.'){
	  if ( i && (i<l-1) && (s[i-1]!=' ') && (s[i+1]=='.') ){
	    ss+= " ..";
	    ++i;
	  }
	  else
	    ss+='.';
	}
	else {
	  if (xcas_mode(contextptr) > 0 && xcas_mode(contextptr) !=3){
	    if (s[i]=='#')
	      ss += "//";
	    else
	      ss += s[i];
	  }
	  else
	    ss+=s[i];
	}
      }
      lexer_string = ss+"\nÿ";
      giac_yylex_init(&scanner);
      giac_yyset_extra(contextptr,scanner);
      YY_BUFFER_STATE state=giac_yy_scan_string(lexer_string.c_str(),scanner);
      return state;
    }

    int delete_lexer_string(YY_BUFFER_STATE & state,yyscan_t & scanner){
      giac_yy_delete_buffer(state,scanner);
      giac_yylex_destroy(scanner);
      return 1;
    }

#ifndef NO_NAMESPACE_GIAC
  } // namespace giac
#endif // ndef NO_NAMESPACE_GIAC
  

