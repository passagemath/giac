# revert
1 Renvoie le développement réciproque d'un développement en séries en 0. 
2 Returns the revert expansion of a series expansion at 0
3
0 Expr
-1 series
revert(x+x^2+x^4)

# Heaviside
1 Fonction qui vaut 0 si x<0 et 1 si x>=0.
2 Function equal to 0 if x<0 and 1 if x>=0.
3 Función igual al 0 si x<0 y 1 si x>=0.
0 Real
-1 Dirac
Heaviside(1)
Heaviside(-1)

# Dirac
1 Distribution de Dirac (dérivée de Heaviside).
2 Function derivative of Heaviside.
3 Función derivada de Heaviside.
0 Real
-1 Heaviside
Dirac(1)
Dirac(-1)
 int(Dirac(x)*(x-1)^2,x,-1,2)

# polar_coordinates
1 Renvoie la liste du module et de l'argument de l'affixe d'un point (en 2D) ou d'un nombre complexe ou de la liste des coordonnées rectangulaires.
2 Returns the list of the norm and of the argument of the affix of a point (for 2D) or of a complex number or of the the list of rectangular coordinates.
3 Devuelve la lista de la norma y de el argumento de al afijo de un punto (2D) o de un número complejo o de la lista de la abcisa y de la ordenada.
0 Pnt or Cplx or LstRectCoord
-1 abscissa
-2 ordinate
-3 rectangular_coordinates
-4 polar_point
polar_coordinates(point(1+2*i))
polar_coordinates(-1-i)
polar_coordinates([-1,2])
polar_coordinates(point(1+2*i)-point(-1+*i))

# rectangular_coordinates
1 Renvoie la liste de l'abscisse et de l'ordonnée d'un point donné par la liste de ses coordonnées polaires.
2 Returns the list of the abscissa and of the ordinate of a point given by the list of its polar coordinates.
3 Devuelve la lista de la abcisa y de la ordenada de un punto danda como la lista de su norma y de su argumento.
0 LstPolCoord
-1 abscissa
-2 ordinate
-3 rectangular_coordinates
-4 polar_point
rectangular_coordinates([1,-1])
rectangular_coordinates(polar_point(1,pi/4))


# polar_point
1 Renvoie le point (en 2D) de coordonnées polaires les arguments r et t.
2 Returns the point (for 2D) with the arguments r and t as plolar coordinates.
3 Devuelve un punto (2D) de afijo r*exp(i*t).
0 Real(r),Real(t)
-1 abscissa
-2 ordinate
-3 polar_coordinates
-4 rectangular_coordinates
polar_point(1,pi/4)
polar_point(2,-pi/3)

# vecteur
1 Définit et trace un vecteur par deux points ou par un couple de coordonnées ou par un couple d'affixe (en 2D) ou par un point et un vecteur ou par un point (son extrémité et son origine étant [0,0,0]).
2 Define a vector with two points or two components or two affix (for 2D) or with a point and a vector or with a point (its extrmity and its origin is [0,0,0]).
3 Define un vector con dos puntos o por sus componentes o por su afijo o con un punto y un vector o con un punto A (vecteur([0,0,0],A).
0 Pnt,Pnt || Pnt,Vect
-1 coordinates
vecteur(1+i)
vecteur(point(1,2),point(2,3))
vecteur(1+2*i,vecteur(1+i))
vecteur([1,2],[2,3])
vecteur([1,2,0],[2,3,4])
vecteur([1,2,0],vecteur([0,0,0],[1,2,4])


# residue
1 Retourne le residu en a de l'expression dependant de la variable v.
2 Returns the residue in a of the expression with v as variable.
3 
0 Expr,Var(v),Cplx(a)
-1 series
residue(1/z,z,0)
residue(5/z,z=0)
residue(cos(z)/(z*(z-b)),z,0)
residue(c/(z*(z-b)),z=b)

# even
1 Retourne 1 si l'entier est pair, sinon retourne 0.
2 Returns 1 if the integer is even, else returns 0.
3 Devuelve 1 si n=2*p, si no devuelve 0.
0 Intg(n)
-1 odd
even(6)
even(1251)

# odd
1 Retourne 1 si l'entier est impair, sinon retourne 0.
2 Returns 1 if the integer is odd, else returns 0.
3 Devuelve 1 si n=2*p+1, si no devuelve 0.
0 Intg(n)
-1 even
odd(6)
odd(1251)

# tdeg
1 Option de la commande gbasis ou greduce pour spécifier un ordre sur les monômes (degré total puis ordre lexicographique).
2 Option of the gbasis or greduce command to specify an order for monomials (complete degree then lexicographic order).
3 Opción de gbasis o greduce
0 Opt
-1 gbasis
-2 greduce

# plex
1 Option de la commande gbasis ou greduce pour spécifier un ordre sur les monômes (=ordre par défaut=lexicographique pur).
2 Option of the gbasis or greduce command to specify an order for monomials (=default order=pur lexicographic)
3 Opción de gbasis o greduce (=orden por defecto=puro lexicographico) 
0 Opt
-1 gbasis
-2 greduce

# revlex
1 Option de la commande gbasis ou greduce pour spécifier un ordre sur les monômes (degré total puis ordre lexicographique inverse).
2 Option of the gbasis or greduce command to specify an order for monomials (complete degree then inverse lexicographic order).
3 Opción de gbasis o greduce
0 Opt
-1 gbasis
-2 greduce

# unfactored sans_factoriser
1 Option de la commande plotimplicit
2 Option of the plotimplicit command
3 Opción de plotimplicit
0 Opt
-1 plotimplicit
 plotimplicit(x^2+y^2-1,x,y,unfactored)
 plotimplicit(x^2+y^2-1,[x,y],unfactored)
 plotimplicit(x^2+y^2+z^2-1,x,y,z,xstep=0.2,ystep=0.2,zstep=0.2,unfactored)
 plotimplicit(x^2+y^2+z^2-1,[x,y,z],xstep=0.2,ystep=0.2,zstep=0.2,unfactored)
 plotimplicit(x^2+y^2+z^2-1,x=0..1,y=0..1,z=0..1,xstep=0.2,ystep=0.2,zstep=0.2,unfactored)

# DOM_INT integer DOM_int
1 DOM_INT ou integer est un entier qui représente le type d'une variable entière, valeur de la commande type. DOM_int est utilise si l'entier est < 2^31.
2 DOM_INT or integer is an integer which is the type of an integer variable, it is the value of the type command. DOM_int is used for integers < 2^31.
0 Opt
-1 type
-2 assume
-3 DOM_FLOAT
-4 DOM_SYMBOLIC
 type(2^31)
 DOM_INT+0
 assume(a,DOM_INT)
 assume(a,integer)

# DOM_SYMBOLIC symbol
1 DOM_SYMBOLIC ou symbol représente le type d'une variable symbolique, valeur de la commande type.
2 DOM_SYMBOLIC or symbol is the type of a symbolic variable, as returned by the type command.
0 Opt
-1 type
-2 assume
-3 DOM_INT 
-4 DOM_FLOAT
 assume(a,symbol) 
 assume(a,DOM_SYMBOLIC)

# set[] %{%}
1 set[] ou %{%} est utilisé pour définir un ensemble.
2 set[] ou %{%} is used to define a set.
0 Seq
 set[1,2,3]
 %{1,2,3%}

# complexroot
1 Renvoie la liste des sommets des carrés de côtés <=l où se trouvent les racines  de P [situées dans le rectangle de sommets opposés a et b] avec leur multiplicité. 
2 Returns the list of the vertices of the squares (side<=l) containing roots of P inside a..b with their mulitiplicity.
3 Devuelve la lista de vértices de una cuadrado (lado<=l) de raíces de P con su multiplicidad.
0 Poly(P),Real(l),[Cplx(a)],[Cplx(b)]
-1 proot
-2 froot
-3 realroot
-4 rationalroot
-5 crationalroot
complexroot(x^5-2*x^4+x^3+i,0.1)
complexroot(x^3+8,1e-5,0,2+2*i)

# realroot
1 Renvoie la liste des intervalles de longueur <=l où se trouvent les racines réelles de P situées dans a..b avec leur multiplicité. 
2 Returns the list of intervals of length <=l containing the real roots of P inside a..b with their mulitiplicity.
3 Devuelve la lista de vértices de intervalos (lado<=l) de raíces de P con su multiplicidad.
0 Poly(P),Real(l),[Cplx(a)],[Cplx(b)]
-1 proot
-2 froot
-3 complexroot
-4 rationalroot
-5 crationalroot
realroot(x^5-2*x^4+x^3+1,0.1)
realroot(x^3+x+8,1e-5,-4,4)

# rationalroot
1 Renvoie la liste des racines rationnelles de P sans indiquer la multiplicité.
2 Returns the list simple rational roots of P.
3 Devuelve la lista de simples racionales raíces de P.
0 Poly(P)
-1 proot
-2 froot
-3 complexroot
-4 realroot
-5 crationalroot
rationalroot(2*x^3-9*x^2+13*x-6)

# crationalroot
1 Renvoie la liste des racines complexes rationnelles de P sans indiquer la multiplicité.
2 Returns the list simple complex rational roots of P.
3 Devuelve la lista de simples racionales complejos raíces de P.
0 Poly(P)
-1 proot
-2 froot
-3 complexroot
-4 rationalroot
-5 realroot
crationalroot(2*x^3+(-5-7*i)*x^2+(-4+14*i)*x+8-4*i)

# trapezoid middle_point left_rectangle right_rectangle trapeze point_milieu rectangle_droit rectangle_gauche
1 Option de la commande plotarea
2 Option of the plotarea command
3 Opción de plotarea
0 Opt
-1 plotarea
 plotarea(x^2,x=0..1,5,trapezoid)
 plotarea(x^2,x=0..1,5,middle_point)
 plotarea(x^2,x=0..1,5,right_rectangle)
 plotarea(x^2,x=0..1,5,left_rectangle)

# pow2exp
1 Convertit les puissances en exponentielles.
2 Converts powers to exponentials.
3 Transforma las potencias en exponentials.
0 Expr
-1 exp2pow
pow2exp(a^b)

# expexpand
1 Développe les exponentielles.
2 Expands  exponentials.
3 Expande las expresiones exponencials. 
0 Expr
-1 texpand
-2 lnexpand
-3 trigexpand
expexpand(exp(3*x))

# lnexpand
1 Développe les logarithmes.
2 Expands logarithms.
3 Expande las expresiones logarítmicas. 
0 Expr
-1 texpand
-2 expexpand
-3 trigexpand
lnexpand(ln(3*x))

# trigexpand
1 Développe les fonctions trigonométriques.
2 Expands trigonometric functions.
3 Expande expresiones trigonométricas. 
0 Expr
-1 texpand
-2 lnexpand
-3 expexpand
trigexpand(sin(3*x))

# combine
1 Rassemble des termes de e selon une [classe de] fonction f passée en 2ème argument.
2 Combines terms in e according to a [class of] function f (2nd argument).
3 Agrupa expresiones de acuerdo con el segundo argumento.
0 Expr(e),Fnc(f).
-1 lncollect
-2 lin
-3 tlin
-4 tcollect
combine(exp(x)*exp(y),exp)
combine(sin(x)*cos(x),trig)
combine(ln(x)+ln(y),ln)

# plotarea areaplot
1 Affiche l'aire sous une courbe, en option la méthode de quadrature (trapeze,rectangle_gauche,rectangle_droit,point_milieu).
2 Displays the area below a curve, optionnaly with a quadrature method (trapezoid,left_rectangle,right_rectangle,middle_point).
0 Expr,x=a..b,[n],[Method]
-1 integrate
-2 plot
plotarea(sin(x),x=0..pi)
plotarea(x^2,x=0..1,5,trapezoid)
plotarea(x^2,x=0..1,5,middle_point)

# plotinequation inequationplot
1 Affiche le graphe de la solution d'inéquations de 2 variables.
2 Shows the graph of the solution of inequations with 2 variables.
0 Expr,[x=xrange,y=yrange],[xstep],[ystep]
-1 plotfunc
-2 plotcontour
-3 plotdensity
-4 plotimplicit
plotinequation(x^2-y^2<3)
plotinequation(x^2-y^2<3,[x=-2..2,y=-2..2],xstep=0.1,ystep=0.1)
plotinequation(3-(x^2-y^2),[x=-2..2,y=-2..2],xstep=0.1,ystep=0.1)
plotinequation([x+y>3,x^2<y],[x,y],xstep=0.2,ystep=0.2)

# plotdensity densityplot
1 Affiche en couleur le graphe d'une fonction de 2 variables dans le plan.
2 Shows in the plan with colors the graph of a function of 2 variables.
0 Expr,[x=xrange,y=yrange],[z],[xstep],[ystep]
-1 plotfunc
-2 plotcontour
plotdensity(x^2-y^2,[x=-2..2,y=-2..2],xstep=0.1,ystep=0.1)
plotdensity(x^2-y^2,[x=-2..2,y=-2..2],z=-2..2,xstep=0.1,ystep=0.1)

# frames trames
1 Option des commandes animate et animate3d pour donner le nombres d'images. 
2 Option of animate and animate3d commands to give the picture number.
3 Opción de animate y animate3d.
0 Opt
-1 animate
-2 animate3d
 animate(sin(x*t),x=-pi..pi,t=-3..3,frames=30)
 animate3d(x^2+t*y^2,[x=-2..2,y=-2..2],t=-3..3,frames=10)

# animate
1 Anime le graphe de f, dépendant de x, parametre t en appelant plot.
2 Animates a plot of f, depending of x, parameter t by calling plot.
0 Expr(f),x=xmin..xmax,t=tmin..tmax,frames=nframes
-1 plot
-2 animate3d
-3 animation
animate(sin(x*t),x=-pi..pi,t=-3..3,frames=30)

# animate3d
1 Anime le graphe de f, dépendant de [x,y], parametre t en appelant plotfunc
2 Animate a plot of f, depending of [x,y], parameter t by calling plotfunc
0 Expr(f),[x=xmin..xmax,y=ymin..ymax],t=tmin..tmax,frames=nframes
-1 plotfunc
-2 animate
-3 animation
animate3d(x^2+t*y^2,[x=-2..2,y=-2..2],t=-3..3,frames=10)

# animation
1 Trace en boucle, chaque objet d'une suite d'objets graphiques.
2 Draws in a loop each object of a geometric object sequence.
3 Dibuja cada objeto de una secuencia de geométrico objeto.
0 Mtrx
-1 animate
-2 animate3d
animation(seq(plotfunc([cos(a*t),sin(a*t)],t=0..2*pi/a),a,1,12,0.3))
animation(seq(plotparam([sin(t),sin(a*t)],t,0,2*pi,tstep=0.01),a,1,10,0.2))
animation(seq(line([0,0,0],[1,1,a]),a,-5,5,0.5))
animation(seq(plotfunc(x^2-y^a,[x,y]),a=1..3))
animation(seq(plotfunc((x+i*y)^a,[x,y],display=filled),a=1..10)
 plotfunc(x^2);animation([point(1),segment(1,1+i),point(1+i)],droite(y=2*x-1))

# camembert
1 Trace un ou des diagramme(s) en camembert d'une série statistique à 1 variable.
2 Draws pie chart of a one variable statistical serie.
3 Dibuja el camembert diagrama para una serie estadística de una variable.
0 Mtrx
-1 diagramme_batons
camembert([["France",6],["Allemagne",12],["Suisse",5]])
camembert([3/2,2/3,5/4,4/5,7/6,6/7,9/8,8/9,11/10])
camembert([[2,"xyz","abc"],["A",2,5],["B",5,6],["C",7,7]])

# diagramme_batons
1 Trace un ou des diagrammes en batons d'une série statistique à 1 variable.
2 Draws barplot of a one variable statistical serie.
3 Dibuja el baton diagrama para una serie estadística de una variable.
0 Mtrx
-1 camembert
diagramme_batons([["France",6],["Allemagne",12],["Suisse",5]])
diagramme_batons([3/2,2/3,5/4,4/5,7/6,6/7,9/8,8/9,11/10])
diagramme_batons([[2,"xyz","abc"],["A",2,5],["B",5,6],["C",7,7]])

# listplot plotlist
1 Trace la ligne polygonale reliant les points d'abscisse 1,...,n et d'ordonnée l=[y1,...,yn] ou la (ou les) lignes reliant les points d'abscisse la première colonne de M et d'ordonnée sa (ou ses) autre(s) colonne(s).
2 Draws the polygonal line through the points of abscissa 1,...,n and ordinate l=[y1,...,yn] or the line(s)  through the points of abscissa the first M column and ordinate the other(s) column(s).
0 Lst(l)||Mtrx(M)
-1 polygonplot
-2 scatterplot
-3 polygonscatterplot
listplot([13,10,15,16])
listplot([1,13],[2,10],[3,15],[4,16])
listplot([[0,13],[2,10],[4,15]])

# pari
1 Execute une commande de PARI/GP ou exporte les commandes de PARI/GP
2 Execute a PARI/GP command or exports all PARI/GP commands
0 Str,arguments
-1 gcd
-2 lgcd
-3 is_prime
pari()
pari("gcd",15,50)
pari("gcd",5/7,50/9)
pari("gcd", 3,[25,15,50,75])
pari("gcd", [2,3],[25,15,50,75])
pari("content",[25,15,50,75])
pari("isprime",9856989898997789789,1)
pari("isprime",9856989898997789789,2)

# bitor
1 Ou logique inclusif bit à bit
2 Inclusive logical bit or
0 Intg,Intg
-1 bitxor
-2 bitand
bitor(0x12,0x38)

# bitand
1 Et logique bit à bit
2 Logical bit and
0 Intg,Intg
-1 bitxor
-2 bitor
bitand(0x12,0x38)

# bitxor
1 Ou logique exclusif bit à bit
2 Exclusive logical bit or
0 Intg,Intg
-1 bitor
-2 bitand
bitxor(0x12,0x38)

# hamdist
1 Distance de Hamming bit à bit
2 Bit Hamming distance
0 Intg,Intg
hamdist(0x12,0x38)

# simplex_reduce
1 Réduction par le simplexe pour trouver max(c.x) avec A.x<=b et x>=0. Renvoie le max,la solution augmentée x et la matrice réduite. Accepte aussi en argument [[A|I|b],[-c|*|0]]
2 Reduction by simplex algorithm to find max(c.x) under A.x<=b and x>=0. Returns the maximum, the augmented solution x and the reduced matrix. Accepts also [[A|I|b],[-c|*|0]] as argument.
0 Mtrx(A), Vect(b), Vect(c)
simplex_reduce([[3,2,2],[1,1,1]],[3,4],[1,2,3])
simplex_reduce([[3,2,2,1,0,3],[1,1,1,0,1,4],[-1,-2,-3,0,0,0]])
simplex_reduce([[-3,2],[1,1]],[3,4],[1,2])
simplex_reduce([[-3,2,1,0,3],[1,1,0,1,4],[-1,-2,0,0,0]])
simplex_reduce([[2,1,1,1,0,0,2],[1,2,3,0,1,0,5],[2,2,1,0,0,1,6],[-3,-1,-3,1,-1,2,0]])

# spline
1 Spline naturelle passant par les points donnés par les listes lx et ly, variable x, de degré d
2 Natural spline through the points given by the lx and ly lists, variable x, degree d
0 Lst(lx),Lst(ly),Var(x),Intg(d)
-1 lagrange
spline([0,1,2],[1,3,0],x,3)

# convexhull
1 Enveloppe convexe d'un ensemble de points du plan
2 Convex hull of a list of 2-d points
0 Lst
-1 polygon
convexhull(0,1,1+i,1+2i,-1-i,1-3i,-2+i)
convexhull([0,1,1+i,1+2i,-1-i,1-3i,-2+i])
 polygon(convexhull(0,1,1+i,1+2i,-1-i,1-3i,-2+i))

# as_function_of
1 Renvoie un élément défini comme fonction d'un élément défini précédemment.
2 Returns an element defined as a function of a preceding one.
3 Devuelve un elemento como una función de un precedente.
0 VarResult,VarArg
-1 locus
as_function_of(b,a)

# save_history
1 Sauve l'historique des commandes dans un fichier de nom str.
2 Save the historic in a fich with name str.
3 Guarda el historia en un fichero con nombre str.
0 Str(str)
-1 
save_history("toto.cas")

# DispG
1 Affiche la fenêtre DispG.
2 Shows DispG windows.
3 Instrucción para abrir la pantalla DispG.
0 NULL
-1 DispHome
DispG
DispG()

# DispHome
1 Ferme la fenêtre DispG.
2 Closes DispG windows.
3 Cierra la pantalla DispG.
0 NULL
-1 DispG
DispHome
DispHome()

# ans
1 Renvoie la n-ieme réponse de l'historique des commandes si n>=0 ou, à la (-n)ième réponse précédente si n<0 (par défaut n=-1 pour la réponse précédente).
2 Returns the n-th answer of the comamnd history if n>=0 or, the (-n)th previous answer if n<0 (by defaults n=-1 for the previous answer).
3 Devuelve la n-ésima respuesta del historial comandos si n>=0, o la -(n-ésima) respuesta previa si n<0 (por defecto n=-1 es la respuesta anterior).
0 Intg(n)
-1 quest
ans()
ans(2)
ans(-2)

# quest entry
1 Renvoie la n-ieme question de l'historique des commandes si n>=0 ou, à la (-n)-ième question précédente si n<0 (par défaut n=-1 pour la question précédente).
2 Returns the n-th question of the command history if n>=0 or, the (-n)th previous question if n<0 (by defaults n=-1 for the previous question).
3 Devuelve la n-ésima expresión del historial comandos si n>0, o la -(n-ésima) expresión  anterior si n<0 (por defecto n=-1 es la última expresión).
0 Intg(n)
-1 ans
quest()
quest(2)
quest(-2)

# ClrIO
1 Efface l'écran des sorties
2 Clear the output screen
3 Borra la pantalla del mostrar
0 NULL
-1 ClrGraph
-2 ClrDraw
ClrIO()

# ithprime
1 Renvoie le n-ième nombre premier inférieur à 10000 (pour l'instant).
2 Returns the n-th prime number less than 10000 (for the moment).
3 Devuelve el n-ésimo número primo menor que 10000. 
0 Intg(n)
-1 nextprime
-2 prevprime
ithprime(1229)
ithprime(1000)

# assign
1 Stocke le deuxième argument (de l'égalité) dans la variable donnée comme premier argument (de l'égalité) (compatibilité Maple).
2  Store the second argument (of the equality) in the variable given as first argument (of the equality) (Maple compatibility).
3 Guarda el segundo argumento (de una igualdad) en la variable danda como primer argumento (de una igualdad) (compatibilidad con Maple).
0 (Var,value) or Equal or LstEq.
-1 sto
-2 :=
assign(a,2)
assign(a=2)
assign([a1=1,a2=2,a3=3])

# ismith
1 Calcule la forme normale de Smith d'une matrice A a coefficients entiers : renvoie U,B,V tels que U et V inversibles dans Z, B diagonale, B[i,i] divise B[i+1,i+1] et B=U*A*V.
2 Smith normal form of a matrix with coefficients in Z : returns U,B,V such that U and V invertible in Z, B diagonal, B[i,i] divide B[i+1,i+1] and B=U*A*V.
3 
0 Mtrx(A)
-1 ihermite
ismith([[9,-36,30], [-36,192,-180], [30,-180,180]])
ismith([[1,2,3],[4,5,6],[7,8,9]])

# ihermite
1 Calcule la forme normale de Hermite pour une matrice A a coefficients entiers : renvoie U,B tels que U inversible dans Z, B triang sup et B=U*A.
2 Hermite normal form of a matrix with coefficients in Z : returns U,B such that U is invertible in Z, B upper triangular and B=U*A.
3 
0 Mtrx(A)
-1 ismith
ihermite([[9,-36,30], [-36,192,-180], [30,-180,180]])
ihermite([[1,2,3],[4,5,6],[7,8,9]])

# GF
1 Crée un corps de Galois (Galois Field) de caractéristique p ayant p^n éléments.
2 Create a Galois Field of characteristic p with p^n elements.
3 Crea un Galois Field de característica p con p^n elementos.
0 Intg(p), Intg(n)
GF(2,8)
GF(5,9)
GF(2,8,['a','G'])
G:=GF(2,a^8+a^6+a^3+a^2+1,['a','G'],undef)

# LineTan droite_tangente
1 Trace la tangente au graphe de y=f(x) en x=a.
2 Draws the tangent to y=f(x) at x=a.
3 Dibuja la tangente de y=f(x) en x=a.
0 Expr(f(x)),[Var],Expr(a)
-1 tangent
LineTan(sin(x),pi/4)
LineTan(sin(t),t=pi/4)
LineTan(sin(t),t,pi/4)
LineTan(x^2-x,1)

# xor
1 Ou exclusif (opérateur infixé).
2 Exclusive or (infix operator).
3 O exclusif
0 Expr, Expr
-1 or
-2 and
-3 not
 1 xor 1
 0 xor 1
 0 xor 0

# reverse_rsolve
1 Si v=[v_0 ... v_(2n-1)], renvoie [b_n,...,b_0] tel que b_n*v_{n+k}+...+b_0*v_k=0 pour k=0..n-1.
2 If v=[v_0 ... v_(2n-1)], return [b_n,...,b_0] such that b_n*v_{n+k}+...+b_0*v_k=0 for k=0..n-1.
3 reverse_rsolve
0 Vect(v)
reverse_rsolve([1,-1,3,3])

# revlist
1 Renvoie la liste l inversée.
2 Returns the list l in reverse order.
3 Devuelve la contraria lista.
0 Lst(l)
revlist([1,2,3])

# ratnormal
1 Réécriture sous forme de fraction irréductible.
2 Rewrite as an irreducible rational fraction.
3 ratnormal
0 Expr
-1 normal
-2 symplify
-3 factor
-4 expand
ratnormal((x^2-1)/(x^3-1))
ratnormal(c/d+b/d+a/d)
ratnormal((x^2-1)/(x^3-1)+(x-1)/(x^3-1)+1)

# pade
1 Approximant de Padé P/Q=f mod x^(n+1) ou mod N avec degre(P)<p.
2 Pade approximation P/Q=f mod x^(n+1) or mod N with degre(P)<p.
3 Pade
0 Expr(f), Var(x), (Intg(n) || Poly(N)), Intg(p)
-1 taylor
-2 series
pade(exp(x),x,10,6)

# is_coplanar
1 Teste si 4 points sont coplanaires.
2 Test if 4 points are in the same plan.
3 is_coplanar
0 Pnt,Pnt,Pnt,Pnt
is_coplanar([0,0,0],[1,2,-3],[1,1,-2],[2,1,-3])

# gnuplot
1 Exécute une instruction dans le processus gnuplot (fenêtre 3-d).
2 Run a gnuplot command (in the 3-d screen).
3 gnuplot
0 Str
gnuplot("splot u,v,u+v")

# current_sheet
1 Contenu de l'éditeur de matrice/du tableur.
2 Content of the matrix editor or spreadsheet.
3 Current sheet
0 [Intg||Inter],[Intg||Letter],[Letter]
current_sheet(1,2)
current_sheet(A1..A5,B,G)

# lll
1 (S,A,L,O):=lll(M), base courte du réseau engendré (L*O=A*M=S).
2 (S,A,L,O):=lll(M), short basis of a lattice (L*O=A*M=S).
3 (S,A,L,O):=lll(M) (L*O=A*M=S).
0 Mtrx
lll([[1234,3452,4521],[3425,2241,1543],[5643,3425,8721]])

# fft
1 Fast Fourier Transform dans R, ou dans le corps fini Z/pZ, avec a comme racine n-ième primitive de l'unité (n=size(L)).
2 Fast Fourier Transform in R or in the field Z/pZ, with a as primitive n-th root of 1 (n=size(L)).
3 Fast Fourier Transform.
0 Vect or (Vect(L),Intg(a),Intg(p)
-1 ifft
fft([1,2,3,4,0,0,0,0])
fft(ranm(128),22798,35969)

# ifft
1 Inverse Fast Fourier Transform.
2 Inverse Fast Fourier Transform.
3 Inverse Fast Fourier Transform.
0 Vect
-1 fft
ifft([100.0,-52.2842712475+6*i,-8.0*i,4.28427124746-6*i,4.0,4.28427124746+6*i,8*i,-52.2842712475-6*i])

# hessenberg
1 Réduction matricielle sous forme de Hessenberg.
2 Matrix reduction to Hessenberg form.
3 Hessenberg
0 Mtrx
hessenberg([[1,2,3],[4,5,6],[7,8,1]])
hessenberg([[1,2,3,4],[4,5,6,7],[7,8,9,0],[0,1,2,3]])

# companion
1 Matrice compagnon d'un polynome unitaire (an=1).
2 Companion matrix of a polynomial (an=1).
3 companion
0 Poly,Var
-1 pcar
-2 rat_jordan
companion(x^2+5x-7,x)
companion(-pcar([[1,0,1],[0,2,-1],[1,-1,1]],x),x)

# cote
1 Troisième coordonnée (z) d'un point 3-d.
2 Third coordinate (z) of a 3-d point.
3  Devuelve la cota (z) de un punto 3-d.
0 Vect
-1 abscissa
-2 ordinate
-3 coordinates
cote([1,2,3])
cote(point(1,2,3))

# chrem
1 Restes chinois pour des entiers.
2 Chinese remainders for integers.
3 Restos chinos de enteros.
0 LstIntg(a,b,c....),LstIntg(p,q,r,....)
-1 gcd
-2 fracmod
chrem([2,3],[7,5])
chrem([2,4,6],[3,5,7])
chrem([2,4,6,7],[3,5,7,11])
chrem([2*x+1,4*x+2,6*x-1,x+1],[3,5,7,11])

# ecris
1 Écris la chaîne s avec la fonte n (par défaut n=14) au point [x,y] (par défaut à la place de la tortue).
2 Write the string s with the fount n (by default n=14) at the point [x,y] (by default at the point where the turtle is).
3 
0 Str(s),[Intg(n)],[Real(x)],[Real(y)]
-1 signe
ecris("bonjour")
ecris("bonjour",20)
ecris("bonjour",20,30,10)
ecris(bonjour,20,30,10)

# signe
1 Écris la chaîne s avec la fonte 20 au point [10,10].
2 Write the string s with the fount 20  at the point [10,10].
3 
0 Str(s)
-1 ecris
signe("Thomas")
signe(Thomas)

# prism
1 Dessine un prisme de base plane ABCD...et d'arêtes parallèles à AA1 (les faces sont des parallélogrammes).
2 Draws a prism with plane base ABCD...and with edges parallel to AA1 (the faces are paralellograms).
3 Dibuja un prism
0 LstPnt([A,B,C,D]),Pnt(A1)
-1 cube
-2 polyhedron
prism([[0,0,0],[5,0,0],[0,5,0],[-5,5,0]],[0,0,5])

# common_perpendicular
1 Dessine la perpendiculaire commune aux droites D1 et D2.
2 Draws the common perpendicular of the lines D1 and D2.
3 Dibuja un comün perpendicular para D1 y D2.
0 Line(D1),Line(D2)
-1 
-2 
common_perpendicular(line([0,0,0],[0,5,5]),line([5,0,0],[0,0,5]))

# point2d
1 Définit au hasard, les coordonnées entières (entre -5 et +5) des points 2d donnés en argument.
2 Defines at random, the coordinates (between -5 and +5) of the 2d points given as argument.
3 
0 SeqVar(A,B,C...)
-1 point3d 
point2d(A,B,C,D)

# point3d
1 Définit au hasard les coordonnées entières (entre -5 et +5) des points 3d donnés en argument.
2 Defines at random, the coordinates (between -5 and +5) of the 3d points given as argument.
3 
0 SeqVar(A,B,C...)
-1 point2d 
point3d(A,B,C,D)

# octahedron
1 Dessine un octaèdre de centre A, de sommet B où le plan ABC contient 4 sommets. 
2 Draws an octahedron with center A, vertex B and such that the plane ABC contains 4 vertices.
3 Dibuja un octahedron
0 Pnt(A),Pnt(B),Pnt(C)
-1 icosahedron
-2 dodecahedron
-3 cube
-4 tetrahedron
octahedron([0,0,0],[0,0,5],[0,5,0])
octahedron(evalf([0,0,0],[3,2,4],[1,1,0]))

# icosahedron
1 Dessine un icosaèdre de centre A, de sommet B où le plan ABC contient le sommet le plus proche (parmi les 5) de B. 
2 Draws an icosahedron with center A, vertex B and such that the plane ABC contains one vertex among the 5 nearest vertices from B
3 Dibuja un icosahedron
0 Pnt(A),Pnt(B),Pnt(C)
-1 octahedron
-2 dodecahedron
-3 cube
-4 tetrahedron
icosahedron([0,0,0],[sqrt(5),0,0],[1,2,0])
icosahedron(evalf([0,0,0],[3,2,4],[1,1,0]))

# dodecahedron
1 Dessine un dodécaèdre de centre A, de sommet B  où le plan ABC contient un axe de symétrie du dodécaèdre.
2 Draws a dodecahedron with center A, vertex B and such that the plane ABC contains a symmetry axis of the dodecahedron.
3 Dibuja un dodecahedron
0 Pnt(A),Pnt(B),Pnt(C)
-1 icosahedron
-2 octahedron
-3 cube
-4 tetrahedron
dodecahedron([0,0,0],[0,2,sqrt(5)/2+3/2],[0,0,1])
dodecahedron(evalf([0,0,0],[3,2,4],[1,1,0]))

# parallelepiped
1 Dessine un parallélépipède de côtés AB,AC,AD (les faces sont des parallélogrammes).
2 Draws a parallelepiped with sides AB,AC,AD (the faces are paralellograms).
3 Dibuja un parallelepiped
0 Pnt(A),Pnt(B),Pnt(C),Pnt(D)
-1 cube
-2 polyhedron
parallelepiped([0,0,0],[2,0,0],[0,1,0],[0,0,3])

# polyhedron
1 Dessine un polyèdre convexe dont les sommets sont parmi les arguments.
2 Draws a convex polyhedron with vertices among the arguments.
3 Dibuja un polyhedron.
0 SeqPnt(A,B,C...)
-1 cube
-2 parallelepiped
polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6])

# pyramid tetrahedron
1 Dessine le tétraèdre régulier direct de coté AB dont une face est dans le plan(A,B,C) quand il y a 3 arguments et la pyramide ABCD quand il y a 4 arguments. 
2 Draws the regular direct pyramid ABCD with vertices A,B and a face in the plan(A,B,C) when there is 3 arguments et the pyramid ABCD when there is 4 arguments.
3 Dibuja un regular pirâmide ABC1D1 (ABC1 en plan(A,B,C)) [un pirâmide ABCD]
0 Pnt(A),Pnt(B),Pnt(C),[Pnt(D)]
-1 cube
-2 cylinder
-3 icosahedron
-4 dodecahedron
-5 octahedron
pyramid([0,0,0],[3,0,0],[0,1,0])
pyramid([0,0,0],[3,0,0],[0,3,0],[0,0,4])

# cube
1 Dessine le cube direct de coté AB dont une face est dans le plan(A,B,C).
2 Draws the direct cube with vertices A,B with a face in the plan(A,B,C) 
3 Dibuja un cube ABC1D1...(ABC1D1 en plan(A,B,C))
0 Pnt(A),Pnt(B),Pnt(C)
-1 parallelepiped
-2 cylinder
-3 icosahedron
-4 dodecahedron
-5 octahedron
-6 tetrahedron
-7 centered_cube
cube([0,0,0],[3,0,0],[0,0,1])

# centered_tetrahedron
1 Dessine le tétraèdre régulier direct de centre A de sommet B dont un sommet est dans le plan(A,B,C). 
2 Draws the regular direct pyramid with center A, vertex B and a vertex in the plan(A,B,C).
3
0 Pnt(A),Pnt(B),Pnt(C)
-1 cube
-2 tetrahedron
-3 icosahedron
-4 dodecahedron
-5 octahedron
centered_tetrahedron([0,0,0],[3,0,0],[0,1,0])
centered_tetrahedron(evalf([0,0,0],[3,2,4],[1,1,0]))

# centered_cube
1 Dessine le cube direct de centre A de sommet B tel que le plan ABC contient un axe de symétrie du cube.
2 Draws the direct cube with center A, vertex B and such that the plane ABC contains a symmetry axis of the cube. 
3 
0 Pnt(A),Pnt(B),Pnt(C)
-1 parallelepiped
-2 cube
-3 icosahedron
-4 dodecahedron
-5 octahedron
-6 centered_tetrahedron
centered_cube([0,0,0],[3,0,0],[0,0,1])
centered_cube(evalf([0,0,0],[3,2,4],[1,1,0]))

# cone
1 Dessine un cône de sommet A, direction v, de demi_angle au sommet t, [et de hauteur h et -h].
2 Draws a cone with vertex A, direction v, and with half_angle t [and with altidude h and -h].
3 Dibuja un cono con cumbre=A, direction v and con media-angulo=t [y h y -h de altura].
0 Pnt(A),Vect(v),Real(t),[Real(h)]
-1 half_cone
-2 cylinder
cone([0,0,0],[0,0,1],pi/6)
cone([0,0,0],[0,1,1],pi/6,4)

# half_cone
1 Dessine un demi-cône de sommet A, direction v, de demi_angle au sommet t, [et de hauteur h].
2 Draws an half-cone with vertex A, direction v and with half_angle=t [and with altidude h].
3 Dibuja un media-cono con cumbre=A, direction v, con media-ángulo=t [y h de altura].
0 Pnt(A),Vect(v),Real(t),[Real(h)]
-1 cone
-2 cylinder
half_cone([0,0,0],[0,0,1],pi/6)
half_cone([0,0,0],[0,1,1],pi/6,-4)

# cylinder
1 Dessine un cylindre d'axe (A,v), de rayon r [et de hauteur h].
2 Draws a cylinder with axis=(A,v), with radius=r [and with altidude h].
3 Dibuja un cilindro con eje=(A,v), con radio=r [y h de altura].
0 Pnt(A),Vect(v),Real(r),[Real(h)]
-1 half_cone
-2 cone
cylinder([0,0,0],[0,1,0],2)
cylinder([0,0,0],[0,1,0],2,-3)

# erase3d
1 Efface l'écran graphique 3d
2 Erase the graphique screen 3d
3 Borra la pantalla gráfica 3d
0 NULL
-1 ClrGraph
-2 erase
erase3d()

# sphere
1 sphere(A,B) (resp sphere(A,r)) trace la sphère de diamètre AB (resp centre A et de rayon r) dans l'espace 3D.
2 sphere(A,B) (resp sphere(A,r)) draws the sphère de diamèere AB (resp center A and radius r) in the space 3D.
3 sphere(A,B) (resp sphere(A,r)).
0 (Pnt or Vect),(Pnt or Real)
-1 circle 
sphere([0,0,0],[2,2,2])
sphere([1,1,1],1)

# plane
1 plan(A,B,C) ou plan(A,droite(B,C)) (resp plan(a*x+b*y+c*z+d=0)) trace le plan ABC (resp d'équation a*x+b*y+c*z+d=0) dans l'espace 3D.
2 plane(A,B,C) or plane(A,line(B,C)) (resp plane(a*x+b*y+c*z+d=0)) draws the plane ABC (resp of equation a*x+b*y+c*z+d=0) in the 3D space.
3 plane(A,B,C) o plane(A,line(B,C)) (resp plane(a*x+b*y+c*z+d=0)) dibuja  el plan ABC (resp ecuación a*x+b*y+c*z+d=0).
0 Pnt or Eq, [Pnt or Line],[Pnt]
-1 line
plane([0,0,0],[1,1,1],[1,0,0])
plane([0,0,0],line([1,0,0],[1,1,1]))
plane(x+y+z=0)
plane(2*x+y-2*z-1)

# line
1 droite(A,B) (resp droite(A,pente=m) ou droite(a*x+b*y+c=0) ou droite(a*x+b*y+c*z+d=0,aa*x+bb*y+cc*z+dd=0)) trace la droite AB (resp la droite passant par A et de pente m ou d'équation l'argument) dans le plan ou dans l'espace 3D.
2 line(A,B) (resp line(A,slope=m) or line(a*x+b*y+c=0) or line(a*x+b*y+c*z+d=0,aa*x+bb*y+cc*z+dd=0)) draws the line AB (resp the line going through A with slope m or of equation the argument) in the plane or in the 3D space.
3 line(A,B)(resp  line(A,slope=m) o line(a*x+b*y+c=0) o line(a*x+b*y+c*z+d=0,aa*x+bb*y+cc*z+dd=0)) dibuja la línea recta AB (2D o 3D)(resp de ecuación el argumento).
0 Pnt||Cplx||Eq,[Pnt||slope||Var] 
-1 point
-2 plane
-3 slope
line(i,1+i)
line(point(i),point(1+i))
line(i+i,slope=2)
line([0,0,0],[1,1,1])
line(x+y=1)
line(x+y+z=0,x+y=0)
line([1+t,-1+t],t)
line([1+t,2-t,-1+3*t],t)
line(1-i,slope=slope(line(1,2i)))

# point
1 A:=point(za) (resp A:=point([a,b,c])) dessine un point d'affixe za (resp de coordonnées (a,b,c)) et de légende A
2 A:=point(za) (resp A:=point([a,b,c])) draws a point of affix za (resp of coordinates (a,b,c)) with the legend A
3 A:=point(za) (resp A:=point([a,b,c])) dibuja el punto de afijo za (resp de coordenadas (a,b,c)) con la leyenda A
0 Cplx(za)||Vect
-1 pixon
-2 line
point(1+i)
point([1,2,3])
 B:=point(1-i)
 B:=point([1,0,0])

# efface
1 Efface l'écran de la tortue ou recule de n pas en effaçant.
2 Erases the turtle screen or the turtle takes n steps back and erases.
3 
0 NULL or Real(n)
-1 initialise
 efface
efface()

# si alors sinon fsi
1 Instruction conditionnelle : (si...alors...sinon...fsi).
2 Conditional instruction : (si...alors...sinon...fsi).
3 Test : (si...alors...sinon...fsi).
0 
-1 if
 si alors sinon fsi
 n:=1; si n>0 alors triangle_plein(20*n); sinon disque(20*n);fsi 
 n:=-1; si n>0 alors triangle_plein(20*n); sinon disque(20*n);fsi
 si x>0 alors x:=x+1; print("x est strictement plus grand que 1");fsi
 si x>0 alors x:=x+1; print("x est strictement plus grand que 1"); sinon x:=x-1;print("x est plus petit ou égal à -1");fsi 

# pour
1 Boucle pour (pour...de ...jusque... [pas...] faire...fpour).
2 Loop pour (pour...de ...jusque... [pas...] faire...fpour).
3 Bucle pour (pour...de ...jusque...[ pas...] faire...fpour).
0 
-1 for
-2 de
-3 jusque
-4 pas
 pour de jusque faire fpour;
 S:=0;pour n de 1jusque 4 faire S:=S+n;fpour;
 pour n de 1 jusque 4 faire  disque(10*n);saute(10*n);fpour;
 pour n de 4 jusque 1 pas -1 faire disque(10*n);saute(10*n);fpour;
 S:=0;pour n de 4 jusque 1 pas -1 faire S:=S+n;fpour;
 
# de from
1 Utilisé dans une boucle pour (pour...de ...jusque... [pas...] faire...fpour).
2 Used in a loop for (for...from ...to... [step...] do...od).
3 En una bucle pour o for (pour...de ...jusque...[ pas...] faire...fpour).
0 
-1 for
-2 pour
-3 jusque
-4 to
 pour de jusque [pas] faire fpour;
  S:=0;pour n de 1jusque 4 faire S:=S+n;fpour;
  S:=0;pour n de 4 jusque 1 pas -1 faire S:=S+n;fpour ;

# jusque to
1 Utilisé dans une boucle pour (pour...de ...jusque... [pas...] faire...fpour).
2 Used in a loop for (for...from ...to... [step...] do...od).
3 En una bucle pour o for (pour...de ...jusque...[ pas...] faire...fpour).
0 
-1 for
-2 pour
-3 de
-4 from
 pour de jusque  [pas] faire fpour;
  S:=0;pour n de 1jusque 4 faire S:=S+n;fpour;
  S:=0;pour n de 4 jusque 1 pas -1 faire S:=S+n;fpour;

# tantque
1 Boucle tantque (tantque...faire...ftantque).
2 Loop tantque (tantque...faire...ftantque).
3 Bucle tantque (tantque...faire...ftantque).
0 
-1 while
-2 pour
 tantque faire ftantque
 n:=1;tantque n<5 faire triangle_plein(10*n);saute(10*n);n:=n+1;ftantque 
 n:=4;tantque n>0 faire triangle_plein(10*n);saute(10*n);n:=n-1;ftantque
 pgcd(a,b):={local r;tantque (b!=0) r:=irem(a,b);a:=b;b:=r;ftantque;return a};
 quoreste(a,b):={local q:=0;tantque (a>=b) a:=a-b;q:=q+1;ftantque; return q,a};

# do faire
1 Mot clé utilisé dans une boucle.
2 Key word used in a loop. 
3 En una bucle. 
0 
-1 tantque
-2 pour
-3 repeat
 faire ffaire 
 n:=1;do n:=n+1; if (n>15) break; n:=2*n;od;
 n:=1;tantque n<5 faire triangle_plein(10*n);saute(10*n);n:=n+1;ftantque 
 pour n de 1 jusque 4 faire triangle_plein(10*n);saute(10*n);fpour

# return
1 Instruction qui fait sortir d'une fonction en renvoyant sa valeur
2 Instruction that interrupts a function and returns its value
3 Instrucción que interrumpe una función y devuelve su valor
0 Expr
-1 break
 zeroinl(l):={for (k:=0;k<size(l);k++){if (l[k]==0) return(1);} return(0);} 
 zerodansl(l):={pour k de 0 jusque size(l)-1 faire si l[k]==0 alors return(1);fsi; fpour; return(0);}

# dessine_tortue
1 Fait le dessin du triangle rempli représentant la tortue.
2 Draws the full triangle representing the turtle.
3 
0 NULL
-1 crayon
 dessine_tortue
dessine_tortue()

# avance
1 La tortue avance de n pas (par défaut n=10).
2 The turtle takes n steps forward (by default n=10).
3 
0 NULL or Real(n)
-1 recule
-2 saute
 avance
 avance 30
avance(30)


# recule
1 La tortue recule de n pas (par défaut n=10).
2 The turtle takes n steps back (by default n=10).
3 
0 NULL or Real(n)
-1 avance
-2 saute
 recule
 recule 30
recule(30)

# saute
1 La tortue saute (avance sans laisser de traces) de n pas (par défaut n=10).
2 The turtle takes n steps forward without traces (by default n=10).
3 
0 NULL or Real(n)
-1 avance
-2 recule
 saute
 saute 30
saute(30)


# pas_de_cote
1 La tortue fait n pas de coté à gauchee sans laisser de traces (par défaut n=10).
2 The turtle does n side-steps on the right without trace (by default n=10).
3 
0 NULL or Real(n)
-1 saute
-2 tourne_droite
-3 tourne_gauche
pas_de_cote
 pas_de_cote 30
pas_de_cote(30)


# tourne_droite
1 La tortue tourne à droite de n degrés (par défaut n=90).
2 The turtle turns right of n degrees (by default n=90).
3 
0 NULL or Real(n)
-1 tourne_gauche
-2 pas_de_cote
 tourne_droite
 tourne_droite 60
tourne_droite(60)


# tourne_gauche
1  La tortue tourne à gauche de n degrés (par défaut n=90).
2 The turtle turns left of n degrees (by defaults n=90).
3 
0 NULL or Real(n)
-1 tourne_droite
 tourne_gauche
 tourne_gauche 60
tourne_gauche(60)


# leve_crayon
1 Lève le crayon pour que la tortue bouge sans laisser de traces.
2 Puts the pencil up so that the turtle moves without traces.
3 
0 NULL
-1 baisse_crayon
-2 crayon
 leve_crayon
leve_crayon()

# baisse_crayon
1 Baisse le crayon pour que la tortue bouge en laissant des traces.
2 Puts the pencil down so that the turye move with traces.
3 
0 NULL
-1 leve_crayon
-2 crayon
 baisse_crayon
baisse_crayon()

# crayon
1 Change la couleur du crayon (sans paramètre renvoie la couleur courante).
2 Changes the color of the pencil (without parameter returns the current color).
3 
0 Color
-1 leve_crayon
-2 baisse_crayon
 crayon
 crayon vert
crayon(rouge)
crayon(5)
crayon(gomme)


# position
1 Retoune la position de la tortue en pixels ou place la tortue selon l'argument sans changer son cap.
2 Returns the turtle position in pixels or puts the turtle at the position given by the argument with the same cap.
3 
0 NULL or LstCoord
-1 cap
-2 initialise
 position
position()
position(50,70)
position([50,70])

# cap
1 Retoune le cap de la tortue en degrés ou tourne la tortue selon l'argument.
2 Returns the turtle cap in degrees or turns the turtle with the cap given by the argument.
3 
0 NULL or Real
-1 position 
-2 initialise
 cap
cap()

# vers
1 Dirige la tortue en direction du point donné en argument.
2 Puts the turtle in the direction of the point given by the argument.
3 
0 Real,Real
-1 position 
-2 initialise
vers(0,0)
vers(150,200)
vers([150,200])

# rond
1 Dessine un cercle (resp un arc) de rayon r (resp et d'angle (0,a) ou (a,b)), tangent à la position de la tortue.
2 Draws a circle (resp a arc) with radius r (resp and of angle (0,a) ou (a,b)), tangent at the turtle position.
3 
0 Real(r),[Real(a)],[Real(b)]
-1 disque
 rond 30
rond(40)
rond(40,90)
rond(40,10,100)

# disque
1 Dessine un disque de rayon r (resp un secteur d'angle (0,a) ou (a,b)), tangent à la position de la tortue.
2 Draws a disk with radius r (resp a sector of angle (0,a) ou (a,b)), tangent at the turtle position.
3 
0 Real(r),[Real(a)],[Real(b)]
-1 rond
 disque 30
disque(40)
disque(40,90)
disque(40,10,100)

# disque_centre
1 Dessine un disque de rayon r (resp un secteur d'angle (0,a) ou (a,b)) de centre la position de la tortue.
2 Draws a disk with radius r (resp a sector of angle (0,a) ou (a,b)) with center the turtle position.
3 
0 Real(r),[Real(a)],[Real(b)]
-1 rond
 disque_centre 30
disque_centre(40)
disque_centre(40,90)
disque_centre(40,10,100)

# rectangle_plein
1 Dessine un rectangle (resp un carré) plein direct de cotés a,b (resp a) à partir de la position de la tortue et sur la gauche (par défaut b=a).
2 Draws a full direct rectangle (resp square) with sides a,b (resp a) from the turtle position and on the left (by default b=a).
3 
0 Real(a),[Real(b)]
-1 triangle_plein
rectangle_plein(20)
rectangle_plein(20,40)

# triangle_plein
1 Dessine un triangle plein direct de cotés a,b et d'angle t, à partir de la position de la tortue (par défaut t=90 ou (b=a et t=60)).
2 Draws a full direct triangle with sides a,b and with angle t, from the turtle position (by default t=90 or (b=a and t=60)).
3 
0 Real(a),[Real(b)],[Real(t)]
-1 rectangle_plein
triangle_plein(30)
triangle_plein(30,40)
triangle_plein(30,40,60)

# polygone_rempli
1 L'argument est un entier <-1 qui indique le nombre de positions précédentes de la tortue qui forment un polygone et créé ce polygone rempli.
2 The argument is an integer <-1 which gives the number of previous turtle position drawing a polygon and created this full polygon.
3 
0 Intg(n)
-1 
 repete(4,avance 40,tourne_droite);polygone_rempli -8
 repete(3,avance 40,tourne_droite 120);polygone_rempli -6
 repete(3,avance 40,avance 40,tourne_droite 120);polygone_rempli -9

# repete
1 Instruction permettant de faire k fois les mêmes commandes.
2 Instruction doing k times the same commands.
3 
0 Intg,SeqCmds
-1 polygone_rempli
 repete 3,avance 40,tourne_droite 120
 repete 3,avance(30),tourne_droite(120)
 repete 4,rectangle_plein(20,40),tourne_droite
repete(3,avance 20,tourne_droite 120)
repete(4,rectangle_plein(20,40),tourne_droite)

# debut_enregistrement
1 Marque le début de l'enregistrement des commandes composant le dessin de nom donné en argument.
2 Marks the begining of the recording of the commands making up the drawing whose name is the argument.
3 
0 Var(nom_du_dessin)
-1 fin_enregistrement
debut_enregistrement(maison)
debut_enregistrement(arbre)

# fin_enregistrement
1 Marque la fin de l'enregistrement des commandes et sauve ces commandes dans le fichier de nom donné en argument.
2 Marks the end of the recording of the commands and save these commands in the fich whose name is the argument.
3 
0 Str(nom_de_fichier)
-1 debut_enregistrement
fin_enregistrement("maison.tor")
fin_enregistrement("arbre.tor")

# cache_tortue
1 Cache la tortue.
2 Hides the turtle.
3 
0 NULL
-1 montre_tortue
 cache_tortue
cache_tortue()

# montre_tortue
1 Montre la tortue.
2 Shows the turtle.
3 
0 NULL
-1 cache_tortue
 montre_tortue
montre_tortue()

# envelope
1 Renvoie l'enveloppe des courbes d'équation expr=0, lorsque t varie.
2 Returns the envelope of the curves with equation expr=0, when t move.
3 
0 Expr(expr),Var(t)||[x,y,t]
-1 tangent
-2 locus
envelope(y+x*tan(t)-2*sin(t),t)
envelope(v+u*tan(t)-3*sin(t),[u,v,t])

# powerpc
1 Renvoie le nombre réel d^2-R^2 (d=distance du point au centre,R=rayon).
2 Returns the real number d^2-R^2 (d=distance between point and center,R=radius) .
3 Devuelve lo número reale d^2-R^2 (d=distancia entre punto y centre,R=radio).
0 Cercle,Pnt or Cplx
-1 radical_axis
powerpc(circle(0,1+i),3+i)
powerpc(circle(0,point(1+i)),3+i)

# cross_ratio
1 Renvoie le nombre complexe égal à ((c-a)/(c-b))/((d-a)/(d-b)).
2 Returns the complex number equal to ((c-a)/(c-b))/((d-a)/(d-b)).
3 Devuelve lo número complejo igual al ((c-a)/(c-b))/((d-a)/(d-b)).
0 Pnt or Cplx(a),Pnt or Cplx(b),Pnt or Cplx(c),Pnt or Cplx(d)
-1 harmonic_conjugate
-2 is_conjugate
cross_ratio(i,2+i,3/2+i,3+i)
cross_ratio(0,1+i,1,i)
cross_ratio(0,1,2,3)

# division_point
1 Renvoie le point M d'affixe z tel que (z-a)=k*(z-b) (MA=k*MB).
2 Returns the point M such that (z-a)=k*(z-b) and z=affix of M (MA=k*MB).
3 Devuelve lo puncto M  tal que (z-a)=k*(z-b) y z=afijo de M (MA=k*MB).
0 Pnt or Cplx(a),Pnt or Cplx(b),Cplx(k)
-1 harmonic_conjugate
-2 is_conjugate 
division_point(i,2+i,3+i)
division_point(i,2+i,3)

# radical_axis
1 Renvoie la droite des points de même puissance par rapport aux 2 cercles.
2 Returns the line of points with same powerpc with respect to the 2 circles.
3 Devuelve la recta de punctos con el mismo powerpc respecto al 2 circunferencias.
0 Crcle,Crcle
-1 powerpc
radical_axis(circle(0,1+i),circle(1,1+i))
radical_axis(circle(0,point(1+i)),circle(1,point(1+i)))

# pole
1 Renvoie le point ayant la droite comme polaire par rapport au cercle.
2 Returns the point having the line as polar with respect to the circle .
3 Devuelve el puncto A con la recta =polar(C,A) respecto al circunferencia C.
0 Crcle,Line
-1 polar
-2 is_conjugate
pole(circle(0,1),line(i,1))
pole(circle(0,1),line((1+i),2))

# polar
1 Renvoie la droite des points conjugués de A par rapport au cercle.
2 Returns the line of the conjugated points of A with respect to the circle.
3 Devuelve la recta de punctos conjugado de A respecto al circunferencia.
0 Crcle,Pnt or Cplxe(A)
-1 pole
-2 is_conjugate
polar(circle(0,1),point(1+i)/2)
polar(circle(0,1),point(1+i))

# reciprocation
1 Renvoie la liste en remplacant un point (resp une droite) par sa polaire (resp son pole), par rapport au cercle C.
2 Returns the list where a point (resp a line) are replaced with its polar (resp pole) with respect to the circle C.
3 Devuelve la lista  reemplaza el puncto (o recta) en la polar (o pole) respecto al circunferencia C.
0 Crcle,Lst(Pnt,Line)
-1 poles
-2 polar
reciprocation(circle(0,1),[point((1+i)/2), line(1,-1+i)])
reciprocation(circle(0,1),[line(1+i,2),point(1+i*2)])

# harmonic_conjugate
1 Renvoie le conjugué harmonique de 3 points alignés ou de 3 droites parallèles ou concourantes, ou la polaire d'un point par rapport à 2 droites.
2 Returns the harmonic conjugate of 3 points or of 3 parallel or concurrent lines or the line of conjugates of a point in respect to 2 lines.
3 Devuelve el punto (o recta) D conjugar armonica respecto al 2 punctos (o 2 rectas).
0 Line or Pnt,Line or Pnt,Line or Pnt
-1 is_harmonic
-2 harmonic_division
harmonic_conjugate(0,2,3/2)
harmonic_conjugate(0,1+i,2+2*i)
harmonic_conjugate(line(0,1+i),line(0,3+i),line(0,i))
harmonic_conjugate(line(0,1+i),line(0,3+i),point(3/2+i))

# harmonic_division
1 Renvoie les 4 points (resp droites) et affecte le dernier argument, pour que les 4 points (resp droites) forment un division harmonique.
2 Returns the 4 points (resp lines) and affects the last argument, such as the 4 points (resp lines) are in a harmonic division.
3 Devuelve 4 puntos (rectas) y  guarda en el último argumento, tal que los 4 puntos (rectas) están (A,B,C,D)=-1.
0 Pnt or Line,Pnt or Line,Pnt or Line,Var
-1 harmonic_conjugate
-2 is_harmonic
harmonic_division(0,2,3/2,D)
harmonic_division(0,1+i,2+2*i,D)
harmonic_division(line(i,0),line(i,1+i),line(i,3+2*i),D)
harmonic_division(line(0,1+i),line(0,3+i),line(0,i),D)

# is_conjugate
1 Renvoie 1 si les  3 (resp 4) arguments sont un conjugués par rapport à un cercle (resp 2 droites) et 0 sinon.
2 Returns 1 if the 3 (resp 4) arguments are conjugated toward a circle (resp 2 lines) and 0 otherwise.
3 Devuelve 1 si los 3 (resp 4) argumentos son conjugar armonica respecto al circunferencia (resp 2 rectas) y 0 si no.
0 Crcle||Line,Pnt||Line,Pnt||Line,[Pnt||Line]
-1 harmonic_conjugate
-2 pole
-3 polar
is_conjugate(circle(0,1+i),point(1-i),point(3+i))
is_conjugate(circle(0,1),point((1+i)/2),line(1+i,2))
is_conjugate(circle(0,1),line(1+i,2),point((1+i)/2))
is_conjugate(circle(0,1),line(1+i,2),line((1+i)/2,0))
is_conjugate(point(1+i),point(3+i),point(i),point(3/2+i))
is_conjugate(line(0,1+i),line(2,3+i),line(3,4+i),line(3/2,(5/2+i))
is_conjugate(line(0,1+i),line(0,3+i),line(0,i),line(0,3/2+i))
is_conjugate(line(0,1+i),line(0,3+i),line(0,i),point(3/2+i))
is_conjugate(line(0,1+i),line(0,3+i),point(3/2+i),line(0,i))
is_conjugate(line(0,1+i),line(0,3+i),point(i),point(3/2+i))

# is_harmonic
1 Renvoie 1 si les 4 points forment un division harmonique et 0 sinon.
2 Returns 1 if the 4 points are in a harmonic division and 0 otherwise.
3 Devuelve 1 si los 4 puntos son conjugar armonica y 0 si no.
0 Pnt or Cplx,Pnt or Cplx,Pnt or Cplx,Pnt or Cplx
-1 is_conjugate
is_harmonic(0,2,3/2,3)
is_harmonic(0,1+i,1,i)

# is_harmonic_circle_bundle
1 Renvoie 1 si les cercles forment un faisceau, 2 si ils sont concentriques, 3 si ils sont confondus et 0 sinon.
2 Returns 1 if the circles built a faisceau, 2 if they have the same center, 3 if they are the same and 0 otherwise.
3 Devuelve 1 si los círculos forman una faisceau, 2 si los círculos mismo centro, 3 si los círculos=  y 0 si no.
0 Lst(Crcle)
-1 is_harmonic_line_bundle
is_harmonic_circle_bundle([circle(0,i),circle(4,i),circle(0,point(1/2))])
is_harmonic_circle_bundle([circle(0,1+i),circle(2,1+i),circle(1+i,point(1-i))])

# is_harmonic_line_bundle
1 Renvoie 1 si les droites ont un point commun, 2 si elles sont parallèles, 3 si elles sont confondues et 0 sinon.
2 Returns 1 if the lines have a common point, 2 if they are parallels, 3 if they are the same and 0 otherwise.
3 Devuelve 1 si la intersección de rectas=1 punto, 2 si los recta son paralelas , 3 si los recta= son y 0 si no.
0 Lst(Line)
-1 is_harmonic_circle_bundle
is_harmonic_line_bundle([line(0,1+i),line(0,2+i),line(0,1),line(0,3+i)])
is_harmonic_line_bundle([line(0,1+i),line(2,3+i),line(3,4+i),line(-1,i)])

# is_orthogonal
1 Renvoie 1 si 2 cercles sont orthogonaux ou si 2 droites sont orthogonales et 0 sinon.
2 Returns 1 if 2 circles are orthogonal or if 2 lines are orthogonal and 0 otherwise.
3 Devuelve 1 si dos líneas o 2 círculos son perpendiculares y 0 si no.
0 Line||Crcle,Line||Crcle
-1 is_parallel
-2 is_perpendicular
is_orthogonal(line(0,1+i),line(1,i))
is_orthogonal(circle(0,1+i),circle(2,1+i))
is_orthogonal(line([2,3,-2],[-1,-1,-1]),line([1,0,0],[1,2,8]))

# is_isoceles
1 Renvoie 1,2 ou 3 si les 3 points (ou l'objet) forment un triangle isocèle de sommet 1,2 ou 3, renvoie 4 si les 3 points (ou l'objet) forment un triangle équilatéral et 0 sinon.
2 Returns 1,2 or3 if the 3 points (or the object) built an isoceles triangle with vertices 1,2,3, returns 4 if the 3 points (or the object) built an equilateral triangle and 0 otherwise.
3 Devuelve 1,2 o 3 si los 3 puntos (o lo objeto) están triángulo isósceles cuyo vértice 1,2,3, devuelve 4 si los 3 puntos (o lo objeto) están triángulo equilatero y 0 si no.
0 Pnt or Cplx,Pnt or Cplx,Pnt or Cplx
-1 is_equilateral
-2 is__right_triangle
is_isoceles(0,i,1+i)
is_isoceles(point(0),point(1+i),point(2,2))
is_isoceles(triangle(0,i,1+i))

# is_equilateral
1 Renvoie 1 si les 3 points (ou l'objet) forment un triangle équilateral et 0 sinon.
2 Returns 1 if the 3 points (or the object) built an equilateral triangle and 0 otherwise.
3 Devuelve 1 si los 3 puntos (o lo objeto) están triángulo equilatero y 0 si no.
0 Pnt||Cplx,Pnt||Cplx,Pnt||Cplx
-1 is_isoceles
-2 is_rectangle
is_equilateral(0,2,1+i*sqrt(3))
is_equilateral(point(0),point(1+i),point(2,2))
is_equilateral(triangle(0,2,1+i*sqrt(3)))

# is_rectangle
1 Renvoie 1,2 ou 3 si les 3 points (ou l'objet) forment un triangle rectangle de sommet 1,2 ou 3 et 0 sinon [ou 1 si les 4 points (ou l'objet) forment un rectangle, 2 si les 4 points (ou l'objet) forment un carré et 0 sinon].
2 Returns 1,2 or 3 if the 3 points (or the object) built an rectangular triangle with vertex 1,2,3 and 0 otherwise [or 1 if the 4 points (or the object) built a rectangle, 2 if the 4 points (or the object) built a square and 0 otherwise].
3 Devuelve 1,2,3 si los 3 puntos (o lo objeto) están triángulo rectángulo en cuyo vértice 1,2 o 3 y 0 si no [1 si los 4 puntos (o lo objeto) están rectángulo, 2 si los 4 puntos (o lo objeto) están una cuadrado y 0 si no].
0 Pnt||Cplx,Pnt||Cplx,Pnt||Cplx,[Pnt||Cplx]
-1 is_equilateral
-2 is_isoceles
-3 is_parallelogram
-4 is_rhombus
-5 is_square
is_rectangle(0,i,1+i)
is_rectangle(point(0),point(1+i),point(2,2))
is_rectangle(triangle(0,i,1+i))
is_rectangle(point(0),point(2,2),point(1,3),point(-1,1))
is_rectangle(rectangle(point(0),point(2,2),1/2))
is_rectangle(sommets(rectangle(point(0),point(2,2),1/2)))

# is_square
1 Renvoie 1 si les 4 points (ou l'objet) forment un carré et 0 sinon.
2 Returns 1 if the 4 points built a square and 0 otherwise.
3 Devuelve 1 si los 4 puntos (o lo objeto) forman una cuadrado y 0 si no.
0 Pnt,Pnt,Pnt,Pnt
-1 est_rectangle
-2 is_parallelogram
-3 is_rhombus
is_square(0,i,1+i,1)
is_square(1,-1,i,-i)
is_square(sommets(square(0,i,C,D)))

# is_parallelogram
1 Renvoie 1,2,3 ou 4 si les 4 points (ou l'objet) forment un parallélogramme, (2 pour un losange, 3 pour un rectangle et 4 pour un carré) et 0 sinon.
2 Returns 1,2,3 or 4 if the 4 points (or the object) built a parallelogram, (2 for a rhomb, 3 for a rectangle, 4 for a square) and 0 otherwise.
3 Devuelve 1,2,3 o 4 si los 4 puntos (o lo objeto) forman una paralelograma (2 por una rombo,3 por una rectángulo, 4 por una cuadrado) y 0 si no.
0 Pnt or Cplx,Pnt or Cplx,Pnt or Cplx,Pnt or Cplx
-1 est_rectangle
-2 is_square
-3 is_rhombus
is_parallelogram(0,i,1+i,1)
is_parallelogram(1,-1,i,-i)
is_parallelogram(sommets(parallelogram(1,-1,-i,C)))

# is_rhombus
1 Renvoie 1 ou 2 si les 4 points (ou l'objet) forment un losange (2 pour un carré) et 0 sinon.
2 Returns 1 or 2 if the 4 points (or the object) built a rhombus (2 for a square) and 0 otherwise.
3 Devuelve 1 o 2 si los 4 puntos (o lo objeto) forman una rombo (2 pr una cuadrado) y 0 si no.
0 Pnt or Cplx,Pnt or Cplx,Pnt or Cplx,Pnt or Cplx
-1 est_rectangle
-2 is_parallelogram
-3 is_square
is_rhombus(0,i,1+i,1)
is_rhombus(1,-1,i,-i)
is_rhombus(sommets(rhombus(1,-1,pi/4,C,D)))

# coordinates
1 Renvoie la liste (resp matrice) de l'abscisse et de l'ordonnée du point ou du vecteur (resp des points ou des vecteurs).
2 Returns the list (resp matrix) of the abscissa and of the ordinate of a point or a vector (resp of points or vectors).
3 Devuelve la lista de la abcisa y de la ordenada de un punto o de un vector.
0 Pnt or Cplx or Vect
-1 abscissa
-2 ordinate
-3 cote
-4 vecteur
coordinates(point(1+2*i))
coordinates(point(i),point(1+2*i))
coordinates(vecteur(point(i),point(1+2*i)))
coordinates(point(1+2*i)-point(i))
coordinates(-1-i)
coordinates(point(1,2,3))
coordinates(vecteur([1,2,3],[4,5,6]))

# false FALSE 
1 booléen valant faux ou 0
2 boolean equal to false or 0
3 
0 
-1 true
 a:=false

# true TRUE
1 booléen valant vrai ou 1
2 boolean equal to true or 1
3 
0 
-1 false
 a:=true

# or || ou
1 opérateur booléen infixé (ou)
2 infixed boolean operator (or)
3 (o)
0 Expr, Expr
-1 and
-2 not
-3 xor
 (1==2) or (2>1)

# and && et
1 opérateur booléen infixé (et)
2 infixed boolean operator (and)
3 
0 Expr, Expr
-1 or
-2 not
-3 xor
 (1==2) and (2>1)

# end end_for fpour end_while ftantque end_if fi fsi od ffaire 
1 iFn de bloc.
2 Bloc end.
3 Final de bloque.
0 
-1 begin
-2 bloc
-3 {} 
 if (2>1) begin print("ifactor(154)=",ifactor(154));ifactor(154);end

# bisection_solver brent_solver falsepos_solver newton_solver secant_solver steffenson_solver
1 Argument de fsolve indiquant la méthode pour résoudre numériquement une équation.
2 Argument for fsolve giving the method for solving an numerical equation.
3 Argumento para fsolve da la método para el resolución numérica de una ecuación.
0 
-1 fsolve
 fsolve(cos(x)=x,x,0,bisection_solver)
 fsolve(cos(x)=x,x,0,brent_solver)
 fsolve(cos(x)=x,x,0,falsepos_solver)
 fsolve(cos(x)=x,x,0,newton_solver)
 fsolve(cos(x)=x,x,0,secant_solver)
 fsolve(cos(x)=x,x,0,steffenson_solver)

# dnewton_solver hybrid_solver hybrids_solver hybridj_solver hybridsj_solver newtonj_solver 
1 Argument de fsolve indiquant la méthode pour résoudre numériquement un système d'équations.
2 Argument for fsolve giving the method for solving a system of numerical equations.
3 Argumento para fsolve, da la método para el resolución numérica de un sistema de ecuaciones.
0 
-1 fsolve
 fsolve([x^2+y-2,x+y^2-2],[x,y],[2,2],dnewton_solver)
 fsolve([x^2+y-2,x+y^2-2],[x,y],[2,2],hybrid_solver)
 fsolve([x^2+y-2,x+y^2-2],[x,y],[2,2],hybrids_solver)
 fsolve([x^2+y-2,x+y^2-2],[x,y],[2,2],hybridj_solver)
 fsolve([x^2+y-2,x+y^2-2],[x,y],[2,2],hybridsj_solver)
 fsolve([x^2+y-2,x+y^2-2],[x,y],[2,2],newtonj_solver)

# _cm
1 centimètre
2 Centimetre
3 
0 
 5_cm
 mksa(_cm)

# _mm
1 millimètre
2 Millimetre
3 
0 
 5_mm
 mksa(_mm)

# _km
1 kilomètre
2 Kilometre
3 
0 
 5_km
 mksa(_km)

# _m^2
1 mètre carré
2 Square metre
3 
0 
 5_m^2
 mksa(_m^2)

# _m^3
1 mètre cube
2 Cubic metre
3 
0 
 5_m^3
 mksa(_m^3)

# _cm^2
1 centimètre carré
2 Square centimetre
3 
0 
 5_cm^2
 mksa(_cm^2)

# _cm^3
1 centimètre cube
2 Cubic centimetre
3 
0 
 5_cm^3
 mksa(_cm^3)

# _km^2
1 kilomètre carré
2 Square kilometre
3 
0 
 5_km^2
 mksa(_km^2)

# _yd^2
1 yard carré
2 Square yard
3 
0 
 5_yd^2
 mksa(_yd^2)

# _yd^3
1 yard cube
2 Cubic yard
3 
0 
 5_yd^3
 mksa(_yd^3)

# _ft^2
1 foot carré
2 Square foot
3 
0 
 5_ft^2
 mksa(_ft^2)

# _ft^3
1 foot cube
2 Cubic foot
3 
0 
 5_ft^3
 mksa(_ft^3)

# _in^2
1 inch carré
2 Square inch
3 
0 
 5_in^2
 mksa(_in^2)

# _in^3
1 inch cube
2 Cubic inch
3 
0 
 5_in^3
 mksa(_in^3)

# _mi^2
1 International mile carré
2 Square international mile
3 
0 
 5_mi^2
 mksa(_mi^2)

# _miUS^2
1 US statue mile carré
2 Square US statue mile
3 
0 
 5_miUS^2
 mksa(_miUS^2)

# _ml
1 millilitre
2 millilitre
3 
0 
 5_ml
 mksa(_ml)

# _mn
1 minute
2 Minute
3 
0 
 5_mn
 mksa(_mn)

# _min
1 minute
2 Minute
3 
0 
 5_min
 mksa(_min)

# _(m/s)
1 mètre par seconde
2 metre per second
3 
0 
 5_(m/s)
 mksa(_(m/s))

# _(cm/s)
1 centimètre par seconde
2 centimetre per second
3 
0 
 5_(cm/s)
 mksa(_(cm/s))

# _(ft/s)
1 foot par seconde
2 foot per second
3 
0 
 5_(ft/s)
 mksa(_(ft/s))

# _(m/s^2)
1 mètre par seconde au carré
2 metre per square second
3 
0 
 5_(m/s^2)
 mksa(_(m/s^2))

# _Wh
1 wattheure
2 Watt-hour
3 
0 
 5_Wh
 mksa(_Wh)

# _kWh
1 kilowattheure
2 Kilowatt-hour
3 
0 
 5_kWh
 mksa(_kWh)

# _Kcal
1 kilocalorie
2 Kilocalorie
3 
0 
 5_Kcal
 mksa(_Kcal)

# _MeV
1 mégaélectronvolt
2 Megaelectron volt
3 
0 
 5_MeV
 mksa(_MeV)

# _ft*lb
1 foot par pound
2 foot per pound
3 
0 
 5_ft*lb
 mksa(_ft*lb)

# _tep
1 tonne d'équivalent pétrole
2 Metric ton equivalent to petrol
3 
0 
 5_tep
 mksa(_tep)

# _lep
1 litre d'équivalent pétrole
2 Liter equivalent to petrol
3 
0 
 5_lep
 mksa(_lep)

# _bblep
1 baril d'équivalent pétrole
2 Barrel equivalent to petrol
3 
0 
 5_bblep
 mksa(_bblep)

# _MW
1 mégawatt
2 Megawatt
3 
0 
 5_MW
 mksa(_MW)

# _degreeF
1 degré Fahrenheit
2 Degree Fahrenheit
3 
0 
 5_degreeF
 mksa(_degreeF)

# _deg
1 degré (angle)
2 Degree (angle)
3 
0 
 5_deg
 mksa(_deg)

# _Rankine
1 degré Rankine
2 Degree Rankine
3 
0 
 5_Rankine
 mksa(_Rankine)

# _MHz
1 mégahertz
2 Megahertz
3 
0 
 5_MHz
 mksa(_MHz)

# _tec
1 tonne d'équivalent charbon
2 Metric ton equivalent to coal
3 
0 
 5_tec
 mksa(_tec)

# _tr
1 tour=2*pi _rad
2 tour=2*pi _rad
3 
0 
 5_tr
 mksa(_tr)

# _tex
1 tex=10^-6 _(kg/m)
2 tex=10^-6 _(kg/m)
3 
0 
 5_tex
 mksa(_tex)

# _(rad/s)
1 rarian par seconde
2 Radian per second
3 
0 
 5_(rad/s)
 mksa(_(rad/s))

# _(tr/min)
1 tour par minute
2 Tour per minute
3 
0 
 5_(tr/min)
 mksa(_(tr/min))

# _(tr/s)
1 tour par seconde
2 Tour per second
3 
0 
 5_(tr/s)
 mksa(_(tr/s))

# _Gal
1 gal=0.01_(m/s^2)
2 Gal=0.01_(m/s^2)
3 
0 
 5_Gal
 mksa(_Gal)

# _(rad/s^2)
1 radian par seconde au carré
2 Radian per square second
3 
0 
 5_(rad/s^2)
 mksa(_(rad/s^2))

# area
1 aire algébrique d'un polygone étoilé (par exemple triangle, carré, ...)
2 algebrac area of a (star-)polygon (e.g. triangle, square, ...)
3
0 Polygone
-1 polygon
area(triangle(0,1,i))
area(square(0,2))
area(0,1,i)

# _NA_
1 Nombre d'Avogadro
2 Avogadro's number
3 
0 
 mksa(_NA_)

# _k_
1 Constante de Boltzmann
2 Boltzmann constant 
3 
0 
 mksa(_k_)

# _Vm_
1 Volume molaire
2 Molar volume
3 
0 
 mksa(_Vm_)

# _R_
1 Constante universelle des gaz
2 Universal gas constant
3 
0 
 mksa(_R_)

# _StdT_
1 Température standard
2 Standard temperature
3 
0 
 mksa(_StdT_)

# _StdP_
1 Pression standard
2 Standard pressure
3 
0 
 mksa(_StdP_)

# _sigma_
1 Constante de Stefan-Boltzmann
2 Stefan-Boltzmann constant
3 
0 
 mksa(_sigma_)

# _c_
1 Vitesse de la lumière
2 Speed of light in vacuum
3 
0 
 mksa(_c_)

# _epsilon0_
1 Permitivité du vide
2 Permitivity of vacuum
3 
0 
 mksa(_epsilon0_)

# _mu0_
1 Perméabilité du vide
2 Permeability of vacuum
3 
0 
 mksa(_mu0_)

# _g_
1 Accélération de la gravité
2 Acceleration of gravity
3 
0 
 mksa(_g_)

# _G_
1 Constante gravitationnelle
2 Gravitational constant 
3 
0 
 mksa(_G_)

# _h_
1 Constante de Planck
2 Planck's constant
3 
0 
 mksa(_h_)

# _hbar_
1 Constante de Dirac
2 Dirac's constant
3 
0 
 mksa(_hbar_)

# _q_
1 Charge de l'électron
2 Electron charge
3 
0 
 mksa(_q_)

# _me_
1 Masse élémentaire de l'électron
2 Electron rest mass
3 
0 
 mksa(_me_)

# _qme_
1 Rapport q/me (charge/masse de l'électron)
2 q/me
3 
0 
 mksa(_qme_)

# _mp_
1 Masse élémentaire du proton
2 Proton rest mass
3 
0 
 mksa(_mp_)

# _mpme_
1 Rapport mp/me (masse du proton/masse de l'électron)
2 mp/me
3 
0 
 mksa(_mpme_)

# _alpha_
1 Constante de structure fine
2 Fine structure constant
3 
0 
 mksa(_alpha_)

# _phi_
1 Quantum de flux magnétique
2 Magnetic flux quantum
3 
0 
 mksa(_phi_)

# _F_
1 Constante de Faraday
2 Faraday constant
3 
0 
 mksa(_F_)

# _Rinfinity_
1 Constante de Rydberg
2 Rydberg constant
3 
0 
 mksa(_Rinfinity_)

# _a0_
1 Rayon de Bohr
2 Bohr radius
3  
0 
 mksa(_a0_)

# _muB_
1 Magnéton de Bohr
2 Bohr magneton
3 
0 
 mksa(_muB_)

# _muN_
1 Magnéton nucléaire
2 Nuclear magneton
3 
0 
 mksa(_muN_)

# _lambda0_
1 Longueur d'onde du photon (ch/e)
2 Photon wavelength (ch/e)
3  
0 
 mksa(_lambda0_)

# _f0_
1 Fréquence du photon (e/h)
2 Photon frequency (e/h)
3  
0 
 mksa(_f0_)

# _lambdac_
1 Longueur d'onde du Compton
2 Compton wavelength
3  
0 
 mksa(_lambdac_)

# _rad_
1 1 radian
2 1 radian
3  
0 
 mksa(_rad_)

# _twopi_
1 2*pi radians
2 2*pi radians
3  
0 
 mksa(_twopi_)

# _angl_
1 Angle de 180 degrés
2 Angle=180 degrees
3  
0 
 mksa(_angl_)

# _c3_
1 Constante de la loi de répartition de Wien
2 Wien displacement constant
3  
0 
 mksa(_c3_)

# _kq_
1 k/q (Boltzmann/charge de l'électron)
2 k/q 
3  
0 
 mksa(_kq_)

# _epsilon0q_
1 epsilon0/q (permitivité /charge de l'électron)
2 epsilon0/q
3  
0 
 mksa(_epsilon0q_)

# _qepsilon0_
1 q*epsilon0 (charge de l'électron*permitivité)
2 q*epsilon0
3  
0 
 mksa(_qepsilon0_)

# _epsilonsi_
1 Constante diélectrique du silicium
2 Dielectric constant
3  
0 
 mksa(_epsilonsi_)

# _epsilonox_
1 Constante diélectrique du bioxyde de silicium
2 SiO2 dielectric constante
3  
0 
 mksa(_epsilonox_)

# _I0_
1 Intensité de référence
2 Reference intensity
3  
0 
 5_I0_
 mksa(_I0_)

# _a
1 are
2 Are
3  
0 
 5_a
 mksa(_a)

# _A
1 ampère
2 Ampere
3  
0 
 5_A
 mksa(_A)

# _acre
1 acre
2 Acre
3  
0 
 5_acre
 mksa(_acre)

# _arcmin
1 arc-minute
2 Minute of arc
3  
0 
 5_arcmin
 mksa(_arcmin)

# _arcs
1 arc-seconde
2 Second of arc
3  
0 
 5_arcs
 mksa(_arcs)

# _atm
1 atmosphère normale
2 Atmosphere
3  
0 
 5_atm
 mksa(_atm)

# _au
1 unité astronomique
2 Astronomical unit
3  
0 
 5_au
 mksa(_au)

# _Angstrom
1 angstrom
2 Angstrom
3  
0 
 5_Angstrom
 mksa(_Angstrom)

# _b
1 barn
2 Barn
3  
0 
 5_b
 mksa(_b)

# _bar
1 bar
2 Bar
3  
0 
 5_bar
 mksa(_bar)

# _bbl
1 baril
2 Barrel
3  
0 
 5_bbl
 mksa(_bbl)

# _Bq
1 becquerel
2 Becquerel
3 becquerel
0  
 5_Bq
 mksa(_Bq)

# _Btu
1 Btu British thermal unit
2 Btu British thermal unit
3 Btu British thermal unit
0  
 5_Btu
 mksa(_Btu)

# _bu
1 bushel (boisseau britannique 1_bu=8_galUK)
2 Bushel (1_bu=8_galUK)
3 
0 
 5_bu
 mksa(_bu)

# _buUS
1 bushel  (boisseau américain)
2 US bushel 
3 
0 
 5_buUS
 mksa(_buUS)

 _C
1 coulomb
2 Coulomb
3 
0 
 5_C
 mksa(_C)

# _cal
1 calorie
2 Calorie
3 
0 
 5_cal
 mksa(_cal)

# _cd
1 candela
2 Candela
3 
0 
 5_cd
 mksa(_cd)

# _chain
1 chain
2 Chain
3 
0 
 5_chain
 mksa(_chain)

# _Ci
1 curie
2 Curie
3 
0 
 5_Ci
 mksa(_Ci)

# _ct
1 Carat métrique
2 Carat
3 
0 
 5_ct
 mksa(_ct)

# _cu
1 cup US
2 US cup
3 
0 
 5_cu
 mksa(_cu)

# _d
1 jour
2 Day
3 
0 
 5_d
 mksa(_d)

# _j
1 jour
2 Day
3 
0 
 5_j
 mksa(_j)

# _dB
1 décibel
2 Decibel
3 
0 
 5_dB
 mksa(_dB)

# _dyn
1 dyne
2 Dyne
3 
0 
 5_dyn
 mksa(_dyn)

# _erg
1 erg
2 Erg
3 
0 
 5_erg
 mksa(_erg)

# _eV
1 électronvolt
2 Electron volt
3 
0 
 5_eV
 mksa(_eV)

# _F
1 farad
2 Farad
3 
0 
 5_F
 mksa(_F)

# _fm
1 fathom (brasse)
2 Fathom
3 
0 
 5_fm
 mksa(_fm)

# _fath
1 fathom (brasse)
2 Fathom
3 
0 
 5_fath
 mksa(_fath)

# _fbm
1 board foot
2 Board foot
3 
0 
 5_fbm
 mksa(_fbm)

# _fc
1 footcandle
2 Footcandle
3 
0 
 5_fc
 mksa(_fc)

# _Fdy
1 faraday
2 Faraday
3 
0 
 5_Fdy
 mksa(_fdy)

# _fermi
1 fermi
2 Fermi
3 
0 
 5_fermi
 mksa(_fermi)

# _flam
1 footlambert
2 Footlambert
3 
0 
 5_flam
 mksa(_flam)

# _ft
1 foot (pied)
2 International foot
3 
0 
 5_ft
 mksa(_ft)

# _ftUS
1 foot US survey
2 Survey foot
3 
0 
 5_ftUS
 mksa(_ftUS)

# _g
1 gramme
2 Gram
3 
0 
 5_g
 mksa(_g)

# _ga
1 Standard freefall
2 Standard freefall
3 
0 
 5_ga
 mksa(_ga)

# _galUS
1 US gallon
2 US gallon
3 
0 
 5_galUS
 mksa(_galUS)

# _galC
1 Canadian gallon
2 Canadian gallon
3 
0 
 5_galC
 mksa(_galC)

# _galUK
1 UK gallon
2 UK gallon
3 
0 
 5_galUK
 mksa(_galUK)

# _gf
1 gramme-force
2 Gram-force
3 
0 
 5_gf
 mksa(_gf)

# _gmol
1 gramme-mole
2 Gram-mole
3 
0 
 5_gmol
 mksa(_gmol)

# _grad
1 grade
2 Grade
3 
0 
 5_grad
 mksa(_grad)

# _gon
1 grade
2 Grade
3 
0 
 5_gon
 mksa(_gon)

# _grain
1 grain
2 Grain
3 
0 
 5_grain
 mksa(_grain)

# _Gy
1 gray
2 Gray
3 
0 
 5_Gy
 mksa(_Gy)

# _H
1 henry
2 Henry
3 
0 
 5_H
 mksa(_H)

# _ha
1 hectare
2 Hectare
3 
0 
 5_ha
 mksa(_ha)

# _h
1 heure
2 Hour
3 
0 
 5_h
 mksa(_h)

# _hp
1 horsepower
2 Horsepower
3 
0 
 5_hp
 mksa(_hp)

# _Hz
1 hertz
2 Hertz
3 
0 
 5_Hz
 mksa(_Hz)

# _in
1 inch
2 Inch
3 
0 
 5_in
 mksa(_in)

# _inHg
1 inch of mercury, 0 degré Celsius
2 Inches of mercury, 0 degree Celsius
3 
0 
 5_inHg
 mksa(_inHg)

# _inH20
1 inch of water, 60 degrés Farenheit
2 Inches of water, 60 degrees Farenheit
3 
0 
 5_inH20
 mksa(_inH20)

# _J
1 joule
2 Joule
3 
0 
 5_J
 mksa(_J)

# _K
1 kelvin
2 Kelvins
3 
0 
 5_K
 mksa(_K)

# _kg
1 kilogramme
2 Kilogram
3 
0 
 5_kg
 mksa(_kg)

# _kip
1 kilopound-force
2 Kilopound-force
3 
0 
 5_kip
 mksa(_kip)

# _knot
1 international (mille nautique par heure)
2 nautical miles per hour
3
0 
 5_knot
 mksa(_knot)

# _kph
1 kilomètre par heure
2 Kilometers per hour
3 
0 
 5_kph
 mksa(_kph)

# _l
1 litre
2 Liter
3 
0 
 5_l
 mksa(_l)

# _lam
1 lambert
2 Lambert
3 
0 
 5_lam
 mksa(_lam)

# _lb
1 livre =16 oz
2 pound = 16 oz
3 
0 
 5_lb
 mksa(_lb)

# _lbf
1 pound-force
2 Pound-force
3 
0 
 5_lbf
 mksa(_lbf)

# _lbmol
1 livre-mole
2 Pound-mole
3 
0 
 5_lbmol
 mksa(_lbmol)

# _lbt
1 troy pound
2 Troy pound
3 
0 
 5_lbt
 mksa(_lbt)

# _lm
1 lumen
2 Lumen
3 
0 
 5_lm
 mksa(_lm)

# _lx
1 lux
2 Lux
3 
0 
 5_lx
 mksa(_lx)

# _lyr
1 Light year
2 Light year
3 
0 
 5_lyr
 mksa(_lyr)

# _m
1 Mètre (unit)
2 Metre (unit)
3 
0 
 5_m

# _µ
1 micron
2 Micron
3 
0 
 5_µ
 mksa(_µ)

# _mho
1 mho
2 Mho
3 
0 
 5_mho
 mksa(_mho)

# _mile
1 International mile
2 International mile
3 
0 
 5_mile
 mksa(_mile)

# _mil
1 mil
2 Mil
3 
0 
 5_mil
 mksa(_mil)

# _miUS
1 US statute mile
2 US statute mile
3 US statute mile
0 
 5_miUS
 mksa(_miUS)

# _mmHg
1 millimètre de mercure (torr), 0 degré Celsius
2 Millimeter of mercury (torr), 0 degree Celsius
3 
0 
 5_mmHg
 mksa(_mmHg)

# _mol
1 mole
2 Mole
3 
0 
 5_mol
 mksa(_mol)

# _mph
1 mile par heure
2 Miles per hour
3 
0 
 5_mph
 mksa(_mph)

# _N
1 newton
2 Newton
3 
0 
 5_N
 mksa(_N)

# _mille
1 mille marin
2 Nautical mile
3 
0 
 5_mille
 mksa(_mille)

# _Ohm
1 ohm
2 Ohm
3 
0 
 5_Ohm
 mksa(_Ohm)

# _oz
1 once
2 Ounce
3 
0 
 5_oz
 mksa(_oz)

# _ozfl
1 US fluid ounce
2 US fluid ounce
3 US fluid ounce
0 
 5_ozfl
 mksa(_ozfl)

# _ozt
1 troy ounce
2 Troy ounce
3 
0 
 5_ozt
 mksa(_ozt)

# _ozUK
1 UK fluid ounce
2 UK fluid ounce
3 UK fluid ounce
0 
 5_ozUK
 mksa(_ozUK)

# _P
1 poise
2 Poise
3 
0 
 5_P
 mksa(_P)

# _Pa
1 pascal
2 Pascal
3 
0 
 5_Pa
 mksa(_Pa)

# _pc
1 parsec
2 Parsec
3 
0 
 5_pc
 mksa(_pc)

# _pdl
1 poundal
2 Poundal
3 
0 
 5_pdl
 mksa(_pdl)

# _ph
1 phot
2 Phot
3 
0 
 5_ph
 mksa(_ph)

# _pk
1 US peck
2 US peck
3 US peck
0 
 5_pk
 mksa(_pk)

# _psi
1 pound-force par inch carré
2 Pounds per square inch
3 
0 
 5_psi
 mksa(_psi)

# _liqpt
1 US liquid pint (1_galUS=8_liqpt)
2 US liquid pint (1_galUS=8_liqpt)
3 
0 
 5_liqpt
 mksa(_liqpt)

# _ptUK
1 pint britannique (1_galUK=8_ptUK) 
2 UK pint (1_galUK=8_ptUK) 
3 
0 
 5_ptUK
 mksa(_ptUK)

# _qt
1 quart
2 Quart
3 
0 
 5_qt
 mksa(_qt)

# _rad
1 radian
2 Radian
3 
0 
 5_rad
 mksa(_rad)

# _R
1 roengten
2 Roengten
3 
0 
 5_R
 mksa(_R)

# _rd
1 rad=0.01 _Gy
2 Rad=0.01 Gy
3 
0 
 5_rd
 mksa(_rd)

# _rd
1 rod
2 Rod
3 
0 
 5_rod
 mksa(_rod)

# _rem
1 rem
2 Rem
3 
0 
 5_rem
 mksa(_rem)

# _rpm
1 tours par minute
2 Revolutions per minute
3 
0 
 5_rpm
 mksa(_rpm)

# _s
1 seconde
2 Second
3 
0 
 5_s
 mksa(_s)

# _S
1 Siemens
2 Siemens
3 Siemens
0 
 5_S
 mksa(_S)

# _sb
1 stilb
2 Stilb
3 
0 
 5_sb
 mksa(_sb)

# _slug
1 slug
2 Slug
3 
0 
 5_slug
 mksa(_slug)

# _sr
1 stéradian
2 Steradian
3 
0 
 5_sr
 mksa(_sr)

# _st
1 stère
2 Stere
3 
0 
 5_st
 mksa(_st)

# _St
1 Stokes
2 Stokes
3 Stokes
0 
 5_St
 mksa(_St)

# _Sv
1 Sievert
2 Sievert
3 Sievert
0 
 5_Sv
 mksa(_Sv)

# _t
1 tonne
2 Metric ton
3 
0 
 5_t
 mksa(_t)

# _T
1 Tesla
2 Tesla
3 Tesla
0 
 5_T
 mksa(_T)

# _tbsp
1 tablespoon
2 Tablespoon
3 
0 
 5_tbps
 mksa(_tbsp)

# _therm
1 EEC therm
2 EEC therm
3 EEC therm
0 
 5_therm
 mksa(_therm)

# _ton
1 short ton
2 Short ton
3 
0 
 5_ton
 mksa(_ton)

# _tonUK
1 long (UK)
2 Long (UK)
3 
0 
 5_tonUK
 mksa(_tonUK)

# _torr
1 torr (mmHg)
2 Torr (mmHg)
3 
0 
 5_torr
 mksa(_torr)

# _tsp
1 teaspoon
2 Teaspoon
3
0 
 5_tsp
 mksa(_tsp)

# _u
1 unité de masse atomique
2 Atomic mass unit
3 
0 
 5_u
 mksa(_u)

# _V
1 volt
2 Volt
3 
0 
 5_V
 mksa(_V)

# _W
1 watt
2 Watt
3 
0 
 5_W
 mksa(_W)

# _Wb
1 weber
2 Weber
3 
0 
 5_Wb
 mksa(_Wb)

# _yd
1 yard
2 International yard
3 
0 
 5_yd
 mksa(_yd)

# _yr
1 année
2 Year
3 
0 
 5_yr
 mksa(_yr)

# dot_paper
1 Trace les sommets du reseau formé par les droites x=n*ux et  y=n*uy dans le repère d'angle t.
2 Draws the apex of the network built with the lines x=n*ux and y=n*uy in the axes of angle t.
3 
0 Real(ux),Real(uy),Real(t)
dot_paper(1,1,pi/3)
dot_paper(1,2,pi/4)

# ufactor
1 Factorise une unité dans un objet-unité
2 Factors a unit in a unit object
3 
0 Unit,Unit
-1 convert
-2 mksa
-3 usimplify
ufactor(100_C,1_A)

# usimplify
1 Simplifie une unité dans un objet-unité
2 Simplifies a unit in a unit object
3 
0 Unit
-1 convert
-2 mksa
-3 ufactor
usimplify(100_(W*s))

# mksa
1 Convertit les unités en unités du systeme international MKSA
2 Convert units in MKSA international unit system
3 
0 Unit
-1 convert
-2 ufactor
mksa(1_N)

# CST
1 Nom de la variable permettant de créer le menu cust du bandeau.
2 Name of the variable creating the menu cust of the bandeau.
3 Nombre de la variable para crear menú personalizados
0 Lst
-1
 CST:=[evalc,["euro",6.55957],["f",x->2*x],["g",g]]

# isopolygon
1 Trace un polygone régulier ayant abs(n) sommets, donné par 2 sommets (ou 2 sommets et 1 point du plan) si n>0 et par son centre et 1 sommet (ou son centre, 1 sommets et 1 point du plan) si n<0.
2 Draws a regular polygon having abs(n) vertices, given by 2 vertices (or 2 vertices and 1 point of the plane) if n>0 and by its center and 1 vertex (or its center, 1 vertex and 1 point of the plane) if n<0.
3 Dibuja un polígono regular con abs(n) vértices, dando 2 vértices  (o 2 vértices y 1 punto del plan) si n>0 y dando centro y 1 vértice  (o centro, 1 vértice y 1 punto del plan) si n<0.
0 Pnt,Pnt,[Pnt],Intg(n)
-1 polygon
-2 hexagon
isopolygon(0,1,5)
isopolygon(0,1,-5)
isopolygon(point(0,0,0),point(3,3,3),point(0,0,3),5)
isopolygon(point(0,0,0),point(3,3,3),point(0,0,3),-5)

# arc
1 Trace un arc de cercle donné par 2 sommets et l'angle au centre [le centre sera mis dans C et le rayon dans r]
2 Draws a circle arc given by 2 vertices and the angle at center [the center will be in C and the radius in r]
3 Dibuja un arco de círculo dando 2 vértices y el ángulo [C=centro,r=radio]
0 Pnt, Pnt, Real,[Var(C)],[Var(r)]
-1 circle
arc(0,1,pi/4)
arc(0,1,pi/4,C,r)

# makesuite
1 Renvoie une séquence faite à partir d'un vecteur.
2 Returns a sequence made with a vector.
3 Devuelve una secuencia a partir de un vector.
0 Vect||Lst
-1 makevector
-2 op
makesuite([1,2,3])

# makevector
1 Renvoie un vecteur fait à partir d'une séquence.
2 Returns a vector made with a sequence.
3 Devuelve un vector a partir de una secuencia.
0 Seq
-1 makesuite
makevector(1,2,3)

# interval2center
1 Renvoie le centre de l'intervalle ou l'objet.
2 Returns the center of the interval or the object.
3 Designa el centro de el intervalo o el real.
0 Interval or Real
-1 center2interval
interval2center(2..5)
interval2center(3)

# center2interval
1 Renvoie la liste des intervalles commençant par a0 et ayant pour centres la liste l.
2 Returns the list of intervals beginning with a0 and with l as centers.
3 Calcula los intervalos correspondientes a los centros
0 LstVal(l),[Real(a0)] 
-1 interval2center
center2interval([2,5,9],1)
center2interval([2,5,8])

# border
1 Renvoie la matrice formée par A bordée de b en dernière colonne, si nrows(A)=size(b), border(A,b)=tran(append(tran(A),b)).
2 Returns the matrix obtained by bording A with b as latest column, if nrows(A)=size(b), border(A,b)=tran(append(tran(A),b)).
3 Devuelve la matriz obtenida bordenado A con b como última columna, si nrows(A)=size(b), border(a,b)=tran(append(tran(A),b)).
0 Mtrx(A),Lst(b)
-1 tran
-2 append
-3 augment
border([[1,2,3,4],[4,5,6,8],[7,8,9,10]],[1,3,5])
border([[1,2,3],[4,5,6],[7,8,9]],[1,0,1])

# JordanBlock
1 Renvoie une matrice n*n avec a sur la diagonale, 1 au-dessus et 0 ailleurs. 
2 Returns a matrix n*n with a on the diagonal ,1 above and 0 everywhere else. 
3 Devuelve una matriz n*n con a en la diagonal, 1 por encima y 0 en el resto.
0 Expr(a),Intg(n)
-1 jordan
JordanBlock(7,3)

# blockmatrix
1 Renvoie la matrice obtenue en scindant la liste selon n listes de longueur m.
2 Returns the matrix get from the list divided into n lists of dimension m. 
3 Devuelve la matriz obtenida de la lista dividida en n listas de dimensión m.
0 Intg(n),Intg(m),Lst
-1 list2mat
blockmatrix(2,3,[idn(2),idn(2),idn(2),idn(2),idn(2),idn(2)])
blockmatrix(2,2,[idn(2),newMat(2,3),newMat(3,2),idn(3)])

# row
1 Renvoie la ligne n ou la suite des lignes n1..n2 de la matrice A ou argument optionnel de count,count_eq,count_inf,count_sup. 
2 Returns the row n or the sequence of the rows n1..n2 of the matrix A or optional argument of count,count_eq,count_inf,count_sup. 
3 Devuelve la fila n a la secuencia de filas n1..n2 de la matriz A o opción de count,count_eq,count_inf,count_sup.
0 Mtrx(A),Intg(n)||Interval(n1..n2)
-1 col
-2 count
-3 count_eq
-4 count_inf
-5 count_sup
row([[1,2,3],[4,5,6],[7,8,9]],1)
row([[1,2,3],[4,5,6],[7,8,9]],0..1)
 count_eq(3,[[1,2,3],[4,3,2],[3,2,1]],row)

# col
1 Renvoie la colonne n ou la suite des colonnes n1..n2 de la matrice A ou argument optionnel de count,count_eq,count_inf,count_sup. 
2 Returns the column n or the sequence of the columns n1..n2 of the matrix A or optional argument of count,count_eq,count_inf,count_sup. 
3 Devuelve la columna n o la secuencia de columnas n1..n2 de la matriz A o opción de count,count_eq,count_inf,count_sup.
0 Mtrx(A),Intg(n)||Interval(n1..n2)
-1 row
-2 count
-3 count_eq
-4 count_inf
-5 count_sup
col([[1,2,3],[4,5,6],[7,8,9]],1)
col([[1,2,3],[4,5,6],[7,8,9]],0..1)
 count_eq(3,[[3,2,3],[4,3,2],[3,2,1]],col)

# delrows
1 Renvoie la matrice obtenue en supprimant les lignes n1..n2 de la matrice A. 
2 Returns the matrix where the rows n1..n2 of the matrix A are deleted. 
3 Devuelve la matriz A después de borrar las filas n1..n2.
0  Mtrx(A),Interval(n1..n2)
-1 delcols
delrows([[1,2,3],[4,5,6],[7,8,9]],1..1)
delrows([[1,2,3],[4,5,6],[7,8,9]],0..1)

# delcols
1 Renvoie la matrice obtenue en supprimant les colonnes n1..n2 de la matrice A.
2 Returns the matrix where the columns n1..n2 of the matrix A are deleted. 
3 Devuelve la matriz A después de borrar las columnas n1..n2.
0 Mtrx(A),Interval(n1..n2)
-1 delrows
delcols([[1,2,3],[4,5,6],[7,8,9]],1..1)
delcols([[1,2,3],[4,5,6],[7,8,9]],0..1)

# cumulated_frequencies
1 Trace le diagramme cumulatif des fréquences (lignes=[valeur,fréquences])
2 Draws the diagramme of the cumulated frequencies (rows=[value,frequencies])
3 Dibuja el diagrama de frecuencias acumuladas (filas=[valor,frecuencias])
0 Mtrx
-1 histogram
cumulated_frequencies([[1,0.3],[2,0.5],[3,0.2]])
cumulated_frequencies([[1..2,0.3],[2..3,0.5],[3..4,0.2]])
cumulated_frequencies([[1..2,0.3,0.5],[2..3,0.5,0.2],[3..4,0.2,0.3]])

# is_element
1 Renvoie 1 si le point est sur l'objet géométrique et 0 sinon.
2 Returns 1 if the point is on the geometric object and 0 otherwise.
3 Devuelve 1 si un punto es en una curva, 0 si no.
0 Pnt,GeoObj
-1 element
is_element(point(i),square(0,1))
is_element(point(i),circle(point(0),point(2)))

# NewPic
1 Crée un image de nom pic1, composée des points définis par les lignes de A.
2 Creates a picture named pic1, made with the points defined by the rows of A.
3 Crea un dibujo llamado pic1, compuesto por los puntos de las filas de A.
0 Mtrx_nrows_2cols(A),Var(pic1)
-1  
NewPic ([[1,1],[1,2],[2,2]],des1)

# RclPic
1 Rajoute au graphique de l'écran DispG, l'image stockée dans pic1 à l'aide de StoPic.
2 Adds to the graphic in the DispG screen, the picture stored with StoPic.
3 Añade a la pantalla gráfica, el dibujo grabado con StoPic.
0 Var(pic1)
-1 RplcPic
-2 StoPic
RclPic(des1)

# RplcPic
1 Efface et remplace le graphique de l'écran DispG,par l'image stockée dans pic1 à l'aide de StoPic.
2 Erase and replaces the graphic in the DispG screen, with the picture stored with StoPic.
3 Borra y reemplaza el gráfico en la pantalla gráfica, con el dibujo grabado con StoPic.
0 Var(pic1)
-1 StoPic
-2 RclPic
RplcPic(des1)

# non_recursive_normal
1 Simplifie les expressions,sans simplification à l'intérieur des expressions non rationnelles.
2 Simplifies the expressions,but without simplification into no-rationnal expressions.
3 Simplifica las expresiones, pero sin simplificar el interior de expresiones no racionales.
0 Expr
-1 normal
non_recursive_normal(sin(x+x)+sin(2*x)+x+x)
non_recursive_normal(sin(2*x)+sin(2*x)+x+x)

# evalc
1 Renvoie une expression complexe simplifiée sous la forme real+i*imag.
2 Returns an complex expression simplified with the format real+i*imag.
3 Devuelve una expresión compleja simplificada de la forma real+i*imag.
0 Expr
-1 normal
evalc(-3+4*i+exp(i))
evalc(1/(x+y*i))

# copy
1 A:= copy(B) clone la liste ou matrice B dans A (A:=copy(B).
2 A:= copy(B) clones the list or matrix B in A.
3 A:=copy(B) copia la lista o matriz B en A.
0 Mtrx,Var
-1 =<
 A:=copy(B)

# zip
1 Retourne la liste de j-ème élément f(l1[j],l2[j]): sans valeur de défaut, sa taille est le minimum des tailles de l1 et l2, sinon on compléte la liste la plus courte avec la valeur de défaut.
2 Returns a list whose j-th entry is f(l1[j],l2[j]): without default value its length is the minimum of the lengths of the two input lists and else the shorter list is padded with the default value.
3 Devuelve la lista cuya j-ésimo elemeto es f(l1[j],l2[j]): sin ningún valor por defecto, su longitud es el mínimo de las longitudes de l1 y l2, y si no la lista más corta es completada con el valor por defecto.
0 Fnc2d(f),Lst(l1),Lst(l2),[Val(default)]
-1  
zip('+',[a,b,c,d], [1,2,3,4]) 
zip('+',[a,b,c,d], [1,2,3]) 
zip('+',[a,b,c,d], [1,2,3],5)
zip(sum,[a,b,c,d], [1,2,3,4])  

# unquote
1 Évalue une expression quotée (par exemple purge(c);a:=c;unquote(a):=3; met 3 dans les variables a et c).
2 Evaluates an quoted expression (for example purge(c);a:=c;unquote(a):=3; put 3 in the variables a and c).
3 Evalua una expresión entrecomillada (por ejemplo purge(c);a:=c;unquote(a):=3; pone 3 en las variables a y c).
0 Expr
-1 quote
unquote(a)

# time
1 Renvoie le temps de calcul de la commande ou depuis le début de la session
2 Returns the time to compute a command or from the begining of the session.
3 Devuelve el tiempo de cálculo desde el inicio de la sesión.
0 NULL
time(factor(x^10-1))
time()

# DropDown
1 Dans un programme, instruction d'une boite de dialogue.
2 In a programm, instruction of a dialog box.
3 En un programa, instrucción para una caja de diálogo.
0 Str,LstVal,Var
-1 Dialog
-2 choosebox

# Request
1 Dans un programme, instruction d'une boite de dialogue.
2 In a programm, instruction of a dialog box.
3 En un programa, instrucción para una caja de diálogo.
0 Str,Var
-1 Dialog
-2 input

# Text
1 Dans un programme, instruction d'une boite de dialogue.
2 In a programm, instruction of a dialog box.
3 En un programa, instrucción para una caja de diálogo.
0 Str
-1 Dialog

# Title
1 Dans un programme, instruction d'une boite de dialogue.
2 In a programm, instruction of a dialog box.
3 En un programa, instrucción para una caja de diálogo.
0 Str
-1 Dialog

# Dialog EndDlog
1 Dans un programme, fait des entrées :Dialog{Title("titre");Text("Eleve"+ string(c));Request("Nom=",a);Request("Age=",b);DropDown("Niveau",["un","deux"],n);} (on peut remplacer {} en mettant EndDlog à la fin).
2 In a programm, do inputs :Dialog{Title("title");Text("Pupil"+ string(c));Request("Name=",a);Request("Age=",b);DropDown("Level",["un","deux"],n);} (you can replace {} with EndDlog at the end).
3 En un programa, crea entradas: Dialog{Title("título");Text("Alumno"+string(c));Request("Nombre=",a);Request("Edad=",b);DropDown("Nivel",["un","dos"],n);} (se puede cambiar } con EndDlog al final).
0 Title;Text;Request;Request;DropDown;EndDlog
-1 DropDown
-2 Request
-3 Text
-4 Title
 Dialog Title("section TS");Text("Pupil"+ string(c));Request("Name=",a);Request("Age=",b);DropDown("Level",["un","deux"],n);EndDlog

# choosebox PopUp
1 Dans un programme, fait une entrée avec affichage d'une liste de choix.
2 In a program, do an input with a display of a choose list.
3 En un programa, crea una entrada con aspecto de lista de selección.
0 Str(titel),LstVal,Var
-1 Dialog
choosebox("titre",["un","deux","trois"],a)
choosebox("valeur de a",[-1,0,1],a)

# rdiv
1 Division de a par b (version préfixée de /).
2 Division of a by b (prefixed version of /).
3 División de a entre b (versión prefija de /).
0 Expr(a),Expr(b)
-1 /
rdiv(3,5)
rdiv(3.2,5.4)

# unapply
1 Renvoie une fonction définie à partir d'une expression.
2 Returns a function defined by an expression.
3 Devuelve una función definida por una expresión.
0 Expr,Var
-1 apply
unapply(2*x^2,x)

# RandSeed
1 Initialise les nombres aléatoires.
2 Initializes random numbers.
3 Inicializa números aleatorios.
0 Intg
-1 srand
RandSeed(321)

# semi_augment
1 Renvoie une matrice formé de A et de B ayant n1+n2 lignes et p colonnes si dim(A)=[n1,p] et dim(B)=[n2,p].
2 Returns a matrix made with A and B, with n1+n2 rows and p columns if dim(A)=[n1,p] and dim(B)=[n2,p].
3 Devuelve una matriz formada por A y B, con n1+n2 filas y p columnas si dim(A)=[n1,p] y dim(B)=[n2,p].
0 Mtrx(A),Mtrx(B)
-1 augment
semi_augment([[68,-21],[56,59],[1,2]],[[68,-21],[56,59]])

# goto
1 Dans un programme, permet de sauter à l'instruction repérée par le label nom.
2 In a program, is used to jump to an instruction with the label nom.
3 En un programa, se usa para saltar a la instrucción con la etiqueta nom.
0 Var(nom)
-1 label
 essai(a):={label truc;a:=a+2;if (a<10) goto truc;print(a);}

# label
1 Dans un programme, permet de repérer une instruction par le label nom.
2 In a program, is used to mark an instruction with the label nom.
3 En un programa, se usa para marcar una instrucción con la etiqueta nom.
0 Var(nom)
-1 goto
 essai(a):={label truc;a:=a+2;if (a<10) goto truc;print(a);}

# lsmod
1 Affiche les librairies dynamiques installées.
2 Displays the installed dynamic libraries.
3 Muestra la librerías dinámicas instaladas.
0 NULL
-1 insmod
-2 rmmod
lsmod()

# insmod
1 Installe un module dynamique en créant les commandes qui sont, par exemple, dans le fichier libprogfr.so en mettant le chemin d'accés à ce fichier.
2 Installs a dynamic module creates the commands that are, for example, in the file libprogfr.so puting the pwd of this file.
3 Instala un módulo dinámico creando los comandos que tiene, por ejemplo, en el fichero libprogfr.so poniendo la dirección de este fichero.
0 Str(pwd)
-1 rmmod
-2 lsmod
insmod("/home/parisse/giac/src/libprogfr.so")

# rmmod
1 Supprime les librairies dynamiques installées.
2 Removes the installed dynamic libraries.
3 Borra las librerías dinámicas instaladas.
0 Str(pwd)
-1 lsmod
-2 insmod
rmmod("/home/parisse/giac/src/libprogfr.so")

# widget_size
1 Change la taille de l'affichage des caractères sur l'écran xcas (taille=n) et avec plus de paramètres définit la configuration générale.
2 Changes the characters size of the display on the xcas screen (size=n) and with more parameters define the general configuration.
3 Cambia el tamaño de los carácters de la pantalla en xcas (tamaño=n).
0 Intg(n)
-1 cas_setup
widget_size(20)
widget_size(8)
widget_size(20,58,49,697,563,1,1,0)

# CyclePic
1 Réalise un enchaînement automatique de n images (stockées avec StoPic par exemple sous les noms des1,des2,des3...desn). L'affichage est fait n fois avec une pause de p secondes entre chaque image.
2 Realizes an automatic sequence of n pictures (stored with StoPic for example with name des1,des2,des3..desn). The display is done n times with a pause p seconds beetween each picture.
3 Realiza una secuencia automática de n dibujos (grabados con StoPic por ejemplo con el nombre des1,des2,des3..desn). La muestra se hace n veces con una pausa de p segundos entre cada gráfico.
0 Str(),Intg(n),Real(p),Intg(n)
-1 StoPic
CyclePic("des",3,0.5,4)

# StoPic
1 Pour stocker des graphiques dans des variables de noms ayant même radical (radical1,radical2..) pour pouvoir faire ensuite une animation avec CyclePic.
2 To store graphics in variables with same root-name (radical1,radical2..) and then we can animate the graphics with CyclePic.
3 Para grabar gráficos en variables con el mismo nombre raíz (radical1,radical2..) y poder animarlos con CyclePic.
0 Var
-1 CyclePic
StoPic(des1)
StoPic(des2)
StoPic(des3)

# SortA
1 Trie les listes par ordre croissant.
2 Sorts the lists with increassing order.
3 Ordena las listas en orden creciente.
0 LstReal||Seq
-1 SortD
-2 sort
SortA([3,4,2])
SortA([3,4,2],[6,4,5])

# SortD
1 Trie les listes par ordre décroissant.
2 Sorts the lists with decreassing order.
3 Ordena las listas en orden decreciente.
0 LstReal||Seq
-1 SortA
-2 sort
SortD([3,4,2])
SortD([3,4,2],[6,4,5])

# restart
1 Purge toutes les variables.
2 Purges all the variables.
3 Borra todas las variables.
0 NULL
-1 purge
restart()

# product mul
1 Produit des valeurs de l'expression quand la variable va de a à b avec un pas p (product(expression,var,debut,fin,pas) par défaut p=1) ou produit des éléments d'une liste ou produit terme à terme des éléments de 2 listes ou matrices.
2 Multiplicates the values of the expression when the variable go from a to b with a step p (product(expression,var,begin,end,step) by default p=1) or product of the elements of a list or product element by element of 2 lists or matrix.
3 Multiplica los valores de la expresión cuando la variable va desde a hasta b con paso p (product(expresión,var,inicio,fin,paso) por defecto p=1) o producto de elementos de una lista o producto término a término de 2 lista o matrices.
0 Expr||Lst,[Var||Lst],[Intg(a)],[Intg(b)],[Intg(p)]
-1 sum
product(n,n,1,10,2)
product(1/n,n,1,10)
product(1/n,n,11,1)
product(1/n,n,10,1,1)
product([2,3,4,5])
product([2,3,4],[5,6,7])
product([[2,3,4],[5,6,7]],[[2,3,4],[5,6,7]])

# maple_ifactors
1 Renvoie 1 ou -1 pour le signe et les facteurs premiers avec leur ordre de multiplicité de n sous la forme d'une matrice comme ifactors en Maple.
2 Returns 1 or -1 for the sign and the prime factors with their multiplicity of n in a matrix such as ifactors in Maple.
3 Devuelve 1 o -1 para el signo y los factores primos con su multiplicidad de n en una matriz como ifactors en Maple.
0 Intg(n)
-1 ifactors
maple_ifactors(120)

# .+
1 Éxécute l'addition terme à terme de 2 listes ou de 2 matrices (opérateur infixé, TI compatibilité).
2 Performs an element by element addition of 2 lists or 2 matrix (infixed operator, TI compatibility).
3 Ejecuta la suma término a término de 2 listas o 2 matrices (operador infijo, compatibilidad TI).
0 Lst||Mtrx, Lst||Mtrx
-1 .-
 [[1,2],[3,4]] .+  [[3,4],[5,6]]
 [1,2] .+ [5,6]

# .-
1 Éxécute la soustraction terme à terme de 2 listes ou de 2 matrices (opérateur infixé, TI compatibilité).
2 Performs an element by element soustraction of 2 lists or 2 matrix (infixed operator, TI compatibility).
3 Ejecuta la resta elemento a elemento de 2 listas o 2 matrices (operador infijo, compatibilidad TI).
0 Lst||Mtrx,Lst||Mtrx
-1 .+
 [[1,2],[3,4]] .- [[3,4],[5,6]]
 [1,2] .- [5,6]

# ./
1 Éxécute la division terme à terme de 2 listes ou de 2 matrices (opérateur infixé, TI compatibilité).
2 Performs an element by element division of 2 lists or 2 matrix (infixed operator, TI compatibility).
3 Realiza el división término a término de 2 listas o 2 matrices (operador infijo, compatibilidad TI).
0 Lst||Mtrx,Lst||Mtrx
-1 .*
 [[1,2],[3,4]] ./ [[3,4],[5,6]]
 [1,2] ./ [5,6]

# .* 
1 Éxécute le produit terme à terme de 2 listes ou de 2 matrices (opérateur infixé, TI compatibilité).
2 Performs an element by element multiplication of 2 lists or 2 matrix (infixed operator, TI compatibility).
3 Realiza el producto término a término de 2 listas o 2 matrices (operador infijo, compatibilidad TI).
0 Lst||Mtrx,Lst||Mtrx
-1 hadamard
-2 ./
-3 .^
 [[1,2],[3,4]] .* [[3,4],[5,6]]
 [1,2] .* [5,6]

# .^
1 Elève à la puissance chaque élément de la matrice (opérateur infixé, TI compatibilité).
2 Calculates the power of each element of the matrix (infixed operator, TI compatibility).
3 Calcula la potencia de cada elemento de la matriz (operador infijo, compatibilidad TI).
0 Mtrx,Intg(n)
-1 .*
 [[1,2],[3,4]] .^ 3

# &^
1 Elève la matrice à la puissance n (opérateur infixé, &^ compatibilité Maple).
2 Calculates the n power of the matrix (infixed operator, &^ Maple compatibility).
3 Calcula la potencia n-ésima de la matriz (operador infijo,&^ compatibilidad Maple).
0 Mtrx,Intg(n)
-1 ^
 [[1,2],[3,4]] &^ 3
 [[1,2],[3,4]] &^ n

# ^
1 Elève un nombre à la puissance n (opérateur infixé).
2 Calculates the n power of a number (infixed operator).
3 Calcula la potencia n-ésima de un número (operador infijo).
0 Expr,Intg(n)
-1 &^
-2 matpow
 13 ^ n
 [[1,2],[3,4]] ^ 3

# matpow
1 Elève une matrice carree à la puissance n en la jordanisant
2 Calculates the n power of a matrix by jordanization
0 Mtrx,Intg(n)
-1 &^
-2 ^
matpow([[1,2],[3,4]],n)

# &*
1 Multiplication de 2 matrices (opérateur infixé, &* compatibilité Maple).
2 Matrix multiplication (infixed operator, &* Maple compatibility).
3 Producto de matrices (operador infijo, &* compatibilidad Maple).
0 Mtrx,Mtrx
-1 *
 [[1,2],[1,4]] &* [[1,2],[3,4]]

# +& +
1 Concaténation de 2 chaînes ou addition terme à terme de 2 listes ou matrices (opérateur infixé, +& compatibilité TI).
2 Str  concatenation or addition element by element of 2 lists or matrix (infixed operator, +& TI compatibility).
3 Concatenación de 2 cadenas o suma elemento a elemento de 2 listas o matrices (operador infijo, +& compatibilidad TI).
0 Str||Lst, Str||Lst
-1 concat
 "bon" +& "jour"
 "bon" + "jour"

# inputform
1 Dans in programme, est utilisé pour faire des entrées.
2 In a program, is used to do inputs.
3
0 [Str],Var,[Str],[Var],[Str],[Var]
-1 
inputform("a=?",a,"b=?",b)
inputform(a,b)

# #
1 Tansforme (dans un programme) une chaîne en le nom d'une variable.
2 Tansforms (in a program) a string into the name of a variable.
3 Transforma (en un programa) una cadena en el nombre de una variable.
0 Str
-1 input
 #("a")

# fMax
1 Retourne l'abscisse du maximum de l'expression.
2 Returns the abscissa of the maximum of the expression.
3 Devuelve la abscisa del máximo de la expresión.
0 Expr,[Var]
-1 fMin
fMax(-x^2+2*x+1,x)

# fMin
1 Retourne l'abscisse du minimum de l'expression.
2 Returns the abscissa of the minimum of the expression.
3 Devuelve la abscisa del mínimo de la expresión.
0 Expr,[Var]
-1 fMax
fMin(x^2-2*x+1,x)

# DrawInv
1 Trace le graphe du symétrique de l'expression par rapport à y=x.
2 Draws the graph of the symmetric of the expression with respect to y=x.
3 Dibuja el gráfico de simétrico de la expresión respecto a y=x.
0 Expr,[Var]
-1 plotfunc
DrawInv(exp(x))

# cFactor cfactor factoriser_sur_C
1 Factorisation de l'expression dans C (sur les entiers si on a plus de 2 variables).
2 Factorisation of the expression in C (on the integers if there are more than 2 variables).
3 Factorización de la expresión en C (en los enteros si hay más de 2 variables).
0 Expr
-1 factor
cFactor(x^2*y+y)
cFactor(x^2*y^2+y^2+4*x^2+4)
cFactor(x^2*y^2+y^2+2*x^2+2)

# atrig2ln
1 Réécrit l'expression contenant des fonctions trigonométriques inverses avec des logarithmes.
2 Rewrites the expression containing inverse trigonometric functions with logarithmic functions.
3 Reescribe la expresión conteniendo funciones trigonométricas inversas con funciones logarítmicas.
0 Expr
-1 trig2exp
-2 exp2trig
atrig2ln(atan(x))
atrig2ln(asin(x))
atrig2ln(acos(x))

# LineHorz
1 Dessine la droite horizontale y=a.
2 Draws the horizontal line y=a.
3 Dibuja la recta horizontal y=a.
0 Expr(a)
-1 Line
-2 LineVert
LineHorz(-1)

# Line
1 Dessine le segment [a+i*b,c+i*d].
2 Draws the segment [a+i*b,c+i*d].
3 Dibuja el segmento [a+i*b,c+i*d].
0 Expr(a),Expr(b),Expr(c),Expr(d)
-1 segment
Line(-1,-2,1,2)

# LineVert
1 Dessine la droite verticale x=a.
2 Draws the vertical line x=a.
3 Dibuja la recta vertical x=a.
0 Expr(a)
-1 Line
-2 LineHorz
LineVert(2)

# plot3d graphe3d
1 Efface et trace le graphe d'une fonction ou d'une expression de 2 variables ou d'une surface paramétrée par une liste de 3 fonctions ou de 3 expressions de 2 variables.
2 Erase and plot a 2 variable expression or of a surface defined with a list of the 3 functions or of 3 expression of 2 variables.
3 Borra y dibuja una función de 2 variables o la superficie definida con una lista de 3 funciones o de 3 expresiones de 2 variables.
0 Expr||Lst(3*Expr),Var,Var
-1 plotfunc
-2 animate3d
plot3d(x^2+y^2+1,x,y)
plot3d(x^2+y^2,x=-1..1,y=-2..2)
plot3d([u+1,2*v,u^2+v^2],u=-1..1,v=-2..2)
plot3d(f,-1..1,-2..2)
plot3d([f,g,h],-1..1,-2..2)

# subMat
1 Extrait une sous matrice de premier élément A[n1,n2] et de dernier élément A[n3,n4].
2 Extracts a sub matrix with first element=A[n1,n2] and last element=A[n3,n4].
3 Extrae una sub-matriz cuyo primer elemento es A[n1,n2] y el último es A[n3,n4].
0 Mtrx(A),Intg(n1),Intg(n2),Intg(n3),Intg(n4)
-1 []
subMat([[1,2],[3,4],[5,6]],1,0,2,1)

# table
1 Définit un tableau indicé par des chaînes ou des nombres réels.
2 Defines an array where the index are strings or real numbers.
3 Define una matriz cuyos índices son cadenas o números reales.
0 SeqEqual(index=value)
-1 
table(3=-10,"a"=10,"b"=20,"c"=30,"d"=40) 

# read ramene
1 Pour lire dans le fichier fich_name les variables et leurs valeurs.
2 To read in the fich fich_name the variables and their values.
3 Para leer del fichero fich_name las variables y sus valores.
0 Str(fich_name),SeqVar
-1 write
read("toto")

# write sauve
1 Pour écrire dans le fichier fich_name les variables et leurs valeurs.
2 To write in the fich fich_name the variables and their values.
3 Para escribir en el fichero fich_name las variables y sus valores.
0 Str(fich_name),SeqVar
-1 read
write("toto",a,b,c)

# nodisp
1 Pour afficher Done au lieu d'une valeur.
2 To display Done in place of a value.
3 Para mostrar Done en lugar de un valor.
0 Expr
-1 
nodisp(A:=ranm(50,50))

# subsop
1 Remplace dans la liste (ou la matrice) l'élément d'indice n par l'expression (en Maple les arguments sont permutés)(NULL supprime cet élément).
2 Replaces in the list (or the matrix) the element of index n with the expression (with Maple the arguments are switched over)(NULL remove this element).
3 Reemplaza en la lista (o la matriz) el elemento de índice n por la expresión (con Maple los argumentos son permutados)(NULL suprime ese elemento).
0 Lst||Mtrx,Intg(n)=Expr
-1  
subsop([0,1,2,3,4],2=sqrt(2)+1)
subsop([[1,2],[3,4]],[1,1]=5)
subsop([[1,2],[3,4]],1=[10,8])
subsop([0,1,2,3],'1=NULL')

# mRowAdd
1 Multiplie la ligne n1 de la matrice A par exprs, puis l'ajoute à la ligne n2.
2 Multiplies the row n1 of the matrix A by exprs, then adds it to the row n2.
3 Multiplica la fila n1 de A por exprs, y lo añade a la fila n2.
0 Expr(exprs),Mtrx(A),Intg(n1),Intg(n2)
-1 rowAdd
-2 mRow
mRowAdd(12,[[1,2],[3,4],[5,6]],0,2)

# mRow
1 Multiplie la ligne n1 de la matrice A par exprs.
2 Multiplies the row n1 of the matrix A by exprs.
3 Multiplica la fila n1 de A por exprs.
0 Expr(exprs),Mtrx(A),Intg(n1)
-1 rowAdd
-2 mRowAdd
mRow(12,[[1,2],[3,4],[5,6]],0)

# mathml
1 Convertit l'expression en une chaîne qui permet d'afficher des maths pour le web.
2 Converts the expression into a string so that we can display maths for the web.
3 Convierte la expresión en una cadena que puede mostrarse en la web.
0 Expr
-1 latex 
mathml(1/2)

# fracmod iratrecon
1 Retourne la fraction a/b tel que a/b=exprs mod n, -sqrt(n)/2<a<=sqrt(n)/2 et 0<=b<sqrt(n)/2.
2 Returns the fraction a/b such as a/b=exprs mod n, -sqrt(n)/2<a<=sqrt(n)/2 and 0<=b<sqrt(n)/2.
3 Devuelve la fracción a/b tal que a/b=exprs mod n, -sqrt(n)/2<a<=sqrt(n)/2 y 0<=b<sqrt(n)/2.
0 Expr(exprs),Intg(n)
-1 smod
fracmod(41,121)

# Beta
1 Renvoie Gamma(x)*Gamma(y)/Gamma(x+y).
2 Returns Gamma(x)*Gamma(y)/Gamma(x+y).
3 Devuelve Gamma(x)*Gamma(y)/Gamma(x+y).
0 Expr,Expr
-1 Gamma 
Beta(x,y)
Beta(3,2)

# cat
1 Evalue les arguments, puis les concaténe en une chaîne.
2 Evaluates the arguments, then concates them into a string.
3 Evalua los argumentos, y los concatena en una cadena.
0 SeqObj
-1 concat
cat("aaa",c,12*3)

# compare
1 Renvoie 1 si type(arg1)<type(arg2) ou si type(arg1)=type(arg2) et  arg1<arg2, sinon renvoie 0.
2 Returns 1 if  type(arg1)<type(arg2) or if type(arg1)=type(arg2) and arg1<arg2, else returns 0.
3 Devuelve 1 si type(arg1)<type(arg2) o si type(arg1)=type(arg2) y arg1<arg2, si no, devuelve 0.
0 Obj(arg1),Obj(arg2) 
-1 type
compare(1,2)
compare(1.0,2)
compare("ab","cd")

# Col
1 Renvoie l'indice de la colonne de la cellule mise en surbrillance dans le tableur.
2 Returns the index of the column of the lightened cell in the matrixwriter.
3 Devuelve el índice de la columna de la celda señalada en el editor de matrices.
0 NULL
-1 Row
Col()

# Row
1 Renvoie l'indice de la ligne de la cellule mise en surbrillance dans le tableur.
2 Returns the index of the row of the lightened cell in the matrixwriter.
3 Devuelve el índice de la fila de la celda señalada en el editor de matrices.
0 NULL
-1 Col
Row()

# heugcd
1 PGCD de 2 polynômes avec l'algorithme dit du pgcd heuristique.
2 GCD of 2 polynomials, with the algorithm called heuristic pgcd.
3 GCD de 2 polinómios, con el algoritmo pgcd heurístico.
0 Poly,Poly
-1 gcd
-2 modgcd
-3 ezgcd
-4 psrgcd
heugcd(x^4-1,(x-1)^2)

# modgcd
1 PGCD de 2 polynômes avec l'algorithme modulaire.
2 GCD of 2 polynomials, with the modular algorithm.
3 GCD de 2 polinómios, con el algoritmo modular.
0 Poly,Poly
-1 gcd
-2 heugcd
-3 ezgcd
-4 psrgcd
modgcd(x^4-1,(x-1)^2) 

# psrgcd
1 PGCD de 2 polynômes avec l'algorithme du sous résultant.
2 GCD of 2 polynomials, with the sub resultant algorithm.
3 GCD de 2 polinómios, con el algorítmo sub resultante.
0 Poly,Poly
-1 gcd
-2 modgcd
-3 ezgcd
-4 heugcd
psrgcd(x^4-1,(x-1)^2)

# ezgcd
1 PGCD de 2 polynômes ayant au moins 2 variables, avec l'algorithme ezgcd.
2 GCD of 2 polynomials with at least 2 variables, with the ezgcd algorithm.
3 GCD de 2 polinómios, con al menos 2 variables, con el algoritmo ezgcd.
0 Poly,Poly
-1 gcd
-2 modgcd
-3 heugcd
-4 psrgcd
ezgcd(x^2-2*xy+y^2-1,x-y)
ezgcd((x+1)^4-y^4,(x+1-y)^2)
ezgcd((x+y-1)*(x+y+1),(x+y+1)^2)

# icontent
1 PGCD des coefficients entiers d'un polynôme.
2 GCD of the integer coefficients of a polynomial.
3 GCD de los coeficientes enteros de una polinomio.
0 Poly,[Var]
-1   
icontent(24x^3+6x^2-12x+18)
icontent(24t^3+6t^2-12t+18,t)

# polygonplot ligne_polygonale
1 Dessine  les polygones joignant pour j fixé et  pour k=0..nrows, les points (xk,yk) où xk=élément ligne k colonne 0 et yk=élément ligne k colonne j en ordonnant les xk (on obtient ncols-1 polygons).
2 Draws the polygons joining for j fixed and for k=0..nrows, the points (xk,yk) where xk=element row k column 0 et yk=element row k column j ,when the xk are sorted (we obtain ncols-1 polygons).
3 Dibuja los polígonos unidos para j fijados y para k=0..nrows, los puntos (xk,yk) donde xk=elemento fila k columna 0 e yk=elemento fila k columna j, cuando xk están ordenados (podemos obtener ncols-1 polígonos).
0 Mtrx
-1 scatterplot
-2 listplot
-3 polygonscatterplot
polygonplot([[1,2,3],[2,0,1],[-1,2,3]])

# polygonscatterplot ligne_polygonale_pointee
1 Dessine les points (xk,yk) et les polygones joignant pour j fixé et  pour k=0..nrows, les points (xk,yk) où xk=élément ligne k colonne 0 et yk=élément ligne k colonne j en ordonnant les xk (on obtient ncols-1 polygons).
2 Draws the points (xk,yk) and the polygons joining for j fixed and for k=0..nrows, the points (xk,yk) where xk=element row k column 0 et yk=element row k column j ,when the xk are sorted (we obtain ncols-1 polygons).
3 Dibuja los puntos (xk,y) e los polígonos unidos para j fijados y para k=0..nrows, los puntos (xk,yk) donde xk=elemento fila k columna 0 e yk=elemento fila k columna j, cuando xk están ordenados (podemos obtener ncols-1 polígonos).
0 Mtrx
-1 scatterplot
-2 polygonplot
-3 listplot
polygonscatterplot([[1,2,3],[2,0,1],[-1,2,3]])

# scatterplot nuage_points
1 Dessine pour k=0..nrows, les points (xk,yk) où xk=élément ligne k colonne 0 et yk=élément ligne k colonne j (j=1..ncols).
2 Draws for k=0..nrows, the points (xk,yk) where xk=element row k column 0 and yk=element row k column j (j=1..ncols).
3 Dibuja para k=0..nrows, los puntos (xk,yk) donde xk=elemento fila k columna 0 e yk=elemento fila k columna j (j=1..ncols).
0 Mtrx
-1 polygonplot
-2 polygonscatterplot
-3 listplot
scatterplot([[1,2,3],[2,0,1],[-1,2,3]])

# user_operator
1 Définition d'un operateur binaire et renvoie 0 (insuccès) ou 1 (succès).
2 Definition of an binary operator and returns 0 (unsuccess) or 1(success).
3 Definición de un operador binario y devuelve 0 (fracaso) o 1 (éxito).
0 Str(R),Fnc(f),Opt(Binary||Unary||Delete)
-1 
user_operator("R",(x,y)->x*y+x+y,Binary) 
user_operator("R",(x,y)->x*y+x+y,Delete)

# count
1 Renvoie f(l[0])+f(l[1])+...+f(l[size(l)-1]).
2 Returns f(l[0])+f(l[1])+...+f(l[size(l)-1]).
3 Devuelve f(l[0])+f(l[1])+..+f(l[size(l)-1]).
0 Fnc(f),(Lst||Mtrx)(l),[Opt(row||col)]
-1 count_eq
-2 count_inf
-3 count_sup
count(id,[-2,-1,0,1,2,3])
count(1,[-2,-1,0,1,2,3])
count((x)->x>2,[3,5,1])
count( (x)->x==1,[-2,1,0,1,2,3])
count((x)->x>2,[[3,5],[4,1]])
count((x)->x>2,[[3,5],[4,1]],row)
count((x)->x>2,[[3,5],[4,1]],col)
count((x)->x>2 && x<4,[[3,5],[4,1]])
count((x)->x<2 || x>4,[[3,5],[4,1]])

# count_eq
1 Renvoie le nombre d'éléments de l égaux à a.
2 Returns the number of elements of l equal to a.
3 Devuelve el número de elementos de l iguals que a.
0 Real(a),(Lst||Mtrx)(l),[Opt(row||col)]
-1 count
-2 count_inf
-3 count_sup
count_eq(1,[-2,1,0,1,2,-3])
count_eq(4,[[3,4],[4,1]])
count_eq(4,[[3,4],[4,1]],row)
count_eq(4,[[3,4],[4,1]],col)

# count_inf
1 Renvoie le nombre d'éléments de l strictement inférieur à a.
2 Returns the number of elements of l strictly lower than a.
3 Devuelve el número de elementos de l estríctamente menores que a.
0 Real(a),(Lst||Mtrx)(l),[Opt(row||col)]
-1 count
-2 count_eq
-3 count_sup
count_inf(1,[-2,-1,0,1,2,3])
count_inf(4,[[3,5],[4,1]])
count_inf(4,[[3,5],[4,1]],row)
count_inf(4,[[3,5],[4,1]],col)

# count_sup
1 Renvoie le nombre d'éléments de l strictement supérieur à a.
2 Returns the number of elements of l strictly greater than a.
3 Devuelve el número de elementos de l estríctamente mayores que a.
0 Real(a),(Lst||Mtrx)(l),[Opt(row||col)]
-1 count
-2 count_inf
-3 count_eq
count_sup(1,[-2,-1,0,1,2,3])
count_sup(3,[[3,5],[4,1]])
count_sup(3,[[3,5],[4,1]],row)
count_sup(3,[[3,5],[4,1]],col)

# root
1 Renvoie b^(1/a) (root(2,3)=sqrt(3)).
2 Returns b^(1/a) (root(2,3)=sqrt(3)).
3 Calcula b^(1/a) (root(2,3)=sqrt(3)).
0 Expr(a),Expr(b)
-1 
root(3,2)
root(1/3,2)
root(3,1.2)
root(3.2,1.2)

# latex TeX
1 L'expression évaluée est écrite en latex dans la r\'eponse.
2 Returns the evaluated expression written in latex.
3 Devuelve la expresión evaluada escrita en LaTeX.
0 Expr
-1 mathml
latex(1/2)
latex((x^4-1)/(x^2+3))

# plotcontour contourplot DrwCtour
1 Dessine soit 11 lignes de niveaux équiréparties entre z=z_min,,...z=z_max de la surface z=exprxy, soit les lignes de niveaux définies par le 3-ème argument.
2 Draws whether 11 equirepartited contour-lines  z=z_min,,...z=z_max of the surface z=exprxy, whether the contour-lines defined by the 3-rd argument.
3 Dibuja 11 líneas de nivel equidistantes entre z=z_mina,..,z=z_max de la superficie z=exprxy, con las líneas de contorno definidas por el 3er argumento.
0 Expr(exprxy),[LstVar],[LstVal]
-1 plotdensity
-2 plotimplicit
plotcontour(x^2+y^2)
plotcontour(x^2+y^2,[x,y])
plotcontour(x^2+2*y^2-2,[x,y],[1.0,2.0,3.0])

# Circle
1 Trace le cercle de centre (xc,yc) et de rayon r (par defaut option=1 et option=0 efface ce cercle).
2 Draws the circle with center (xc,yc) and radius r (by default option=1 and option=0 is to remove this circle).
3 Dibuja un círculo con centro (xc, yc) y radio r (por defecto opción=1 y opción=0 son para borrar este círculo).
0 Real(xc),Real(yc),Real(r),[Intg(option)]
-1 circle
Circle(0,1,1)
Circle(0,1,1,0)
Circle(0,1,1,1)

# version giac
1 Renvoie le numéro de la version de giac que vous utilisez: giac 0.4.0
2 Returns the number giac version, you are using : giac 0.4.0
3 Devuelve el número de versión de giac que se está usando: giac 0.4.0
0 NULL
-1 
version()

# seq
1 Renvoie la séquence (2 ou 3 arg) ou la liste (4 ou 5 arg) obtenue lorsque var varie entre a et b (pas=p) dans expr (ou on répète n fois l'expression).
2 Returns the sequence (2 ou 3 arg) or the list (4 ou 5 arg) obtained when var go from a to b (step p) in expr (or the expr is repeated n times).
3 Devuelve la secuencia (2 ou 3 arg) o la lista (4 ou 5 arg) obtenida cuando var va desde a hasta b (paso=p) en expr (o la expresión es repetida n veces).
0 Expr(expr),Intg(n)||Var(var),[Intg(a)],[Intg(b)],[Intg(p)] 
-1 $
-2 makelist
seq(t,4)
seq(0,0)
seq(2^k,k=0..8)
seq(2^k,k=0..8,2)
seq(2^k,k,0..8)
seq(2^k,k,0,8)
seq(2^k,k,0,8,2)

# $
1 Version infixée de seq.
2 Infixed version of seq.
3 Operador infijo, version de seq.
0 (Expr(expr)),(Var(var)=Int(a..b) or Intg(n))
-1 seq
-2 makelist
 t$4
 0$0
 2$4
 (2^k)$(k=0..3)

# roots
1 Renvoie une matrice ayant 2 colonnes et dont les lignes les racines du polynôme avec leur multiplicité (pour 1 variable).
2 Returns a matrix having 2 columns and where the rows are the roots of the polynomial with their multiplicity (for 1 variable).
3 Devuelve una matriz con 2 columnas y donde las filas son las raíces del polinomio con su multiplicidad (para 1 variable).
0 Poly,[Var]
-1 proot
-2 cZeros
roots(t^3-1,t)
roots(x^5-2*x^4+x^3)

# pivot
1 Renvoie la matrice obtenue en créant des zéros dans la colonne nc de A, avec la méthode de Gauss-Jordan, en utilisant l'élément A[nl,nc] comme pivot.
2 Returns the matrix get from A creating zeros in the column nc, by the method of Gauss-Jordan with the element A[nl,nc] as pivot.
3 Devuelve la matriz obtenida de A haciendo ceros en la columna nc, por el método de Gauss-Jordan con el elemento A[nl,nc] como pivote.
0 Mtrx(A),Intg(nl),Intg(nc)
-1 gaussjord
-2 linsolve
pivot([[1,2],[3,4],[5,6]],0,1)
pivot([[1,2],[3,4],[5,6]],1,1)

# cZeros
1 Renvoie la liste des éléments complexes qui annulent l'expression ou la matrice dont les lignes sont les solutions du système : expr1=0,expr2=0...
2 Returns the list of complex elements solution of expr=0 or the matrix where the lines are the solutions of the system : expr1=0,expr2=0...
3 Devuelve la lista de elementos complejos solución de expr=0 o la matriz donde las filas son las soluciones del sistema: expr1=0, expr2=0,..
0 Expr(expr)||LstExpr, [Var||LstVar]
-1 solve
cZeros(x^2-1)
cZeros([x^2-1,x^2-y^2],[x,y])

# srand randseed
1 Renvoie un entier et initialise la suite des nombres aléatoires.
2 Returns an integer and initilize the sequence of random numbers.
3 Devuelve un entero e inicializa la secuencia de números enteros.
0 NULL
srand()
 srand

# powexpand
1 Développe l'expression en fonction de l'exposant.
2 Expands the expression in function of the exposant.
3 Expande la expresión en función de los exponentes.
0 Expr
-1
powexpand(2^(x+y))
powexpand(3^(2*x))

# mult_c_conjugate multiplier_conjugue_complexe
1 Renvoie l'expression après multiplication par la quantité complexe conjuguée du dénominateur (ou du numérateur si pas de dénominateur).
2 Returns the expression after multiplication by the complex conjugated quantity of the denominator (or of the numerator if no denominator).
3 Devuelve la expresión después de multiplicarla por el conjugado del denominador (o del numerador, si no hay denominador).
0 Expr
-1 mult_conjugate
mult_c_conjugate(1/(3+i*2))
mult_c_conjugate(3+i*2)

# mult_conjugate multiplier_conjugue
1 Renvoie l'expression après multiplication par la quantité conjuguée du dénominateur (ou du numérateur si pas de dénominateur).
2 Returns the expression after multiplication by the conjugated quantity of the denominator (or of the numerator if no denominator).
3 Devuelve la expresión después de multiplicarla por el conjugado del denominador (o del numerador, si no hay denominador).
0 Expr
-1 mult_c_conjugate
mult_conjugate(sqrt(3)-sqrt(2))
mult_conjugate(1/(sqrt(3)-sqrt(2)))

# comDenom
1 Renvoie l'expression après réduction au même dénominateur : le numérateur et le dénominateur sont développés [selon les puissances de la variable var].
2 Returns the expression after reduction at the same denominator : the numerator and the denominator are developperd [according to the powers of the variable var].
3 Devuelve la expresión después de reducirla a común denominador: el numerador y denominador son desarrollados [de acuerdo con las potencias de la variable var].
0 Expr,[Var(var)]
-1 normal
comDenom(1/x+1/y^2+1)
comDenom(1/x+1/y^2+1,y)
comDenom(1/x+1/y^2+1,x)

# cumSum
1 Retourne la liste (ou la séquence ou la chaîne) lr formée par les sommes cumulées des éléments de la liste l:lr[k]=sum(l[j],j=k..0) (ou concat(l[j],j=k..0)).
2 Returns the list (or the sequence or the string) lr where the elements are the cumulative sum of the list l:lr[k]=sum(l[j],j=0..k) (or concat(l[j],j=k..0)).
3 Devuelve la lista (o secuencia, o cadena= lr donde los elementos son sumas acumulativas de la lista l: lr[k]=sum(l[j],j=0..k) (o concatenadas (l[j],j=k..0)).
0 Lst(l)||Seq||Str
-1 sum
cumSum([0,1,2,3,4])
cumSum(1.2,3,4.5,6)
cumSum("a","b","c","d")

# normalize unitV
1 Renvoie le vecteur divisé par sa norme l2. normalize est aussi une option de plotfiefd.
2 Returns the vector divided by its l2norm. normalize is also an option for plotfiefd
3 Devuelve el vector dividido entre su norma l2.
0 Lst||Cplx
-1 l2norm
normalize(3+4*i)
normalize([3,4])
 fieldplot(-t*y,[t,y],normalize)
 fieldplot(-t*y,[t,y],normalize,xstep=0.5,ystep=0.5)

# l1norm
1 Renvoie la norme l1 du vecteur=somme des valeurs absolues de ses coordonnées.
2 Returns the l1 norm of the vector=sum of the absolue value of its coordinates.
3 Devuelve la norma l1 del vector=suma de los valores absolutos de sus coordenadas.
0 Vect
-1 l2norm
-2 maxnorm
l1norm([3,-4,2])

# Int
1 Renvoie la primitive ou l'intégrale (bornes a et b) sans l'évaluer.
2 Returns the primitive or the calculus of the integrate (bounds a and b) without evaluation.
3 Devuelve la primitiva del cálculo de la integral (entre a y b) sin evaluar.
0 Expr,[Var(x)],[Real(a)],[Real(b)]
-1 int
Int(sin(x))
Int(sin(t),t)
Int(sin(x),x,0,pi)

# dfc2f
1 Transforme une fraction continue en un réel.
2 Converts a continue fraction into a real.
3 Convierte una fracción continua en un real.
0 LstFrac_Cont)
-1 dfc
-2 convert
dfc2f([1,1,1])
dfc2f([1,2,[2]])


# dfc
1 Renvoie le développement en fraction continue de x0 d'ordre n ou de précision eps.
2 Returns the continue fraction developpement of x0 of order n or with precision eps.
3 Devuelve la fracción continua desarrollo de x0 de ornden n o con precisión eps.
0 Real(x0),Int(n)||Real(eps)
-1 dfc2f
-2 convert
dfc(sqrt(2),5)
dfc(pi,4)
dfc(evalf(pi),1e-09)
 convert(sqrt(2),confrac,'dev');dev
 convert(9976/6961,confrac,'l');l

# det_minor
1 Renvoie le déterminant calculé par le calcul des mineurs.
2 Returns the determinant calculated with the calculus of minors.
3 Devuelve el determinante calculado con cálculo de menores.
0 Mtrx(A)
-1 det
det_minor([[1,2],[3,4]]) 

# rm_all_vars
1 Efface tous les noms des variables.
2 Erase all the variable name.
3 Borra todos los nombres de variables.
0 NULL
-1 rm_a_z
 rm_all_vars()

# rm_a_z
1 Efface tous les noms des variables ayant une seule lettre a..z en minuscule.
2 Erase all the variable name with only one minuscule a..z character.
3 Borra todos los nombres de variables que sólo una letra minúscula como nombre.
0 NULL
-1 rm_all_vars
rm_a_z()

# risch
1 Renvoie une primitive de l'expression calculée selon l'algorithme de Risch.
2 Returns a primitive of the expression calculated with the Risch algorithm.
3 Devuelve la primitiva de una expresión calculada con el algoritmo de Risch.
0 Expr,[Var]
-1 int
risch(ln(x),x)
risch(ln(x))
risch(exp(x^2),x)

# rowAdd
1 Renvoie la matrice obtenue en remplacant dans A la ligne n2 par la somme des lignes n1 et n2.
2 Returns the matrix get from A by replacing the  n2th row by the sum of the n1th and n2th rows.
3 Devuelve la matrix obtenida a partir de A reemplzanado la fila n2, por la suma de las filas n1 y n2.
0 Mtrx(A),Intg(n1),Intg(n2)
-1 rowSwap
rowAdd([[1,2],[3,4],[5,6]],1,2)

# rowSwap
1 Renvoie la matrice obtenue en échangeant dans A la ligne n1 et la ligne n2.
2 Returns the matrix get from A by swapping the  n1th row and the n2th row.
3 Devuelve la matriz obtenida a partir de A intercambiando las filas n1 y n2.
0 Mtrx(A),Intg(n1),Intg(n2)
-1 rowAdd
rowSwap([[1,2],[3,4],[5,6]],1,2)

# variance
1 Renvoie la variance d'une liste pondérée par le deuxième argument ou la liste des variances des colonnes d'une matrice.
2 Returns the variance of the elements of its argument with the second argument as pound or the list of variance of the columns of a matrix.
3 Devuelve la varianza de los elementos de su argumento ponderado con el segundo argumento o la lista de varianzas de las columnas de una matriz.
0 Lst||Mtrx,[Lst]
-1 stddev
-2 mean
variance([3,4,2])
variance([1,2,3],[1,2,1])
variance([[1,2,3],[5,6,7]])

# erf
1 Renvoie la valeur approchée de 2/sqrt(pi)*int(exp(-t^2),t,0,x0).
2 Returns the approx value of 2/sqrt(pi)*int(exp(-t^2),t,0,x0).
3 Devuelve el valor aproximado de 2/sqrt(pi)*int(exp(-t^2),t,0,x0).
0 Real(x0)
-1 erfc
erf(1)
erf(1/(sqrt(2)))*1/2

# erfc
1 Renvoie la valeur approchée de 2/sqrt(pi)*int(exp(-t^2),t,x0,+infinity).
2 Returns the approx value of 2/sqrt(pi)*int(exp(-t^2),t,x0,+infinity).
3 Devuelve el valor aproximado de 2/sqrt(pi)*int(exp(-t^2),t,x0,+infinity).
0 Real(x0)
-1 erf
erfc(1)
erfc(1/(sqrt(2)))*1/2

# reduced_conic
1 Renvoie l'origine et la matrice du repère dans lequel la conique d'équation donnée, est réduite, 0 ou 1 (0 si la conique est dégénéréé) et l'équation de la conique dans ce repère ainsi que son équation paramétrique.
2 Returns the origin and the matrice of a base in which the conic given by its equation, is reduced, 0 or 1 (0 if the conic is degenerated) and the equation of the conic in this base and also its parametric equation.
3 Devuelve el origen y la matriz de una base en la cual la cónica es reducida, 0 o 1 (0 si la cónica es degenerada) y la ecuación de la cónica en esta base y su ecuación paramétrica.
0 Expr,[LstVar]
-1 gauss
-2 conic
reduced_conic(x^2+2*x-2*y+1)
reduced_conic(a*x^2-2*x*y+a*y^2-2*x+2*y+3,[x,y])
reduced_conic(2*u^2+2*u*v+2*v^2+5*u+3,[u,v])
reduced_conic((x+y)^2-2*x+1,x,y)

# reduced_quadric
1 Renvoie l'origine et la matrice du repère dans lequel la quadrique d'équation donnée, est réduite, la liste des valeurs propres et l'équation de la quadrique dans ce repère ainsi que son équation paramétrique.
2 Returns the origin and the matrice of a basis in which the quadric (given by its equation) is reduced, the list of its eigenvalues, the equation of the quadric in this basis and its parametric equation.
3 Devuelve el origen y la matriz de una base en la cual la quadrica es reducida, la lista de valores propios y la ecuación de la quadrica en esta base y su ecuación paramétrica.
0 Expr, [LstVar]
-1 gauss
-2 quadric
reduced_quadric(4*x^2+y^2+z^2-4*x*y+4*x*z-2*y*z+8*x-4*y+4*z+2)
reduced_quadric(x^2+3*y^2-3*z^2-8*y*z+2*z*x-4*x*y-1,x,y,z)
reduced_quadric((u+v)*(v-w)+3*u-5*v,[u,v,w])
reduced_quadric(7*x^2+4*y^2+4*z^2+4*x*y-4*x*z-2*y*z-4*x+5*y+4*z-18,[x,y,z])

# parallelogram
1 Renvoie et dessine le parallélogramme ABCD tel que vecteur(AB)+vecteur(AD)=vecteur(AC).
2 Returns and draws the parallelogram ABCD such as vector(AB)+vector(AD)=vector(AC).
3 Devuelve y dibuja el paralelograma ABCD tal que vector(AB)+vector(AD)=vector(AC).
0 Pnt(A)||Cplx,Pnt(B)||Cplx,Pnt(C)||Cplx,[Var(D)] 
-1 quadrilateral
-2 rhombus 
parallelogram(0,1,2+i)
parallelogram(1,0,2+i,D)
parallelogram(point(0,0,0),point(3,3,3),point(0,0,3))
parallelogram(point(0,0,0),point(3,3,3),point(0,0,3),D)

# subs
1 Equivalent de subst sauf en mode Maple où les arguments sont permutés, dans ce cas choisir alors l'exemple 2.
2 Equivalent of subst except in maple_mode where the arguments are switched over, in this case choose the second example.
3 Equivalente a subst excepto en modo Maple, donde los argumentos son permutados, en este caso escoge el segundo ejemplo.
0 Expr or Var=value,Var=value or Expr 
-1 subst
-2 maple_mode
subs(1/(4+x^2),x=2)
subs(x=2,1/(4+x^2))

# simult
1 Renvoie la matrice dont la colonne d'indice k est solution de A*X=colonne d'indice k de B (=B[0..nl-1,k..k] avec nl=nombre de ligne de B).
2 Returns the matrix where the column of index k is solution of A*X=column of index k of B (=B[0..nr-1,k..k] with nr=number of rows of B).
3 Devuelve la matriz donde la colúmna de índice k es solución de A*X=columna de índice k de B (=B[0..nr-1,k..k] con nr=número de filas de B).
0 Mtrx(A),Mtrx(B)
-1 rref
-2 linsolve
simult([[3,1],[3,2]],[[-2],[2]])
simult([[3,1],[3,2]],[[-2,1],[2,-1]])

# Pause
1 Instruction dans un programme permettant de suspendre son exécution [après avoir affiché la valeur de var] (ENTER permet de continuer l'exécution).
2 Instruction in a program stopping its execution [after printing the value of var] (the execution goes on if you press ENTER).
3 Instrucción de un programa que detiene su ejecución [después de escribir el valor de una variable] (la ejecución continua si se presiona ENTER).
0 [Var(var)]
-1 
Pause(a)
 Pause

# part
1 Renvoie la n-ième sous-expression de l'expression.
2 Returns the n-th subexpression of the expression.
3 Devuelve la n-ésima subexpresión de la expresión.
0 Expr, Intg(n)
-1 
part(sin(x)+cos(x),1)
part(sin(x)+cos(x),2)
part(exp(x)*sin(x),1)
part(part(exp(x)*sin(x)+cos(x),1),1)

# newList
1 Retourne la liste formée de n zéros.
2 Returns the list made with n zeros.
3 Devuelve una lista con n ceros.
0 Intg(n)
-1 newMat
-2 makelist
newList(4)

# newMat
1 Retourne la matrice de n lignes et p colonnes, formée de zéros.
2 Returns the list with n rows and p columns, made with zeros.
3 Devuelve una lista con n filas y p columnas con ceros.
0 Intg(n),Intg(p)
-1 newList
-2 makemat
newMat(2,3)

# QR
1 Pour A une matrice numérique, stocke dans Q une matrice orthogonale et dans R une matrice triangulaire supérieure vérifiant A=Q*R [en remplacant par 0 les éléments el tel que abs(el)<eps].
2 For a numerical matrix A, store in Q a orthogonal matrix and in U a lower matrix such that A=Q*R [exchanging by 0 the elements such that abs(el)<eps].
3 Para una matriz numérica, guarda en Q una matriz ortogonal y en R una matriz triangular superior, tal que A=Q*R [cambiando por 0 los elementos tales que abs(el)<eps].
0 Mtrx,Var(Q),Var(R),[Real(eps)]
-1 qr
-2 LU
QR([[1,2],[3,4]],Q,R)

# LU
1 Pour A une matrice numérique, stocke dans L une matrice triangulaire inférieure, dans U une matrice triangulaire supérieure et dans P une matrice de permutation vérifiant P*A=L*U.
2 For a numerical matrix A, store in L a upper matrix, in U a lower matrix and in P a permutation matrix such that P*A=L*U.
3 Para una matriz numércia A, guarda en L una matriz triangular inferior, en U una triangular superiory en P una matriz permutación tal que P*A=L*U.
0 Mtrx,Var(L),Var(U),Var(P)
-1 lu
-2 QR
LU([[1,2],[3,4]],L,U,P)
LU([[6,12,18],[5,14,31],[3,8,18]],L,U,P)

# iPart trunc
1 Renvoie l'argument sans sa partie fractionnaire (type=NUM).
2 Returns the argument without its fractionnal part (type=NUM).
3 Devuelve el argumento sin su parte fraccional (type=NUM).
0 Real||LstReal
-1 fPart
-2 floor
iPart(4.3)
iPart(sqrt(2))
iPart([4.3,sqrt(2)])

# fPart frac
1 Renvoie la partie fractionnaire.
2 Returns the fractional part.
3 Devuelve la parte fraccional.
0 Real||LstReal
-1 floor
-2 iPart
fPart(1/2)
fPart(1.2)
fPart([3.4,sqrt(2)])

# output Output
1 Instruction dans un programme permettant la sortie d'une expression stockée dans var.
2 Instruction in a program so that you can output an expression stored in var.
3 Instrucción en un programa que permite mostrar una expresión guardada en var.
0 [Str],Var(var)
-1 input
output("age",a)

# input Input lis
1 Instruction dans un programme permettant l'entrée d'une expression qui sera stockée dans var.
2 Instruction in a program so that you can input an expression and store it in var.
3 Instrucción en un programa que permite introducir una expresión y guardarla en var.
0 [Str],Var(var)
-1 InputStr
-2 output
input("age",a)

# InputStr textinput lis_phrase
1 Instruction dans un programme permettant l'entrée d'une chaîne de caractères qui sera stockée dans var.
2 Instruction in a program so that you can input a string and store it in var.
3 Instrucción en un programa que permite introducir una cadena y guardarla en var.
0 [Str],Var(var)
-1 input
InputStr("nom?",N)


# getType
1 Retourne le type de l'argument (STR,EXPR,FUNC,NUM,LIST,MAT,VAR,NONE,PIC...).
2 Returns the type of the argument (STR,EXPR,FUNC,NUM,LIST,MAT,VAR,NONE,PIC...).
3 Devuelve el tipo del argumento (STR,EXPR,FUNC,NUM,LIST,MAT,VAR,NONE,PIC...).
0 Expr
-1 
getType("aze")
getType(2+i)
getType(x->cos(2*x))
getType(1.414)

# getKey
1 Instruction dans un programme qui renvoie 0 si aucune touche est pressée et sinon renvoie le code ascii de la touche pressée.
2 Instruction in a program, returns 0 if no key is pressed and else returns the ascii code of the pressed key.
3 Instrucción en un programa, devuelve 0 si no pulsa ninguna tecla, y si no, devuelve el código ascii de la tecla pulsada.
0 NULL
-1 
getKey()

# string
1 Retourne l'expression évaluée sous la forme d'une chaîne de caractères.
2 Returns the evaluated expression as a string.
3 Devuelve la expresión evaluada como una cadena.
0 Expr
-1 expr
-1 format
string(1.23)
string(a:=12)
string(quote(a:=12))

# denom
1 Renvoie le dénominateur de l'expression simplifiée.
2 Returns the denominator of the simplified expression.
3 Devuelve el denominador de una expresión simplificada.
0 Expr
-1 getDenom
-2 getNum
-3 numer
-4 f2nd
denom(25/15)
denom((x^3-1)/(x^2-1))
denom(1+(x^3-1)/x^2)

# getDenom
1 Renvoie le dénominateur de l'expression non simplifiée.
2 Returns the denominator of the unsimplified expression.
3 Devuelve el denominador de una expresión no simplificada.
0 Expr
-1 denom
-2 getNum
-3 numer
-4 f2nd
getDenom(25/15)
getDenom((x^3-1)/(x^2-1))
getDenom(1+(x^3-1)/x^2)

# getNum
1 Renvoie le numérateur de l'expression non simplifiée.
2 Returns the numerator of the unsimplified expression.
3 Devuelve el numerador de la expresión no simplificada.
0 Expr
-1 numer
-2 denom
-3 getDenom
-4 f2nd
getNum(25/15)
getNum((x^3-1)/(x^2-1))
getNum(1+(x^3-1)/x^2)

# numer
1 Renvoie le numérateur de l'expression simplifiée.
2 Returns the numerator of the simplified expression.
3 Devuelve el numerador de la expresión simplificada.
0 Expr
-1 getNum
-2 getDenom
-3 denom
-4 f2nd
numer(25/15)
numer((x^3-1)/(x^2-1))
numer(1+(x^3-1)/x^2)

# DrawSlp
1 Dessine la droite passant par le point (a,b) et de pente m: y-b=m(x-a).
2 Draws the line with slope m,going through the point (a,b): y-b=m(x-a).
3 Dibuja la recta con pendiente m que pasa por (a,b): y-b=m*(x-a).
0 Real(a),Real(b),Real(m)
-1 line
DrawSlp(2,1,-1) 

# slope
1 Renvoie la pente de la droite définie dans l'argument ou est un attribut de droite.
2 Returns the slope of the line defined in the argument or is an attribut of line.
3 Dibuja la pendiente de la recta definida en argumento.
0 Line||Pnt||Cplx,[Pnt||Cplx]
-1 line
-2 tangent
-3 LinTan
slope(line(1,2i))
slope(segment(1,2i))
slope(1,2i)
slope(line(y+2x=2))
slope(point(1),point(2i))
slope(tangent(plotfunc(sin(x)),pi/4)) 
slope(LineTan(sin(x),pi/4)) 

# findhelp ?
1 Renvoie l'aide de la commande (pour ? infixé voir when).
2 Returns the help about the command (for ? infixed see when) .
3 Devuelve la ayuda sobre el comando (por ? infijo véase when).
0 Cmd
-1 ifte
findhelp(ifactor)

# Fill
1 Remplit la liste ou la matrice contenue dans A avec exprs.
2 Fill the list or the matrix stored in A with exprs.
3 Rellena la lista o matriz guardada en A con exprs.
0 Expr(exprs),Var(A)
-1 makelist
-2 makemat
Fill(1.1,A)

# expr execute
1 Instruction transformant une chaîne en une commande ou en un nombre.
2 Instruction transforming a string into a command or into a number.
3 Instrucción que transforma una cadena en un comando o en un número.
0 Str
-1 string
expr("ifactor(54)")
expr("123")
expr("0123")

# exp2list
1 Renvoie la liste formée par les membres de droite de var=expr0 or var=expr1, utile après solve en mode TI.
2 Returns the list made with the right member of var=expr0 or var=expr1, to be used after solve in TI mode
3 Devuelve la lista formada por los elementos derechos de var=expr0 o var=expr1.
0 Expr
exp2list((x=2) or (x=0))
exp2list(solve(x^2-1))

# ClrGraph ClrDraw
1 Efface les graphes et les objets géométriques de l'écran graphique DispG.
2 Clear the graphs and  the geometric objects on the graphic screen DispG.
3 Borra los gráficos y los objetos geométricos en la pantalla gráfica DispG.
0 NULL
-1 ClrIO
-2 erase
-3 erase3d
ClrGraph()

# NewFold
1 Crée un nouveau répertoire puis on est placé dans ce répertoire.
2 Make a new folder and then we are in this folder.
3 Crea un nuevo directorio y se situa en dicho directorio.
0 Var
-1 SetFold
-2 DelFold
-3 GetFold
NewFold(essai)

# SetFold
1 Renvoie le nom du répertoire en cours et choisit le nom indiqué comme nouveau répertoire (main pour le répertoire racine).
2 Returns the name of the current folder and chooses the appointed name as new folder (main for the root folder).
3 Devuelve el nombre del directorio actual y escoge el nombre señalado como nuevo directorio (main para el directorio raiz).
0 Var
-1 NewFold
-2 DelFold
-3 GetFold 
SetFold(essai)
SetFold(main)

# DelFold
1 Efface le répertoire indiqué (il y a erreur si ce répertoire n'est pas vide).
2 Remove the appointed folder (there is an error if this folder is not empty).
3 Borra el directorio señalado (hay un error si dicho directorio no está vacio).
0 Var
-1 SetFold
-2 NewFold
-3 GetFold 
DelFold(essai)

# GetFold
1 Renvoie le nom du répertoire en cours.
2 Returns the name of the current folder.
3 Devuelve el nombre del directorio actual.
0 Var
-1 SetFold
-2 DelFold
-3 NewFold 
GetFold()

# avgRC
1 Calcule le taux d'accroissement de l'expression quand on passe de var à var+h : (expr(var+h)-expr(var))/h (par défaut h=0.001).
2 Returns (expr(var+h)-expr(var))/h (by default h=0.001).
3 Devuelve (expr(var+h)-expr(var))/h (por defecto h=0.001).
0 Expr(expr(var)),Var(var),[Real(h)]
-1 nDeriv
avgRC(f(x),x,h)
avgRC(x^2,x,0.1)
avgRC(x^2,x)

# nDeriv
1 Renvoie une approximation du nombre dérivé en un point :(expr(var+h)-expr(var-h))/(2*h) (par défaut h=0.001).
2 Returns an approximation of the derivative number at a point:(expr(var+h)-expr(var-h))/(2*h) (par défaut h=0.001).
3 Devuelve una aproximación de la derivada numérica en un punto: (expr(var+h)-expr(var-h))/(2*h) (por defecto h=0.001).
0 Expr(expr(var)),Var(var),[Real(h)]
-1 avgRC
nDeriv(f(x),x,h)
nDeriv(x^2,x,0.1)
nDeriv(x^2,x)

# Archive
1 Protège les variables données comme argument dans un fichier archive.
2 Protects the variables given as argument in an archive file.
3 Proteje las variables dada como argumento en un fichero.
0 SeqVar
-1 Unarchiv
-2 archive
-3 unarchive
Archive(a,b)

# Unarchiv
1 Déprotège les variables données comme argument.
2 Unprotects the variables given as argument.
3 Desprotege las variables dadas como argumento.
0 SeqVar 
-1 Archive
-2 archive
-3 unarchive
Unarchiv(a,b)

# archive 
1 Archive le contenu d'une variable ou d'une liste de variables donnée comme argument dans le fichier spécifié (lisible avec unarchive).
2 Archive the value of a variable or of a list of variables given as argument in the specified file (legible with unarchive).
3 Guarda una expresión en un archivo de texto.
0 Str(namefich),Seq(Var)
-1 unarchive
-2 Archive
-3 Unarchiv
archive("toto",[a,b])
archive("aa.txt",aa)

# unarchive 
1 Lit les valeurs d'une variable ou d'une liste des variables qui se trouve dans le fichier donné comme argument (fichier créé avec archive).
2 Reads the value of a variable or of a list of variables which are in the file  given as argument (file created with archive).
3 Lee una variable guardad en un archivo de texto
0 Str(namefich),Seq(Var)
-1 archive
-2 Archive
-3 Unarchiv
unarchive("toto")
unarchive("aa.txt")

# CopyVar
1 Copie sans l'évaluer le contenu de var1 dans var2.
2 Copy the storage without evaluation of var1 into var2.
3 Copia sin evaluar el contenido de var1 en var2.
0 Var(var1),Var(var2)
-1 
CopyVar(A,B)

# csolve cSolve resoudre_dans_C
1 Renvoie la matrice dont les lignes sont solutions du système d'équations.
2 Returns the matrix where the rows are solutions of the system of equations.
3 Devuelve la matriz cuyas filas son solución del sistema de ecuaciones.
0 LstEq,LstVar
-1 cZeros
-2 solve
-3 fslove
csolve(x^4-1,x) 
csolve(x^4-y^4 and x+y=2,[x,y]) 
csolve(x^4-y^4 and x+y=0 and x^2=2*x,[x,y])
csolve(u*v-u=v and v^2=u,[u,v])

# arcLen
1 Calcule la longueur de l'arc de courbe définie par y=expr(ou par x=expr1,y=expr2) pour les valeurs du paramètre comprises entre a et b.
2 Returns the length of the arc of the curve defined by y=expr(or by x=expr1,y=expr2) when the parameter values are between a and b.
3 Devuelve la longitud del arco de la curva definida por y=expr(o por x=expr1,y=expr2) cuando los valores de los parámetros están entre a y b.
0 Expr(expr) or Lst([expr1,expr2]),Var,Real(a),Real(b)
-1 int
arcLen(t^2,t,1,2)
arcLen([t,t^2],t,1,2)
arcLen([cos(t),sin(t)],t,1,2)

# cas_setup
1 Permet d'initialiser le cas, arguments: Approx,Cplx_var,Cplx,Angle,Format,Epsilon,Digit
2 Is the command for initialised the cas, arguments: Approx,Cplx_var,Cplx,Angle,Format,Epsilon,Digit
3 Es el comando que inicializa el cas, argumentos: Approx,Cplx_var,Cplx,Angle,Format,Epsilon,Digit
0 Int,Int,Int,Int,Int,Real,Int
-1 complexe_mode
-2 angle_radian
 cas_setup(0,0,0,1,0,1e-10,12)

# about
1 Renvoie les hypothèses faites avec assume sur la variable a (on peut mettre about(a) ou assume(a)).
2 Returns the hypothesis made with assume on the variable a.
3 Devuelve las hipótesis hechas con assume en la variable a.
0 Var(a)
-1 assume
-2 purge
about(a)
about(n)

# abscissa
1 Renvoie l'abscisse du point ou du vecteur.
2 Returns the abscissa of a point or a vector.
3 Devuelve la abcisa de un punto o un vector.
0 Pnt or Vect
-1 ordinate
-2 affix
-3 cote
-4 coordinates
abscissa(point(1+2*i))
abscissa(point(i)-point(1+2*i))
abscissa(-1-i)
abscissa(point(1,2,3))

# binomial
1 Renvoie comb((n,k)*p^k*(1-p)^(n-k) ou comb(n,k) si pas de 3-ième argument.
2 Returns comb((n,k)*p^k*(1-p)^(n-k) ou comb(n,k) if no 3_rd argument.
3 Devuelve comb((n,k)*p^k*(1-p)^(n-k) o comb(n,k) si no hay 3er argumento.
0 Intg(n),Intg(k),[Real(p)]
-1 binomial_cdf
-2 binomial_icdf
binomial(4,0,0.5)
binomial(4,2,0.5)
binomial(4,2)

# binomial_cdf
1 Renvoie Proba(X<=x) quand X suit la loi B(n,p).
2 Returns Proba(X<=x) when X follows the  B(n,p) law.
3 Devuelve Proba(X<=x) cuando X sigue la ley B(n,p).
0 Intg(n),Real(p),Real(x)
-1 binomial
-2 binomial_icdf
binomial_cdf(4,0.5,2)
binomial_cdf(4,0.1,2)

# binomial_icdf
1 Renvoie h tel que Proba(X<=h)=t quand X suit la loi B(n,p).
2 Returns h such as Proba(X<=h)=t when X follows the  B(n,p) law.
3 Devuelve h tal que Proba(X<=h)=t cuando X sigue la ley B(n,p).
0 Intg(n),Real(p),Real(t)
-1 binomial
-2 binomial_cdf
binomial_icdf(4,0.5,0.68)
binomial_icdf(4,0.1,0.95)

# colspace
1 Renvoie une matrice dont les colonnes forment une base de l'espace vectoriel engendré par les colonnes de la matrice A [d est la dimension de cet espace].
2 Retuns a matrix where the columns are a basis of the vector space generated by the columns of the matrix A [d is the dimension of this space].
3 Devuelve una matriz cuyas columnas son una base del espacio de vectores generados por las columnas de la matriz A [d es la dimensión de este espacio].
0 Mtrx(A), [Var(d)]
-1 rowspace
colspace([[1,2,3],[1,2,3],[1,2,4],[1,2,5]])
colspace([[1,2,3],[1,3,6],[2,5,9]],dim)

# @@
1 Désigne la fonction : fof..of (n fois) (opérateur infixé).
2 Is the function fof..of (n times) (infixed operator).
3 Designa la función: fof...of (n veces) (operador infijo).
0 Fnc(f),Intg(n)
-1 @
 sin@@3
 (sin@@3)(x)

# @
1 Désigne la composition de fonctions (opérateur infixé).
2 Is the infixed operator for composition of functions.
3 Es el operador infijo de la composición de funciones.
0 Fnc,Fnc
-1 @@
 sq@sin
 sin@sin
 (sq@sin)(x)

# angle_radian
1 Nom qui permet de travailler en radian (angle_radian:=1) ou en degré (angle_radian:=0).
2 Name which allow to work with radian (angle_radian:=1) or degree (angle_radian:=0).
3 Nombre que permite trabajar con radianes (angle_radian:=1) o grados (angle_radian:=0).
0 :=Intg(0 or 1)
-1 cas_setup
 angle_radian:=1
 angle_radian:=0

# approx_mode
1 Nom qui permet de travailler en mode approximatif (approx_mode:=1) ou en mode exact (approx_mode:=0).
2 Name which allow to work in approximative mode (approx_mode:=1) or in exact mode (approx_mode:=0).
3 Nombre que permite trabajar en modo aproximado (approx_mode:=1) o en modo exacto (approx_mode:=0).
0 :=Intg(0 or 1)
-1 cas_setup
 approx_mode:=1
 approx_mode:=0

# complex_mode
1 Nom qui permet de travailler en mode complexe (complex_mode:=1) ou en mode réel (complex_mode:=0).
2 Name which allow to work in complex mode (complex_mode:=1) or in real mode (complex_mode:=0).
3 Nombre que permite trabajar en modo complejo (complex_mode:=1) o en modo real (complex_mode:=0).
0 :=Intg(0 or 1)
-1 cas_setup
 complex_mode:=1
 complex_mode:=0

# complex_variables
1 Nom qui permet de travailler avec des variables complexes (complex_variables:=1) ou avec des variables réelles (complex_variables:=0).
2 Name which allow to work with complex variables (complex_variables:=1) or with real variables (complex_variablesmode:=0).
3 Nombre que permite trabajar con variables complejas (complex_variables:=1) con variables reales (complex_variables:=0).
0 :=Intg(0 or 1)
-1 cas_setup
 complex_variables:=1
 complex_variables:=0

# variables_are_files
1 Nom qui permet de spécifier si on veut sauver les différentes variables dans un fichier "nomdelavariable.cas".
2 Name which allow to specify if you want to save the variables as file "nameofthevariable.cas".
3 Nombre que permite especificar si se quieren guardar las variables como "nombredevariable.cas".
0 :=Intg(0 or 1)
-1 cas_setup
 variables_are_files:=1
 variables_are_files:=0

# Digits DIGITS
1 Nom qui permet de modifier le nombre n de chiffres significatifs (Digits:=n).
2 Name which allow to modify the number of significant digits (Digits:=n).
3 Nombre que permite modificar el número de dígitos significantes (Digits:=n).
0 :=Intg(n)
-1 cas_setup
 Digits:=16
 Digits:=24

# function_diff fonction_derivee
1 Renvoie la fonction dérivée de la fonction f.
2 Returns the derivative function of the function f.
3 Devuelve la función derivada de la funciónf.
0 Fnc(f)
-1 diff
-2 @
function_diff(sin+id)
function_diff(sq@sin+id)

# id
1 Désigne la fonction identité (R^n-> R^n).
2 Is the name of the identity function (R^n-> R^n).
3 Es el nombre de la función identidad (R^n-> R^n).
0 Seq
-1 sq
-2 sqrt
id(1,2,3)

# ordinate
1 Renvoie l'ordonnée du point ou du vecteur.
2 Returns the ordinate of a point or a vector.
3 Devuelve la ordenada de un punto de un vector.
0 Pnt or Vect
-1 abscissa
-2 affix
-3 cote
-4 coordinates
ordinate(point(1+2*i))
ordinate(point(i)-point(1+2*i))
ordinate(-1-i)
ordinaee(point(1,2,3))

# poisson_cdf
1 Renvoie Proba(X<=x) quand X suit la loi de Poisson de moyenne mu.
2 Returns Proba(X<=x) when X follows the  Poisson law with mu as mean.
3 Devuelve Proba(X<=x) cuando X sigue la ley de Poisson con media mu.
0 Real(mu),Real(x)
-1 poisson
-2 poisson_icdf
poisson_cdf(4.0,7)
poisson_cdf(2.5,4)

# poisson_icdf
1 Renvoie h tel que Proba(X<=h)=t quand X suit la loi de Poisson de paramètre mu.
2 Returns h such as Proba(X<=h)=t when X follows the Poisson law with mu as parameter.
3 Devuelve h tal que Proba(X<=h)=t cuando X sigue una ley de Poisson con mu como parámetro.
0 Real(mu),Real(t)
-1 poisson
-2 poisson_cdf
poisson_icdf(4.0,0.95)
poisson_icdf(2.5,0.9)

# poisson
1 Renvoie exp(-mu)*mu^k/k!
2 Returns exp(-mu)*mu^k/k!
3 Devuelve exp(-mu)*mu^k/k!
0 Real(mu),Intg(k)
-1 poisson_cdf
-2 poisson_icdf
poisson(0.5,2)
poisson(4.0,2)

# rowspace
1 Renvoie une matrice dont les lignes forment une base de l'espace vectoriel engendré par les lignes de la matrice A [d est la dimension de cet espace].
2 Returns a matrix where the rows are a basis of the vector space generated with the rows of the matrix A [d is the dimension of this space].
3 Devuelve una matriz donde las filas son una base de un espacio vectorial generado por las filas de la matriz A [d es la dimensión de este espacio].
0 Mtrx(A), [Var(d)]
-1 colspace
rowspace([[1,2,3],[1,2,3],[1,2,4],[1,2,5]])
rowspace([[1,2,3],[1,3,6],[2,5,9]],d)

# sq
1 Désigne le nom de la fonction (R^n->R)=somme des carrés des arguments.
2 Is the name of the function (R^n->R)=sum of the square of the arguments.
3 Es el nombre de la función (R^n->R)=suma del cuadrado de los argumentos.
0 Seq
-1 sqrt
sq(5)
sq(1,2,3)

# linear_interpolate
1 Echantillone de maniere reguliere une ligne polygonale definie par une matrice a 2 lignes
2 Make a regular sample from a polygonal line defined by a 2 rows matrix
3 Dibuja
0 Mtrx,xmin,xmax,xstep
-1 polygonplot
linear_interpolate([[1,2,6,9],[3,4,6,7]],1,9,1)

# logistic_regression
1 Renvoie y,y',C,y'max,xmax,R : y est une fonction logistique (sol de y'/y=a*y+b) telle que y(x0)=y0 et dont le y' approche au mieux les valeurs de L pour x=x0, x0+1...x0+k.
2 Returns y,y',C,y'max,xmax,R : y is a logistic function (sol of y'/y=a*y+b), such that y(x0)=y0 and where [y'(x0),y'(x0+1)...] is the best approximation of L.
0 Lst(L),Real(x0),Real(y0)  
-1 polynomial_regression
-2 power_regression
-3 linear_regression
logistic_regression(evalf([1,2,4,6,8,7,5]),1,2) 
logistic_regression([0.0,1.0,2.0,3.0,4.0],0.0,1.0) 

# logistic_regression_plot
1 Renvoie le graphe de la fonction logistique y telle que y(x0)=y0 et dont le y'  approche au mieux les valeurs de L pour x=x0, x0+1...x0+k.
2 Returns the plot of a logistic function y such that y(x0)=y0 and where [y'(x0),y'(x0+1)...] is the best approximation of L.
0 Lst(L),Real(x0),Real(y0)  
-1 polynomial_regression_plot
-2 power_regression_plot
-3 linear_regression_plot
logistic_regression_plot(evalf([1,2,4,6,8,7,5]),1,2) 
logistic_regression_plot([0.0,1.0,2.0,3.0,4.0],0.0,1.0) 

# linear_regression
1 Renvoie les coefficients a et b de y=a*x+b : c'est la droite qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the coefficients a and b of y=a*x+b ;it is  the best line approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve los coeficientes a y b de y=a*x+b: la mejor aproximación de la recta cuyas coordenadas son las filas de A (o las 2 listas).
0 Lst||Mtrx(A),[Lst]
-1 polynomial_regression
-2 power_regression
-3 logistic_regression
linear_regression([[0.0,0.0],[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]]) 
linear_regression([0.0,1.0,2.0,3.0,4.0],[0.0,1.0,4.0,9.0,16.0]) 

# linear_regression_plot
1 Renvoie le graphe de y=a*x+b : c'est la droite qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the plot of y=a*x+b ;it is  the best line approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve la gráfica de y=a*x+b: la mejor aproximación de la recta cuyas coordenadas son las filas de A (o las 2 listas).
0 Lst||Mtrx(A),[Lst]
-1 polynomial_regression_plot
-2 power_regression_plot
linear_regression_plot([[0.0,0.0],[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]]) 
linear_regression_plot([0.0,1.0,2.0,3.0,4.0],[0.0,1.0,4.0,9.0,16.0]) 


# logarithmic_regression
1 Renvoie les coefficients (m, b) de y=m*ln(x)+b : c'est le logarithme qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the coefficients a and b of y=a*ln(x)+b : it is the best logarithm which approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve los coeficientes a y b de y=a*ln(x)+b: la mejor aproximación logarítmica cuyas coordenadas son las filas de A (o las 2 listas).
0 Lst||Mtrx(A),[Lst]
-1 exponential_regression
logarithmic_regression([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])
logarithmic_regression([1.0,2.0,3.0,4.0],[1.0,4.0,9.0,16.0])

# logarithmic_regression_plot
1 Renvoie le graphe de y=m*ln(x)+b : c'est le logarithme qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the plot of y=a*ln(x)+b : it is the best logarithm which approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve  la gráfica de y=a*ln(x)+b: la mejor aproximación logarítmica cuyas coordenadas son las filas de A (o las 2 listas).
0 Lst||Mtrx(A),[Lst]
-1 exponential_regression_plot
logarithmic_regression_plot([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])
logarithmic_regression_plot([1.0,2.0,3.0,4.0],[1.0,4.0,9.0,16.0])

# polynomial_regression
1 Renvoie les coefficients (an,...a1,a0) de y=an*x^n+..a1x+a0) : c'est le polynôme qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes) (n est le 2ième argument).
2 Returns the coefficients (an,...a1,a0) of y=an*x^n+..a1x+a0) : it is the best polynomial which approx the points where the coordinates are the rows of A (or the 2 lists) (n is the 2nd argument).
3 Devuelve los coeficientes (an,..,a1,a0) de y=an*x^n+..+a1*x+a0: la mejor aproximación polinómica cuyas coordenadas son las filas de A (o las 2 listas) (n es el segundo argumento).
0 Lst||Mtrx(A),[Lst],Intg(n)
-1 linear_regression
-2 power_regression
polynomial_regression([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]],3)
polynomial_regression([[0.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]],3)
polynomial_regression([0.0,2.0,3.0,4.0],[1.0,4.0,9.0,16.0],3)

# polynomial_regression_plot
1 Renvoie le graphe de y=an*x^n+..a1x+a0) : c'est le polynôme qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes) (n est le 2ième argument).
2 Returns the plot of y=an*x^n+..a1x+a0) : it is the best polynomial which approx the points where the coordinates are the rows of A (or the 2 lists) (n is the 2nd argument).
3 Devuelve la gráfica de y=an*x^n+..+a1*x+a0: la mejor aproximación polinómica cuyas coordenadas son las filas de A (o las 2 listas) (n es el segundo argumento).
0 Lst||Mtrx(A),[Lst],Intg(n)
-1 linear_regression_plot
-2 power_regression_plot
polynomial_regression_plot([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]],3)
polynomial_regression_plot([[0.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]],3)
polynomial_regression_plot([0.0,2.0,3.0,4.0],[1.0,4.0,9.0,16.0],3)

# power_regression
1 Renvoie les coefficients (m,b) de y=b*x^m : c'est le monôme qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the coefficients (m,b) of y=b*x^m : it is the best monomial which approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve los coeficientes (m,b) de y=b*x^m: la mejor aproximación monómica cuyas coordenadas son las filas de A (o las 2 listas).
0 Lst|Mtrx(A),[Lst]
-1 polynomial_regression
-2 linear_regressiont
power_regression([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])
power_regression([[1.0,2.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])
power_regression([1.0,2.0,3.0,4.0],[2.0,4.0,9.0,16.0])

# power_regression_plot
1 Renvoie le graphe de y=b*x^m : c'est le monôme qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the plot of y=b*x^m : it is the best monomial which approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve la gráfica de y=b*x^m: la mejor aproximación monómica cuyas coordenadas son las filas de A (o las 2 listas).
0 Lst||Mtrx(A),[Lst]
-1 polynomial_regression_plot
-2 linear_regression_plot
power_regression_plot([[1.0,1.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])
power_regression_plot([[1.0,2.0],[2.0,4.0],[3.0,9.0],[4.0,16.0]])
power_regression_plot([1.0,2.0,3.0,4.0],[2.0,4.0,9.0,16.0])

# convert convertir
1 Renvoie la valeur de cmd(expr) si cmd est le nom d'une commande spécifié par le 2ième argument ou reécrit expr selon l'option cmd (par ex sin=fct trigsin).
2 Returns the value of cmd(expr) cmd is the name of a command specified by the 2nd argument (for ex sin=fct trigsin).
3 Devuelve el valor de cmd(expr) cmd es el nombre de un comando especificado como 2o argumento (por ejemplo sin=fct trigsin).
0 Expr(expr),Cmd(cmd)
-1 mksa
-2 series
convert(exp(i*x),sincos)
convert(1/(x^4-1),parfrac)
convert(series(sin(x),x=0,6),polynom)
convert(cos(x)^2+1,sin)
convert(3e10_m,_au)
convert(9976/6961,confrac,'l');l
convert(sqrt(2),confrac,'dev');dev
convert(123,base,8)
convert([3,7,1],base,8)

# base
1 Argument de convert : convert(p,base,b)= [a0,a1,..an] ou convert([a0,a1,..an],base,b)=p avec p=a0+a1*b+....an*b^(n-1).
2 Argument for convert : convert(p,base,b)= [a0,a1,..an] or convert([a0,a1,..an],base,b)=p with p=a0+a1*b+....an*b^(n-1).
3 Argumento para convert : convert(p,base,b)=[a0,a1,..an] o convert([a0,a1,..an],base,b)=p con p=a0+a1*b+....an*b^(n-1).
0 
-1 convert
-2 horner
-3 revlist
 convert(123,base,8)
 convert([3,7,1],base,8)
 horner(revlist([3,7,1]),8)

# lcoeff
1 Renvoie le coefficient du terme de plus haut degré d'un polynôme (l=leading).
2 Returns the coefficient of the term of highest degree of a polynomial (l=leading).
3 Devuelve el coeficiente del término de mayor grado de un polinomio (l=leading).
0 Poly||Lst
-1 tcoeff
lcoeff(-2*x^3+x^2+7*x)
lcoeff([-2,1,7,0])

# tcoeff
1 Renvoie le coefficient du terme de plus bas degré d'un polynôme (t=trailing).
2 Returns the coefficient of the term of lowest degree of a polynomial (t=trailing).
3 Devuelve el coeficiente del término de menor grado de un polinomio (t=trailing).
0 Poly||Lst
-1 lcoeff
tcoeff(-2*x^3+x^2+7*x)
tcoeff([-2,1,7,0])

# list2mat
1 Renvoie la matrice ayant n colonnes dont les termes sont donnés par l complétée eventuellent par 0.
2 Returns the matrix with n columns and where terms are the list l completeded eventualy by 0.
3 Devuelve la matriz de los términos dados en la lista y con n columnas.
0 Lst(l),Intg(n)
-1 mat2list
list2mat([1,8,4,9],1)
list2mat([1,8,4,9],2)

# mat2list
1 Renvoie la liste contenant les termes de la matrice.
2 Returns the list of the terms of the matrix.
3 Devuelve la lista de términos de la matriz.
0 Mtrx
-1 list2mat
mat2list([[1,8],[4,9]])

# deltalist
1 Renvoie la liste obtenue en faisant la différence de deux termes consécutifs.
2 Returns the list of the difference of two terms in succession.
3 Devuelve una lista con las diferencias de términos consecutivos en una sucesión.
0 Lst
-1
deltalist([1,4,8,9])
deltalist([1,8,4,9])

# multiply
1 Renvoie le produit des 2 arguments. 
2 Returns the product of the 2 arguments.
3 Devuelve el producto de 2 argumentos.
0 Intg or Lst, Intg or Lst
-1
multiply(41,-4)
multiply([4,1],[-4,0])
multiply([[4,1],[-4,1]],[[4,1],[-4,1]])

# accumulate_head_tail
1 Renvoie la liste obtenue à partir de l, en remplacant les p premiers et les q derniers éléments par leur somme.
2 Returns the list where the first p and the last q elements of l are replaced by their sum.
3 Devuelve la lista obtenida a partir de l, donde los primeros p y los últimos q elementos son reemplazados por su suma.
0 Lst(l),Intg(p),Intg(q)
-1
accumulate_head_tail([0,1,2,3,4,5,6,7,8,9],3,2)

# square
1 Renvoie et dessine le carré  de coté AB (ABCD est direct) (dans le plan ABP).
2 Returns and draws the square of side  AB (ABCD is direct) (in the plane ABP.
3 Devuelve y dibuja el cuadrado de lado AB (ABCD es directo) (en el plan ABP).
0 (Pnt(A) or Cplx),(Pnt(B) or Cplx),[Pnt(P),Var(C),Var(D)]
-1 rhombus
-2 quadrilateral
square(i,1+i)
square(i,1+i,C,D)
square(point(0,0,0),point(3,3,3),point(0,0,3))
square(point(0,0,0),point(3,3,3),point(0,0,3),C,D)

# hexagon
1 Renvoie et dessine l'hexagone  de coté AB (ABCDEF est direct) (dans le plan ABP).
2 Returns and draws the hexagon of side  AB (ABCDEF is direct) (in the plane ABP.
3 Devuelve y dibuja el hexagon de lado AB (ABCD es directo) (en el plan ABP).
0 Pnt(A)||Cplx,Pnt(B)||Cplx,[Pnt(P)],[Var(C)],[Var(D)],[Var(E)],[Var(F)]
-1 isopolygon
-2 polygon
hexagon(i,1+i)
hexagon(i,1+i,C,D,E,F)
hexagon(point(0,0,0),point(3,3,3),point(0,0,3))
hexagon(point(0,0,0),point(3,3,3),point(0,0,3),C,D,E,F)

# rhombus
1 Renvoie et dessine le losange ABCD tel que angle (AB,AD)=a (ou dans le plan ABP angle(AB,AD)=angle(AB,AP) ou tel que angle(AB,AD)=a).
2 Returns and draws the rhombus ABCD such as the angle (AB,AD)=a (or in the plane ABP angle(AB,AD)=angle(AB,AP) or such that angle(AB,AD)=a).
3 Devuelve y dibuja el rombo ABCD tal que el ángulo (AB,AD)=a (o en el plan ABP
angle(AB,AD)=angle(AB,AP) o angle(AB,AD)=a).
0 Pnt(A)||Cplx,Pnt(B)||Cplx,Angle(a)||Pnt(P)||Lst(P,a)),[Var(C)],[Var(D)]
-1 square
-2 quadrilateral
rhombus(i,1+i,pi/4)
rhombus(i,1+i,pi/4,C,D)
rhombus(point(0,0,0),point(3,3,3),[point(0,0,3),pi/4])
rhombus(point(0,0,0),point(3,3,3),point(0,0,3),C,D)
rhombus(point(0,0,0),point(3,3,3),[point(0,0,3),pi/4],C,D)

# polygon
1 Renvoie et dessine le polygone de sommets les éléments de l.
2 Returns and draws the polygon where its vertices are the element of l.
3 Devuelve y dibuja el polígono cuyos vértices son los elementos de l.
0 LstPnt||LstCplx
-1 isopolygon
-2 quadrilateral
-3 convexhull
-4 hexagon
polygon(i,1+i,2-i,-1,-1+i/2)
polygon(point(0,0,0),point(3,3,3),point(0,0,3),point(3,0,0))

# open_polygon
1 Renvoie et dessine la ligne polygonale de sommets les éléments de l.
2 Returns and draws the polygonal line where its vertices are the element of l.
3 Devuelve y dibuja la línea polígona cuyos vértices son los elementos de l.
0 LstPnt||LstCplx
-1 isopolygon
-2 quadrilateral
open_polygon(i,1+i,2-i,-1,-1+i/2)
open_polygon(point(0,0,0),point(3,3,3),point(0,0,3),point(3,0,0))

# quadrilateral
1 Renvoie et dessine le quadilatère ABCD.
2 Returns and draws the quadrilateral ABCD.
3 Devuelve y dibuja el cuadrilátero ABCD.
0 Pnt(A)||Cplx,Pnt(B)||Cplx,Pnt(C)||Cplx,Pnt(D)||Cplx
-1 polygon
-2 square
quadrilateral(i,1+i,2-i,-1)
quadrilateral(point(0,0,0),point(3,3,3),point(0,0,3),point(3,0,0))

# rectangle
1 Renvoie et dessine le rectangle ABCD, AD=k*AB, si k>0 ABCD est direct sinon indirect (dans le plan ABP AD=AP ou AD=k*AB).
2 Returns and draws the rectangle ABCD,  AD=k*AB if k>0 ABCD is direct else indirect (in the plane ABP AD=AP or AD=k*AB).
3 Devuelve y dibuja el rectángulo ABCD, AD=k*AB si k>0 ABCD es directo si no, indirecto (en el plan ABP AD=AP o AD=k*AB).
0 Pnt(A)||Cplx,Pnt(B)||Cplx,Real(k)||Pnt(P)||Lst(P,k)),[Var(D)],[Var(C)]
-1 quadrilateral
-2 square
rectangle(-i,1,2)
rectangle(-i,1,-2,D,C)
rectangle(point(0,0,0),point(3,3,3),point(0,0,3),D,C)
rectangle(point(0,0,0),point(3,3,3),2,D,C)

# Airy_Ai
1 Renvoie la valeur de la fonction Ai de Airy solution de w''-xw=0. Ai(x)=Ai(0)f(z)+Ai'(0)g(z)(f et g sont des séries entières sol de w''-xw=0).
2 Returns the value of Ai the Airy function solution of w''-xw=0. Ai(x)=Ai(0)f(z)+Ai'(0)g(z)(f et g are taylor's series sol of w''-xw=0).
3 Devuelve el valor de la función Ai de la función Airy solución de w''-wx=0. Ai(x)=Ai(0)f(z)+Ai'(0)g(z)(f y g son series de Taylor soluciones de w''-xw=0).
0 Real
-1 Airy_Bi
Airy_Ai(0)
Airy_Ai(1.5)

# Airy_Bi
1 Renvoie la valeur de la fonction Bi de Airy solution de w''-xw=0. Bi(x)=sqrt(3)(Bi(0)f(z)-Bi'(0)g(z))(f et g sont des séries entières sol de w''-xw=0).
2 Returns the value of Ai the Airy function solution of w''-xw=0. Bi(x)=sqrt(3)(Bi(0)f(z)-Bi'(0)g(z))(f et g are taylor's series sol of w''-xw=0).
3 Devuelve el valor de la función Bi de la función Airy solución de w''-wx=0. Bi(x)=sqrt(3)(Bi(0)f(z)-Bi'(0)g(z)))(f y g son series de Taylor solución de w''-xw=0).
0 Real
-1 Airy_Ai
Airy_Bi(1.5)
Airy_Bi(0)


# cycleinv
1 Renvoie le cycle inverse du cycle c.
2 Returns the inverse cycle of the cycle c.
3 Devuelve el ciclo inverso del ciclo c.
0 Cycle(c)
-1 perminv
cycleinv([1,3,5])

# groupermu
1 Renvoie le groupe de permutations engendré par a et b.
2 Returns the group of permutations generated by a and b.
3 Devuelve el grupo de permutaciones generadas por a y b.
0 Permut(a),Permut(b)
-1 
groupermu([1,2,0],[3,1,2,0])

# perminv
1 Renvoie la permutation inverse de la permutation a.
2 Returns the inverse permutation of the permutation a.
3 Devuelve la permutación inversa de la permutación a.
0 Permut(a)
-1 cycleinv
perminv([1,3,2,4,0])

# permu2mat
1 Renvoie la matrice obtenue en permutant les lignes de la matrice identité avec la permutation p.
2 Returns the matrix where the lines of the identity matrix are permuted with the permutation p.
3 Devuelve la matriz donde las líneas de la matriz identidad son permutadas con la permutación p.
0 Permut(p)
-1 
permu2mat([1,3,2,4,0])

# permuorder
1 Renvoie l'ordre de la permutation a.
2 Returns the order of the permutation a.
3 Devuelve el orden de la permutación a.
0 Permut(a)
-1 cycles2permu
permuorder([1,3,2,4,0])

# chisquare
1 Renvoie la densité de probabilité de la loi de Chisquare en x0 (n est le nombre de degrés de liberté).
2 Returns the density of probability of the Chisquare law at x0 (n is the number of degrees of freedom).
3 Devuelve la densidad de probabilidad de la ley Chi-cuadrada en x0 (n es el número de grados de libertad).
0 Intg(n),Real(x0)
-1 chisquare_cdf
-2 chisquare_icdf
chisquare(2,3.2)
chisquare(4,10.5)

# chisquare_cdf
1 Renvoie la probabilité qu'une variable aléatoire Chisquare soit inférieure à x0 (n est le nombre de degrés de liberté).
2 Returns the probability that a Chisquare random variable is lower than x0 (n is the number of degrees of freedom).
3 Devuelve la probabilidad que una variable aleatoria según Chi-cuadrado sea menor que x0 (n es el número de grados de libertad).
0 Intg(n),Real(x0)
-1 UTPC
-2 chisquare_icdf
chisquare_cdf(2,6.1)
chisquare_cdf(4,6.1)

# chisquare_icdf
1 Renvoie la valeur h telle que la probabilité qu'une variable aléatoire Chisquare soit inférieure à h est p (n est le nombre de degrés de liberté et 0<=p<=1).
2 Returns h such as the probability that a Chisquare random variable is lower than h is p (n is the number of degrees of freedomand 0<=p<=1).
3 Devuelve h tal que la probabilidad que una variable aleatoria según Chi-cuadrado sea menor que h es p (n es el número de grados de libertad y 0<=p<=1).
0 Intg(n),Real(p)
-1 chisquare_cdf
-2 chisquare
chisquare_icdf(2,0.95)
chisquare_icdf(4,0.05)

# fisher snedecor
1 Renvoie la densité de probabilité de la loi de Fisher-Snedecor (n et m sont les  nombres de degrés de liberté).
2 Returns the density of probability of the Fisher-Snedecor law (n and m are the numbers of degrees of freedom).
3 Devuelve la densidad de probabilidad de la ley de Fisher-Snedecor (n y m son los grados de libertad).
0 Intg(n),Intg(m),Real(x0)
-1 fisher_cdf
-2 fisher_icdf
fisher(4,10,2.1)
fisher(4,4,2.1)

# fisher_cdf snedecor_cdf
1 Renvoie la probabilité qu'une variable aléatoire Fisher-Snedecor soit inférieure à x0 (n et m sont les nombres de degrés de liberté).
2 Returns the probability that a Fisher-Snedecor random variable is lower than x0 (n and m are the numbers of degrees of freedom).
3 Devuelve la probabilidad que una variable aleatoria según ley Fisher-Snedecor sea menor que x0 (n y m son los grados de libertad).
0 Intg(n),Intg(m),Real(x0)
-1 UTPF
-2 fisher_icdf
fisher_cdf(4,4,2.1)
fisher_cdf(4,10,3.5)

# fisher_icdf snedecor_icdf
1 Renvoie la valeur h telle que, la probabilité qu'une variable aléatoire Fisher-Snedecor soit inférieure à h soit p (n et m sont les  nombres de degrés de liberté et 0<=p<=1.
2 Returns h such as the probability that a Fisher-Snedecor random variable is lower than h is p (n and m are the numbers of degrees of freedom and 0<=p<=1).
3 Devuelve h tal que la probabilidad que una variable aleatoria según ley Fisher-Snedecor sea menor que h es p (n y m son los grados de libertad y 0<=p<=1).
0 Intg(n),Intg(m),Real(p)
-1 fisher_cdf
-2 fisher
fisher_icdf(4,10,0.95)
fisher_icdf(4,10,0.05)

# normald
1 Renvoie la densité de probabilité de la loi normale (mu est la moyenne et sigma l'écart-type).
2 Returns the density of probability of the Normal law (mu is the mean and sigma the standard deviation).
3 Devuelve la densidad de probabilidad de la ley Normal (mu is la media y sigma la desviación estándar).
0 Real(mu),Real(sigma),Real(x0)
-1 normal_cdf
-2 normal_icdf
normald(1)
normald(1,2,3.5)

# normal_cdf normald_cdf
1 Renvoie la probabilité qu'une variable aléatoire Normale soit inférieure à x0 (mu est la moyenne et sigma l'écart-type).
2 Returns the probability that a Normal random variable is lower than x0 (mu is the mean and sigma the standard deviation).
3 Devuelve la probabilidad que una variable aleatoria según ley Normal sea menor que x0 (mu es la media y sigma la desviación estándar).
0 Real(mu),Real(sigma),Real(x0)
-1 UTPN
-2 normal_icdf
normal_cdf(1.96)
normal_cdf(1,2,2.96*sqrt(2))

# normal_icdf normald_icdf
1 Renvoie la valeur h telle que la probabilité qu'une variable aléatoire Normale soit inférieure à h soit p (mu est la moyenne, sigma l'écart-type et 0<=p<=1).
2 Returns h such as the probability that a Normal random variable is lower than h is p (mu is the mean and sigma the standard deviation and 0<=p<=1).
3 Devuelve h tal que la probabilidad que una variable aleatoria Normal sea menor que h es p (mu es la media y sigma la desviación estándar).
0 Real(mu),Real(sigma),Real(p)
-1 normal_cdf
-2 normald
normal_icdf(0.95)
normal_icdf(1,2,0.95)

# student
1 Renvoie la densité de probabilité de la loi de Student (n est le nombre de degrés de liberté).
2 Returns the density of probability of the Student law (n is the number of degrees of freedom).
3 Devuelve la densidad de probabilidad de la ley de Student (n es el número de grados de libertad).
0 Intg(n),Real(x0)
-1 student_cdf
-2 student_icdf
student(3,5.2)
student(1,5.2)

# student_cdf
1 Renvoie la probabilité qu'une variable aléatoire de Student soit inférieure à x0 (n est le nombre de degrés de liberté).
2 Returns the probability that a Student random variable is lower than x0 (n is the number of degrees of freedom).
3 Devuelve la probabilidad que una variable aleatoria según ley de Student sea menor que x0 (n es el número de grados de libertad).
0 Intg(n),Real(x0)
-1 UTPT
-2 student_icdf
student_cdf(3,2.35)
student_cdf(3,-3.2)

# student_icdf
1 Renvoie la valeur h telle que la probabilité qu'une variable aléatoire de Student soit inférieure à h soit p (n est le nombre de degrés de liberté, 0<=p<=1).
2 Returns h such as the probability that a Student random variable is lower than h is p (n is the number of degrees of freedom and 0<=p<=1).
3 Devuelve h tal que la probabilidad que una variable aleatoria según Student sea menor que h es p (n es el número de grados de libertad).
0 Intg(n),Real(p)
-1 student_cdf
-2 student
student_icdf(3,0.95)
student_icdf(3,0.05)

# UTPC
1 Renvoie la probabilité qu'une variable aléatoire Chisquare soit supérieure à x0 (n est le nombre de degrés de liberté).
2 Returns the probability that a Chisquare random variable is greater than x0 (n is the number of degrees of freedom).
3 Devuelve la probabilidad que una variable aleatoria según ley Chi-cuadrado sea mayor que x0 (n es el número de grados de libertad).
0 Intg(n),Real(x0)
-1 chisquare_cdf
-2 chisquare_icdf
UTPC(2,6.1)
UTPC(4,6.1)

# UTPF
1  Renvoie la probabilité qu'une variable aléatoire Fisher-Snedecor soit supérieure à x0 (n et m sont les nombres de degrés de liberté).
2 Returns the probability that a Fisher-Snedecor random variable is greater than x0 (n and m are the numbers of degrees of freedom).
3 Devuelve la probabilidad que una variable aleatoria según ley de Fisher-Snedecor sea mayor que x0 (n y m son los grados de libertad).
0 Intg(n),Intg(m),Real(x0)
-1 fisher_cdf
-2 fisher_icdf
UTPF(4,10,3.5)
UTPF(4,4,2.1)

# UTPN
1 Renvoie la probabilité qu'une variable aléatoire Normale soit supérieure à x0 (mu est la moyenne et v la variance).
2 Returns the probability that a Normal random variable is greater than x0 (mu is the mean and v the variance).
3 Devuelve la probabilidad que una variable aleatoria Normal sea mayor que x0 (mu es la media y v la varianza).
0 Real(mu),Real(v),Real(x0)
-1 normal_cdf
-2 normal_icdf
UTPN(1.96)
UTPN(1,4,2.96)+normal_cdf(1,2,2.96)

# UTPT
1 Renvoie la probabilité qu'une variable aléatoire de Student soit supérieure à x0 (n est le nombre de degrés de liberté).
2 Returns the probability that a Student random variable is greater than x0 (n is the number of degrees of freedom).
3 Devuelve la probabilidad que una variable aleatoria según ley de Student sea mayor que x0 (n es el número de grados de libertad).
0 Intg(n),Real(x0)
-1 student_cdf
-2 student_icdf
UTPT(3,2.35)
UTPT(3,-2.35)

# classes
1 Renvoie la matrice [[classe,effectif],..,] obtenue avec class_min et class_size:cf config de geo ou argument 2 et 3 ou avec la liste des centres des classes.
2 Returns the matrix [[class,number],...] get with class_min and class_size:see init of geo or argument 2 and 3 or with the list of centers.
3 Devuelve la matriz [[clase,número],...] obtenida con class_min y class_size (véase configuración de geo o argumentos 2 y 3) o con la lista de centros.
0 Lst(l),[ClassMin],[ClassSize||Lst(Center)]
-1 histogram
classes([1,1.2,1.4,1.6,1.8,2,2.5])
classes([1,1.2,1.4,1.6,1.8,2,2.5],1.2,0.5) 
classes([1,1.2,1.4,1.6,1.8,2,2.5],[1.2,1.6,2,2.4],1)
classes([1,1.2,1.4,1.6,1.8,2,2.5],[1.2,1.6,2.2],1)

# primpart
1 Renvoie le polynôme P divisé par le pgcd de ses coefficients.
2 Returns the polynom P divided by the gcd of its coefficients.
3 Devuelve el polinomio P dividido por el mcd de sus coeficientes.
0 Poly(P),[Var]
-1 content
primpart(2x^2+10x+6)
primpart(2t^2+10t+6,t)

# content
1 Renvoie le pgcd des coefficients du polynôme P donné en argument.
2 Returns the gcd of the coefficients of the polynom P given as argument.
3 Devuelve el mcd de los coeficientes del polinomio P dado como argumento.
0 Poly(P),[Var]
-1 primpart
-2 lgcd
content(2*x^2+10*x+6)
content([2,10,6])
content(2*t^2+10*t+6,t)

# genpoly
1 Renvoie la reconstruction d'un polynôme Q de n variables (-b/2<=coef(Q)<=b/2) à partir d'un polynôme P de n-1 variables et d'une base b (subst(Q,var=b)=P).
2 Returns the reconstruction of a n-variables polynom Q(-b/2<=coef<=b/2) from a (n-1)-variable polynom P and a base b (subst(Q,var=b)=P).
3 Devuelve la reconstrucción de un polinomio Q(-b/2<=coef<=b/2) de n variables a partir de un polinomio P de (n-1) variables y base b (subst(Q,var=b)=P).
0 Poly(P),Intg(b),Var
-1 
genpoly(7*y+5,6,x) 
genpoly(7*y-5*z,10,x) 

# left lhs gauche
1 Renvoie la partie gauche d'une égalité ou d'un intervalle.
2 Returns the left part of an equality or of an interval.
3 Devuelve la parte izquierda de una igualdad o de un intervalo.
0 Equal(a=b) or Interval(a..b)
-1 right
left(a=b)
left(x^2+1=5)
left(1..5)

# right rhs droit
1 Renvoie la partie droite d'une égalité ou d'un intervalle.
2 Returns the right part of an equality or of an interval.
3 Devuelve la parte derecha de una igualdad o de un intervalo.
0 Equal(a=b) or Interval(a..b)
-1 left
right(a=b)
right(x^2+1=5)
right(1 .. 5)

# ord
1 Renvoie le code ASCII d'un caractère ou du premier caractère d'une chaîne.
2 Returns the ASCII code of a character or of the first character of a string.
3 Devuelve el código ASCII de un carácter o del primer carácter de una cadena.
0 Char||LstChar
-1 asc
-2 char
ord("A")
ord(["a","b","c"])

# rotate
1 Renvoie la liste obtenue en mettant le dernier élément [ou la fin de la liste à partir du n-ième élément] en premier (par défaut n=-1).
2 Returns the list where the last element [or the tail begining with the n-th element] is the first element (by default n=-1).
3 Devuelve la lista obtenida de cambiar el último elemento (o la cola comenzando en el n-ésimo elemento) por el primer elemento (por defecto n=-1).
0 Lst,[Intg(n)] 
-1 tail
-2 mid
-3 shift
rotate([0,1,2,3],2)
rotate([[1,2,3],[4,5,6],[7,8,9]])
rotate([0,1,2,3,4])
rotate([0,1,2,3,4],-1)

# shift
1 Renvoie la liste obtenue en mettant le dernier élément [ou la fin de la liste à partir du n-ième élément] en premier en la complétant par undef (par défaut n=-1).
2 Returns the list where the last element [or the tail begining with the n-th element] is the first element and then complete with undef (by default n=-1).
3 Devuelve la lista obtenida al cambiar el último elemento (o la cola comenzando en el n-ésimo elemento) por el primer elemento y completada con undef (por defecto n=-1).
0 Lst,[Intg(n)]
-1 rotate
-2 tail
shift([0,1,2,3],2)
shift([0,1,2,3])
shift([0,1,2,3,4])

# correlation
1 Renvoie la correlation des éléments de l'argument.
2 Returns the correlation of the elements of its argument.
3 Devuelve la correlación de los elementos del argumento.
0 Lst||Mtrx,[Lst]
-1 covariance
-2 covariance_correlation
correlation([[1,2],[1,1],[4,7]])

# covariance
1 Renvoie la covariance des éléments de l'argument
2 Returns the covariance of the elements of its argument
3 Devuelve la covarianza de los elementos del argumento
0 Lst||Mtrx,[Lst]
-1 correlation
-2 covariance_correlation
covariance([[1,2],[1,1],[4,7]])

# covariance_correlation
1 Renvoie la liste formée de la covariance et de la corrélation des éléments de l'argument.
2 Returns the list of the covariance and the correlation of the elements of its argument.
3 Devuelve la lista de la covarianza y la correlación de los elementos del argumento.
0 Lst||Mtrx,[Lst]
-1 covariance
-2 correlation
covariance_correlation([[1,2],[1,1],[4,7]])

# exponential_regression
1  Renvoie les coefficients (m,b) de y=b*e^(m*x) : c'est l'exponentielle qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the coefficients (m,b) of y=b*x^m : it is the best exponential which approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve la regresión exponencial de los elementos del argumento.
0 Lst||Mtrx(A),[Lst]
-1 logarithmic_regression
exponential_regression([[1.0,2.0],[0.0,1.0],[4.0,7.0]]))
exponential_regression([1.0,0.0,4.0],[2.0,1.0,7.0]))

# exponential_regression_plot
1  Renvoie le graphe de y=b*e^(m*x) : c'est l'exponentielle qui approche le mieux les points ayant pour coordonnées les lignes de A (ou les 2 listes).
2 Returns the plot of y=b*x^m : it is the best exponential which approx the points where the coordinates are the rows of A (or the 2 lists).
3 Devuelve  la gráfica de la regresión exponencial de los elementos del argumento.
0 Lst||Mtrx(A),[Lst]
-1 logarithmic_regression_plot
exponential_regression_plot([[1.0,2.0],[0.0,1.0],[4.0,7.0]]))
exponential_regression_plot([1.0,0.0,4.0],[2.0,1.0,7.0]))

# histogram
1 Trace l'histogramme de l'argument.
2 Draws the histogram of its argument.
3 Dibuja el histograma del argumento.
0 Lst,[Lst]
-1 cumulated_frequencies
histogram([0,1,2,1,1,2,1,2,4,3,3])
histogram(seq(rand(1000),k,0,100),0,100)
histogram([[0,1],[1,4],[2,3],[3,2],[4,1]])
histogram([[1.5..1.65,50],[1.65..1.7,20],[1.7..1.8,30]])

# boxwhisker moustache
1 Boite à moustache pour une série statistique.
2 BoxWhiker for a statistical serie.
3 Gráfica BoxWhiker para una serie estadística.
0 Lst,[Lst],[x=a..b||y=a..b]
-1 quartiles
boxwhisker([-1,1,2,2.2,3,4,-2,5])
boxwhisker([1,2,3,5,10,4],x=1..2)
boxwhisker([1,2,3,5,10,4],[1,2,3,1,2,3])
boxwhisker([[6,0,1,3,4,2,5],[0,1,3,4,2,5,6],[1,3,4,2,5,6,0],[3,4,2,5,6,0,1],[4,2,5,6,0,1,3],[2,5,6,0,1,3,4]])

# mean moyenne
1 Moyenne d'une liste pondérée par le deuxième argument ou des colonnes d'une matrice.
2 Mean of a list with the second argument as pound or of the columns of a matrix.
3 Media de una lista con el segundo argumento como peso o de las columnas de una matriz.
0 Lst||Mtrx,[Lst]
-1 stddev
mean([1,2,3])
mean([1,2,3],[1,2,3])
mean([[1,2,3],[1,2,3]])

# median
1 Renvoie la médiane d'une liste pondérée par le deuxième argument ou des colonnes d'une matrice.
2 Returns the median of a list with the second argument as pound or of the columns of a matrix.
3 Devuelve la media de los elementos del argumento.
0 Lst||Mtrx,[Lst]
-1 quartiles
median([1,2,3,5,10,4])
median([1,2,3,5,10,4],[1,2,3,1,2,3])

# quantile
1 Renvoie le quantile des éléments de l correspondant à la valeur de p (0<p<1).
2 Returns the quantile of the elements of l corresponding to p (0<p<1).
3 
0 Lst(l),Real(p)
-1 quartile1
-2 median
-3 quartile3
quantile([0,1,3,4,2,5,6],0.25)
quantile([0,1,3,4,2,5,6],0.75)

# quartile1
1 Renvoie le 1er quartile des éléments (ou des colonnes) de l'argument.
2 Returns the 1st quartile of the elements (or of the coluns) of its argument.
3 Devuelve el primer cuartil de los elementos (o de las columnos) de su argumento.
0 Lst||Mtrx,[Lst]
-1 quantile
-2 quartiles
quartile1([1,2,3,5,10,4])
quartile1([1,2,3,5,10,4],[1,2,3,1,2,3])
quartile1([[1,2],[5,4],[3,6],[7,8]])

# quartile3
1 Renvoie le 3eme quartile des éléments (ou des colonnes) de l'argument.
2 Returns the 3rd quartile of the elements (or of the coluns) of its argument.
3 Devuelve el 3 er cuartil1 de los elementos (o de las columnos) de su argumento.
0 Lst||Mtrx,[Lst]
-1 quartiles
-2 quantile
quartile3([1,2,3,5,10,4])
quartile3([[1,2,3,5,10,4],[2,3,4,4,5,6],[7,6,5,8,9,1]])
quartile3([[1,2],[5,4],[3,6],[7,8]])

# quartiles
1 Min, 1er quartile,médiane,3eme quartile, max des éléments (ou des colonnes) de l'argument.
2 Min,1st quartile,the median,3rd quartile, max of the elements (or of the coluns) of its argument.
3 Mínimo, primer cuartíl,mediana,3er cuartil, máximo de los elementos (o de las columnas) de su argumento.
0 Lst||Mtrx,[Lst]
-1 boxwhisker
-2 quantile
-3 mean
quartiles([1,2,3,5,10,4])
quartiles([1,2,3,5,10,4],[1,2,3,5,10,4])
quartiles([[1,2],[5,4],[3,6],[7,8]])

# stddev ecart_type
1 Renvoie l'écart-type d'une liste pondérée par le deuxième argument ou la liste des écarts-types des colonnes d'une matrice.
2 Returns the standard device of the elements of its argument with the second argument as pound or the list of standard devices of the columns of a matrix.
3 Devuelve la desviación estándar de los elementos de su argumento con el segundo argumento como peso o de columnas de una matriz.
0 Lst||Mtrx,[Lst]
-1 mean
-2 variance
-3 stddevp
stddev([1,2,3])
stddev([1,2,3],[1,2,1])
stddev([[1,2,3],[5,6,7]])

# stddevp stdDev ecart_type_population
1 Renvoie l'écart-type de la population dont est issu l'échantillon décrit par les éléments d'une liste pondérée par le deuxième argument.
2 Returns the population standard device of the elements of its argument with the second argument as pound.
3 Devuelve la población desviación estándar de los elementos de su argumento con el segundo argumento como peso.
0 Lst||Mtrx,[Lst]
-1 mean
-2 stddev
stddevp([1,2,3])
stddevp([1,2,3],[1,2,1])
stddevp([[1,2,3],[5,6,7]])

# sqrfree
1 Factorise l'argument en regroupant les termes de même exposant.
2 Factorization of the its argument gathering the terms with the same exponant.
3 Factorización del argumento, reagrupando términos con el mismo exponente.
0 Expr
-1 factor
sqrfree(x^4-2*x^2+1)
sqrfree((x-2)^7*(x+2)^7*(x^4-2*x^2+1))

# DOM_FLOAT float
1 Entier qui représente le type d'une variable flottante, valeur de la commande type.
2 Integer representing the type of a floating point variable, returned by the type command.
3 
0 Opt
-1 type
-2 assume
-3 DOM_INT
-4 DOM_SYMBOLIC
 type(2.3)
 DOM_FLOAT+0
 assume(a,DOM_FLOAT)
 assume(a,float)

# inv inverse
1 Inverse d'une expression ou d'une matrice.
2 Returns the inverse of an expression or matrix.
3 Devuelve la inversa de una matriz o de una expresión.
0 Expr||Mtrx
-1 Inv
inv(9/5)
inv([[1,2],[3,4]])

# Inverse
1 Renvoie l'inverse d'une expression ou d'une matrice sans l'évaluer.
2 Returns the reciprocal or the matrix inverse without evaluation.
3 Devuelve la inversa de una matriz o de una expresión sin evaluar.
0 Expr||Mtrx
-1 inv
Inverse(9/5)
Inverse([[1,2],[3,4]])

# rowdim nrows rowDim
1 Nombre de lignes d'une matrice.
2 Number of rows of a matrix.
3 Número de filas de una matriz.
0 Mtrx
-1 ncols
rowdim([[1,2,3],[4,5,6]])
rowdim([[1,2],[3,4],[5,6]])

# coldim ncols colDim
1 Nombre de colonnes d'une matrice.
2 Number of coluns of a matrix.
3 Número de las columnas de una matriz.
0 Mtrx
-1 rowdim
coldim([[1,2,3],[4,5,6]])
coldim([[1,2],[3,4],[5,6]])

# identity idn
1 Retourne la matrice identité de dimension n.
2 Returns the identity matrix of specified dimension n.
3 Devuelve la matriz identidad de la dimensión especificada n.
0 Intg(n)
-1 ranm 
identity(3)
identity(5)

# diag BlockDiagonal
1 Renvoie soit la matrice diagonale de diagonale l soit la diagonale de A.
2 Returns the diagonale of the argument.
3 Devuelve la diagonal del argumento.
0 Lst(l)||Mtrx(A)
-1 identity
diag([1,2],[3,4])
diag([1,2,3])

# coeff coeffs
1 Renvoie la liste des coefficients d'un polynôme par rapport au 2ième argument ou le coefficient du 3ième argument.
2 Returns the coefficients of a polynomial with respect to the 2nd argument or the coefficient of the third argument.
3 Devuelve los coeficientes de un polinomio respecto al segundo argumento o lo coeficiente de al tercero argumento.
0 Expr,[Var]
-1 pcoeff
-2 fcoeff
coeff(x*3+2)
coeff(2*y^2-3,y)
coeff(2*y^2-3,y,2)

# taylor
1 Développement limité ou asymptotique (par défaut x=0 et ordre relatif=5).
2 Series expansion at finite or infinite points (by default x=0 and order=5).
3 Desarrollo en serie en finitos o infinitos puntos (por defecto x=0,order=5).
0 Expr,[Var=limit_point],[Order]
-1 series
-2 limit
-3 pade
taylor(sin(x)/x,x,0)
taylor(ln(y+y^2)-ln(y),y)
taylor(ln(x+x^2)-ln(x),x,2)
taylor(ln(x+x^2)-ln(x),x=0,2)
taylor(ln(x+x^2)-ln(x),x=1,2)
taylor((x^4+x+2)/(x^2+1),x,5)

# dim
1 Retourne la liste donnant la dimension de la matrice donnée en argument.
2 Returns the list which gives the dimension of the matrix specified as argument.
3 Devuelve la lista que da la dimensión de la matriz dada como argumento.
0 Mtrx
-1 rowdim
-2 coldim
-3 sizes
-4 size
dim([[1,2,3],[4,5,6]])

# format
1 Transforme un nombre réel en une chaine du format indiqué (f=flottant,s=scientifique,e=ingenieur).
2 Transforms the real into a string with the indiquated format (f=float,s=scientific,e=engineering).
3 Transforma un número real a cadena indicando el formato (f=flotante,s=científico,e=ingeniería).
0 Real,Str("f4"||"s5"||"e6")
-1 string
format(9.3456,"f3")
format(9.3456,"s3")
format(9.3456,"e3")

# abs
1 Renvoie la valeur absolue ou le module de l'argument.
2 Returns the absolute value or the norm of its argument.
3 Devuelve el valor absoluto o la norma del argumento.
0 Cplx||LstCplx
-1 arg
abs(-4)
abs(1+2*i)
abs((1+2*i)^2)
abs([-2,1+i,-4])

# acos arccos
1 Arccosinus
2 Arccosinus
3 Arcocoseno
0 Expr
-1 cos
-2 acosh
acos(0)

# acosh arccosh
1 Arccosinus hyperbolique.
2 Hyperbolic arccosinus.
3 Arcocoseno hiperbólico.
0 Expr
-1 cosh
-2 acos
acosh(1)

# acot
1 Arccotangente.
2 Arccotangent.
3 Arcocotangente.
0 Expr
-1 atan
-2 arccos
acot(0)

# acsc
1 Arccosecante: acsc(x)=asin(1/x).
2 Arccosecante: acsc(x)=asin(1/x).
3 Arcocosecante: acsc(x)=asin(1/x).
0 Expr
-1 asin
-2 csc
acsc(1)
acsc(2)

# adjoint_matrix
1 Renvoie le polynôme caractéristique de A et la comatrice de A-xI.
2 Returns the characteristic polynomial of A and the comatrix of A-xI. 
3 Matriz adjunta.
0 Mtrx
-1 pcar
adjoint_matrix([[1,i],[2,3]])

# affix
1 Nombre complexe égal à l'affixe d'un point ou d'un vecteur.
2 Cplx number equal to the affix of a point or of a vector.
3 Número complejo igual al afijo de un punto o de un vector.
0 Pnt||Vect
-1 point
-2 vector
affix(point(i))
affix(point(i)-point(1+2*i))

# alg
1 Mode algebrique.
2 Algebraic mode.
3 Modo algebraico.
0 NULL
-1 rpn
alg

# algvar
1 Liste des variables par ordre d'extension algebriques.
2 List of var by ascending algebraic extension order.
3 Lista de las variables ordenadas por extesión algebraica.
0 Expr
-1 lvar
-2 lname
algvar(sqrt(x)+y)

# angle
1 angle(A,B,C) est égal à la valeur de la mesure de l'angle (AB,AC).
2 angle(A,B,C) is the value of the measure of the angle (AB,AC).
3 angle(A,B,C) es el valor de la medida del ángulo (AB,AC).
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 triangle
-2 bisector
-3 legend
-4 labels
angle(point(0),point(i),point(1))
angle(0,1,i)
angle(0,1,i,"")
angle(0,1,i,"a")
angle(i,1,1+i,"b")

# append
1 Ajoute un élément à une liste.
2 Append an element to a list.
3 Añade un elemento a una lista.
0 (Lst||Seq|| Set,Elem
-1 concat
-2 prepend
append([1,2,3],4)
append((1,2,3),4)
append(%{1,2,3%},4)

# arg
1 Argument d'un nombre complexe.
2 Returns the argument of a complex number.
3 Devuelve el argumento de un número complejo.
0 Expr
-1 abs
arg(1+i)
arg(1+2*i)
arg((1+2*i)^2)

# args
1 Dans un programme args(NULL) désigne la liste formée par la fonction et ses arguments.
2 Inside a program args(NULL) is the list of the function and its arguments.
3 Dentro de un programa args(NULL) es la lista de el función y de argumentos.
0 NULL
-1 
 f(a,b):={local y; y:=args(NULL); print(y); return a+b;};f(12,5)
 

# asin arcsin
1 Arcsinus.
2 Arcsinus.
3 Arcoseno.
0 Expr
-1 sin
asin(0)

# asc
1 Renvoie la liste des codes ASCII d'une chaine.
2 Returns the list of the ASCII codes of a string.
3 Devuelve la lista de códigos ASCII de una cadena.
0 Str
-1 char
-2 ord
asc("bonjour")
asc("A")

# asec
1 Arc secante:asec(x)=acos(1/x).
2 Arc secante:asec(x)=acos(1/x).
3 Arcosecante:asec(x)=acos(1/x).
0 Expr
-1 acos
-2 sec
asec(1)
asec(2)

# asinh arcsinh
1 Arcsinus hyperbolique.
2 Hyperbolic arcsinus.
3 Arcoseno hiperbólico.
0 Expr
-1 sinh
-2 asin
asinh(0)

# assume
1 Hypothese sur une variable.
2 Make an assumption on a variable.
3 Asigna una hipótesis a una variable.
0 Expr
-1 purge
-2 about
assume(a>0)
assume(a:=0.3)
assume(a:=[pi/4,0,pi/2])
assume(a:=[pi/4,0,pi/2,0.1])
assume(n,integer)
assume(a>-10 and a<10)
assume(a)

# at
1 at(l,j) (ou at(m,[j,k])) désigne l'élément de la liste l (ou matrice m) d'indice j (ou d'indice j,k).
2 at(l,j) (or at(m,[j,k]))is the element of the list l (or matrix m) for index=j (or for index j,k).
3 at(l,j) es el elemento j-ésimo de la lista l.
0 Lst(l)||Mtrx(m),Index(j)||Lst([j,k])
-1 of
at([10,11,12],1)
at([[1,2],[3,4]],[1,0])

# atan arctan
1 Arctangente.
2 Arctangent.
3 Arcotangente.
0 Expr
-1 tan
-2 atanh
atan(0)

# atan2acos
1 Remplace arctan(x) par pi/2-arccos(x/sqrt(1+x^2)) dans l'argument. 
2 Replaces arctan(x) by pi/2-arccos(x/sqrt(1+x^2)) in the argument.
3 Reemplaza arctan(x) por pi/2-arccos(x/sqrt(1+x^2)) en el argumento.
0 Expr
-1 atan2acos(atan(x))

# atan2asin
1 Remplace arctan(x) par arcsin(x/sqrt(1+x^2)) dans l'argument.
2 Replaces arctan(x) by arcsin(x/sqrt(1+x^2))in the argument.
3 Reemplaza arctan(x) por arcsin(x/sqrt(1+x^2)) en el argumento.
0 Expr
-1 atan2asin(atan(x))

# atanh arctanh
1 Arctangente hyperbolique.
2 Hyperbolic arctangent.
3 Arcotangente hiperbólico.
0 Expr
-1 tan
atan(0)

# a2q
1 a2q(A,X)= la forme quadratique q associée à A, X =vecteur de variables.
2 a2q(A,X)=the quadratic form q associated to A, X=vector of variables.
3 a2q(A,X)=la forma cuadrática q asociada a A, X=vector de variables.
0 Mtrx,VectVar
-1 q2a
a2q([[1,2],[4,4]],[x,y])
a2q([[1,3],[3,4]],[x,y])

# backquote
1 ``
2 ``
3 ``
0 Expr
-1 quote

# basis
1 Extrait une base d'une famille génératrice de vecteurs.
2 Extract a basis from a spanning set of vectors.
3 Extrae una base de un grupo de vectores.
0 Lst(vector1,..,vectorn)
-1 ker
-2 ibasis
basis([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])

# bisector
1 Trace la bissectrice de l'angle (AB,AC) donné par 3 points A,B,C.
2 Draws the bisector of the angle (AB,AC) given by 3 points A,B,C.
3 Dibuja la bisectriz del ángulo (AB,AC) dado por los 3 puntos A,B,C.
0 (Pnt(A) or Cplx),(Pnt(B) or Cplx),(Pnt(C) or Cplx)
-1 angle
-2 exbisector
bisector(0,1,i)

# exbisector
1 Trace la bissectrice extérieure de l'angle (AB,AC) donné par 3 points A,B,C.
2 Draws the exterior bisector of the angle (AB,AC) given by 3 points A,B,C.
3 Dibuja la bisectriz exterior del ángulo (AB,AC) dados los 3 puntos A,B,C.
0 (Pnt(A) or Cplx),(Pnt(B) or Cplx),(Pnt(C) or Cplx)
-1 angle
-2 bisector 
exbisector(0,1,i)

# bloc
1 Mot réservé.
2 Reserved word.
3 Palabra reservada.
0 
-1 begin
-2 end
-3 {}
 if (2>1) begin print("ifactor(154)=",ifactor(154));ifactor(154);end
 if (2>1) {print("ifactor(154)=",ifactor(154));ifactor(154);}

# begin
1 Début de bloc.
2 Bloc begin.
3 Comienzo de bloque.
0 
-1 end
-2 bloc
-3 {}
 if (2>1) begin print("ifactor(154)=",ifactor(154));ifactor(154);end

# bernoulli
1 bernoulli(n) désigne le nième nombre de Bernoulli.
2 bernoulli(n) is the nth number of Bernoulli.
3 bernoulli(n) es el n-ésimo número de Bernoulli.
0 Intg
-1 
bernoulli(6)

# break
1 Pour interrompre une boucle: while (cond) {inst1; if (cond) {inst2;break;}}.
2 Interrupts a loop: while (cond) {inst1; if (cond) {inst2;break;}}.
3 Interrumpe un bucle: while (cond) {inst1; if (cond) {inst2;break;}}.
0 
-1 continue
 {local r;while (1==1){if (b==0){break;} r:=irem(a,b);a:=b;b:=r;}a;}

# breakpoint
1 Ajoute un point d'arrêt.
2 Adds a breakpoint.
3 Añade un punto de ruptura.
0 Intg
-1 rmbreakpoint
breakpoint(1)

# canonical_form
1 Forme canonique du trinôme de degré 2.
2 Canonical_form of a 2 degree polynom.
3 Forma canónica de un polinómio de grado 2.
0 Trinom(a*x^2+b*x+c),[Var]
-1  
canonical_form(2*x^2-12*x+1)
canonical_form(2*a^2-12*a+1,a)

# case
1 Test (choix multiple): switch(variable){case 1: {bloc1;} default: {bloc2;}};
2 Test (multiple choice): switch(variable){case 1: {bloc1;} default: {bloc2;}};
3 Test (selección múltiple): switch(variable){case 1: {bloc1;} default: {bloc2;}};
0 
-1 if
-2 switch
-3 default
 a:=1;switch(a){case 0:{b:=1;break;} case 1:{b:=3;break;} default:{b:=0;}};b;

# catch
1 Protection contre les erreurs: try {instructions} catch (variable) {error_instructions} (dans un programme).
2 Error protection: try {instructions} catch (variable) {error_instructions}(in a program).
3 Protección contra errores: try {instructions} catch (variable) {error_instructions}(dentro de un programa).
0 
-1 try
 essai(x):={local y,err;try {y:=[[1,2]]+x;}catch (err){y:="erreur:"+err;} return y;}

# cd
1 Change de répertoire.
2 Change directory.
3 Cambia de directorio.
0 Str
-1 pwd
cd("toto")

# ceil ceiling
1 Renvoie le plus grand entier >= à l'argument. 
2 Returns the smallest integer >= to the argument. 
3 Devuelve el menor entero >= que el argumento.
0 Real or Cplx
-1 floor
-2 round
ceil(-4.2)
ceil(4.3+2.4*i)

# center
1 Désigne le centre d'un cercle. 
2 Is the center of a circle.
3 Designa el centro de una circunferencia.
0 Crcle
-1 circle
-2 radius
center(circle(1+i,2))
center(circumcircle(0,1,1+i))

# orthocenter
1 Désigne l'orthocentre d'un triangle ou du triangle formé par 3 points.
2 Is the orthocenter of a triangle or of the triangle made with 3 points.
3 Designa el orthocentro de uno triángulo o de al triángulo formada por los 3 puntos.
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 altitude
-2 triangle
orthocenter(1+i,2,i)
orthocenter(point(1+i),point(2),point(i))
orthocenter(triangle(0,1,1+i))

# changebase
1 Renvoie la matrice B=inv(P)*A*P.
2 Returns the matrix B=inv(P)*A*P.
3 Devuelve la matriz B=inv(P)*A*P.
0 Mtrx(A),Mtrx(P)
-1 
changebase([[1,2],[1,3]],[[1,1],[0,1]])
changebase([[1,2],[1,3]],[[1,0],[1,1]])

# char
1 Renvoie la chaine correspondant aux caractères contenus dans l'argument.
2 Returns the string corresponding to the character code of the argument.
3 Devuelve la cadena correspondiente con el código de carácters del argumento.
0 Intg or Lst(Intg)
-1 asc
-2 ord
char(65)
char([65,66,67])

# continue
1 Dans un programme, ne fait pas la fin de l'itération et passe à l'itération suivante: while (cond) {i1; if(cond) continue; i2;}.
2 In a program, don't do the end of the iteration but do the next iteration: while (cond) {i1; if(cond) continue; i2;}.
3 No finaliza la iteración, sino que hace la siguiente iteración: while (cond) {i1; if(cond) continue; i2;}.
0 
-1 break
-2 cont
 a:=10;while (a>0) {a:=a-3; if (a>0) {continue;} print(a);}

# cont
1 Continue un programme arrêté.
2 Continues execution of a stopped program.
3 Continua la ejecución de un programa detenido.
0 NULL
-1 continue
cont()

# chinrem
1 Reste chinois pour des polynômes écrits sous forme de listes.
2 Chinese remainder for polynoms written as lists.
3 Resto chino para polinomios escritos como listas.
0 Lst(l1,l2),Lst(l3,l4)
-1 ichinrem
chinrem([[1,2],[1,0,1]],[[1,1],[1,1,1]])

# conic
1 Définit une conique par son équation de variables x,y par défaut et la trace.
2 Defines a conic by its equation with x,y as default variables and draws it. 
3 Define una  cónica con su ecuación y dibuja ésta (por defecto variables=x,y).
0 Expr,[LstVar]
-1 circle
-2 ellipse
-3 hyperbola
-4 parabola
-5 reduced_conic
conic(x^2+y^2-x*y-3)
conic(x^2+2*y^2-x*y-3,x,y)
conic(u^2-2*v^2-2*u*v-1,[u,v])
conic(y^2-x*y+3,[x,y])

# quadric
1 Définit une quadrique par son équation cartésienne de variables x,y,z par défaut et la trace.
2 Defines a quadric by its cartesian equation with x,y,z as default variables and draws it. 
3 Define una quadric con su ecuación y dibuja ésta (por defecto variables=x,y,z). 
0 Expr,[Lst(Var)]
-1 reduced_quadric
quadric(4*x^2+y^2+z^2-4*x*y+4*x*z-2*y*z+8*x-4*y+4*z+2)
quadric(x^2+3*y^2-3*z^2-8*y*z+2*z*x-4*x*y-1,x,y,z,affichage=vert+rempli)
quadric((u+v)*(v-w)+3*u-5*v,[u,v,w],affichage=cyan)
quadric(7*x^2+4*y^2+4*z^2+4*x*y-4*x*z-2*y*z-4*x+5*y+4*z-18,[x,y,z])

# circle
1 Définit un cercle par un diamètre (arg2=Point) ou par centre et rayon (arg2=Complex, abs(arg2)=rayon) [ou l'arc AB, A d'angle a, B d'angle b, (arg1+arg2=angle 0)] ou par son équation.
2 Define a circle with a diameter (arg2=Point) or with center and radius (arg2=Complex, abs(arg2)=radius) [or the arc AB, A angle a, B angle b (arg1+arg2=angle 0)] or by its equation. 
3 Define una circunferencia con diámetro (arg2=Point) o su centro y radio (arg2=Complex, abs(arg2)=radio) [o arco AB A ángulo a, B ángulo b (arg1+arg2=ángulo 0)] o con su ecuación. 
0 (Pnt or Cplx),(Pnt(arg2) or Cplx(arg2)),[Real(a)],[Real(b)],[Var(A)],[Var(B)]
-1 circumcircle
-2 incircle
-3 excircle
-4 center
-5 radius
circle(0,point(2*i))
circle(i,i)
circle(i,1)
circle(0,i,pi/4,pi/2)
circle(0,i,pi/4,pi/2,A,B)
circle(x^2+y^2-x-y)

# cholesky
1 Pour A matrice symétrique numérique, renvoie L, matrice telle que A=L*tran(L).
2 For a numerical matrix A, returns L matrix such that A=L*tran(L).
3 Para un matriz numérica A, devuelve L, matriz tal que A=L*tran(L).
0 Mtrx
-1 lu
-2 qr
cholesky([[3,1],[1,4]])

# circumcircle
1 circonscrit(A,B,C)=cercle circonscrit au triangle ABC.
2 circumcircle(A,B,C)=circumcircle of the triangle ABC.
3 circumcircle(A,B,C)=circunferencia circunscrita al triángulo ABC.
0 (Pnt or Cplx),(Pnt or Cplx),((Pnt or Cplx)
-1 circle
-2 incircle
-3 excircle
circumcircle(0,1,1+i)

# click
1 Entrée interactive d'un nombre complexe en cliquant dans un écran géométrique.
2 Interactive input of a complex number with a click on a geometric screen.
3 Entrada interactiva de un número complejo con una click en una pantalla de geometría.
0 NULL
-1 
click()
 A:=point(click())
 a:=click()

# comb nCr
1 comb(n,p)=nombre de combinaisons de p objets pris parmi n.
2 comb(n,p)=number of combinations of p objects taken among  n.
3 comb(n,o)=número de combinaciones de p objetos tomados de n en n.
0 Intg(n),Intg(p)
-1 factorial
-2 perm
comb(4,2)

# comment
1 Commentaire dans un progrmme.
2 Comment in a program.
3 Comentario (dentro de un programa).
0 Expr
-1 
comment("my_comment")

# concat augment
1 Concaténe deux listes ou deux chaines ou deux séquences ou 2 matrices.
2 Concats two lists or two strings or two sequences or 2 matrix.
3 Concatena 2 listas o 2 cadenas o 2 secuencias.
0 (Lst or Seq or Str or Mtrx),(Lst or Seq or Str or Mtrx)
-1 append
-2 cat
-3 semi_augment
-4 border
concat([1,2],[3,4,5])
concat("bon","jour")
concat((1,2,3),(4,5,6))

# conj
1 Conjugué d'un nombre complexe.
2 Returns the conjugate of a complex number.
3 Devuelve el conjugado de un número complejo.
0 Cplx
-1 re
-2 im
-3 tran
conj(1+i)
conj(1+2*i)
conj((1+2*i)^2)
conj([[1+i,2,3],[1,3,6],[2,5,9-i]]))

# inString
1 Teste si e est dans la chaine l (=-1 ou k avec l[k]=e).
2 Tests if e is in the string l (=-1 or k with l[k]=e).
3 Comprueba si e está en la cadena l (=-1, o k con  l[k]=e).
0 Str(l),Elem(e)
-1 contains
inString("abcd","b")
inString("abcd","e")

# member
1 Teste si e est dans la liste ou ensemble l (=0 ou k+1 avec l[k]=e). 
2 Tests if e is in the list or set l (=0 or k+1 with l[k]=e).
3 Comprueba si e está en la lista o set l (=0, o k+1 con  l[k]=e).
0 Elem(e),(Lst(l) or Set(l))
-1 contains
member(1,[4,3,1,2])
member(1,%{4,3,1,2%})

# contains
1 Test d'appartenance (renvoie l'indice+1 ou 0).
2 Tests if a set contains an expression (returns the index+1 or 0).
3 Comprueba si contiene una expresión (Devuelve el índice+1 o 0).
0 (Lst(l) or Set(l)),Elem(e)
-1 inString
-2 member 
contains(%{0,1,2,3%},2)
contains([0,1,2,3],4)

# cos
1 Cosinus.
2 Cosinus.
3 Coseno.
0 Expr
-1 acos
cos(0)

# cosh
1 Cosinus hyperbolique.
2 Hyperbolic cosinus.
3 Coseno hiperbólico.
0 Expr
-1 acosh
cosh(0)

# cot
1 Cotangente.
2 Cotangent.
3 Cotangente.
0 Expr
-1 acot
-2 tan
cot(pi/2)

# cross crossproduct crossP
1 Produit vectoriel.
2 Wedge product.
3 Producto vectorial.
0 Vect,Vect
-1 dot
cross([1,2],[3,4])
cross([1,2,3],[4,5,6])

# csc
1 Cosecante:csc(x)=1/sin(x).
2 Cosecant:csc(x)=1/sin(x).
3 Cosecante:csc(x)=1/sin(x).
0 Expr
-1 sin
-2 acsc
csc(pi/2)

# curl
1 Rotationnel=[dC/dy-dB/dz,dA/dz-dC/dx,dB/dx-dA/dy].
2 curl([A,B,C],[x,y,z])=[dC/dy-dB/dz,dA/dz-dC/dx,dB/dx-dA/dy].
3 rotacional=[dC/dy-dB/dz,dA/dz-dC/dx,dB/dx-dA/dy].
0 Lst(A,B,C),Lst(x,y,z)
-1 derive
-2 divergence
curl([2*x*y,x*z,y*z],[x,y,z])

# curve
1 Mot réservé.
2 Reserved word.
3 Palabra reservada.
0 Expr
-1 

# cycle2perm
1 Convertit le cycle c en une permutation.
2 Converts the cycle c to a permutation.
3 Convierte el ciclo c en una permutación.
0 Cycle
-1 cycles2permu
-2 permu2cycles
cycle2perm([1,3,5])

# cycles2permu
1 Convertit le produit des cycles c en une permutation.
2 Converts the product of the cycles c to a permutation. 
3 Convierte el producto de ciclos c en una permutación.
0 Lst(Cycle)
-1 permu2cycles
-2 cycle2perm
cycles2permu([[1,3,5],[3,4]])

# cyclotomic
1 N-ième polynôme cyclotomique.
2 N-th cyclotomic polynomial.
3 N-ésimo polinomio ciclotómico.
0 Expr
-1 none
cyclotomic(20)

# c1oc2
1 Renvoie la permutation égale au produit des deux cycles.
2 Returns the permutation product of the two cycles.
3 Devuelve la permutación producto de dos ciclos.
0 Cycle,Cycle
-1 c1op2
-2 p1oc2
c1oc2([3,4,5],[0,3])

# c1op2
1 Renvoie la permutation égale au produit du cycle et de la permutation.
2 Returns the permutation product of the cycle and the permutation.
3 Devuelve la permutación producto de un ciclo y la permutación.
0 Cycle,Permut
-1 c1oc2
-2 p1oc2
c1op2([3,4,5],[0,3,2,1,5,4])

# debug
1 Lance le débuggeur.
2 Launch a debugging session.
3 Comienza una sesión de depuración.
0 Expr
-1 
debug(pgcd(25,15))

# default otherwise
1 Cas par défaut dans une instruction switch.
2 Default case in a switch instruction.
3 Selección por defecto en una instucción switch.
0 
-1 switch
-2 case
-3 if
 default: print("Default case!")
  a:=1;switch(a){case 0:{b:=1;break;} case 1:{b:=3;break;} default:{b:=0;}};

# degree
1 Degré du polynôme P.
2 Degree of polynom P.
3 Grado de polinomio P.
0 Poly(P)
-1 valuation
-2 size
degree(x^3+x)
degree([1,0,1,0])

# desolve deSolve dsolve
1 Résout une équation différentielle.
2 Solves a differential equation.
3 Resuelve una ecuación diferencial.
0 Eq,[TimeVar],FncVar
-1 integrate
-2 diff
-3 odesolve
-4 plotode
-5 plotfiefd
desolve(y''+y=0,y)
desolve([y''+y=sin(x),y(0)=1,y'(0)=2],y)
desolve([y''+y=sin(x),y(0)=1,y'(0)=2],x,y)
desolve([y''+y=sin(x),y(0)=1,y'(0)=2],[x,y])
desolve(diff(y(t),t)+t*y(t)=0,t,y)
desolve(diff(y(t),t)+t*y(t)=0,[t,y])
desolve((y''+y=sin(x)) and (y(0)=1) and (y'(0)=2),y)

# det
1 Déterminant d'une matrice carrée M.
2 Déterminant of a square matrix M.
3 Determinante de una matriz cuadrada M.
0 Mtrx
-1 rref
-2 det_minor
-3 Det
det([[1,2],[3,4]])
det([[1,2,3],[1,3,6],[2,5,7]])

# Det
1 Renvoie le déterminant d'une matrice carrée M, sans l'évaluer. 
2 Déterminant of a square matrix M, without evaluation.
3 Determinante de una matriz cuadrada M, sin evaluar.
0 Mtrx
-1 det
Det([[1,2],[3,4]])
Det([[1,2,3],[1,3,6],[2,5,7]])

# divergence
1 divergence([A,B,C],[x,y,z])=dA/dx+dB/dy+dC/dz.
2 divergence([A,B,C],[x,y,z])=dA/dx+dB/dy+dC/dz.
3 divergencia=dA/dx+dB/dy+dC/dz.
0 Lst(A,B,C),Lst(x,y,z)
-1 derive
-2 curl
divergence([x^2+y,x+z+y,z^3+x^2],[x,y,z])

# divpc
1 Division d'ordre n de 2 polynômes selon les puissances croissantes.
2 n-degree Taylor-poly for the quotient of 2 polynomials.
3 Polinómio de Taylor de grado n del cociente de 2 polinómios.
0 Poly,Poly,Intg(n)
-1 series
-2 quorem
divpc(x^4+x+2,x^2+1,5)

# dot dotP scalarProduct scalar_product dotprod
1 Produit scalaire.
2 Scalar product.
3 Producto escalar.
0 Vect,Vect
-1 *
-2 cross
-3 .*
-4 hadamard
dot([1,2],[3,4])
dot([3,2,4],[3,2,4])

# *
1 Produit scalaire infixé.
2 Scalar product infixed.
3 Producto escalar.
0 Vect,Vect
-1 dot
-2 cross
-3 .*
-4 hadamard
 [1,2]*[3,4]

# diff derive deriver
1 Dérivée par rapport au second argument.
2 Returns the derivative with respect to the 2nd argument.
3 Devuelve la derivada respecto al segundo argumento.
0 Expr,[Var]
-1 integrate
-2 function_diff
diff(x^3-x)
diff(x^3-x,x$3)
diff(x*y+z*y,y)
diff(x*y+z*y,y,z)
diff(x*y+z*y,[y,z])

# symb2poly e2r
1 Renvoie la liste des coefficients d'un polynôme par rapport au 2ième argument.
2 Returns the coefficients of a polynomial with respect to the 2nd argument.
3 Devuelve los coeficientes de un polinomio respecto al segundo argumento.
0 Expr,[Var]
-1 poly2symb
symb2poly(x*3+2.1)
symb2poly(-x^4+x*3*y+2+y^2*z,[x,y,z])

# poly2symb r2e
1 Renvoie le polynôme (ou sa valeur) de coefficients le premier argument et de variable le deuxième argument (par défaut x).
2 Gives the polynomial (or its value) : the first argument is the vector of coefficents and the second argument is the variable (by default x).
3 Devuelve el polinomio: el primer argumento es el vector de coeficientes y el segundo argumento es la variable (por defecto x).
0 Expr,Var
-1 e2r
poly2symb([1,2,3])
poly2symb([1,2,3],x)
poly2symb([1,2,3],-1)
poly2symb([1,2,-1],y)

# egcd gcdex
1 Identité de Bézout pour 2 polynômes.
2 Extended greatest common divisor of 2 polynomials.
3 Máximo común divisor extendido de 2 polinomios.
0 (Poly or Lst),(Poly or Lst),[Var]
-1 gcd
-2 iegcd
egcd((x-1)^2,x^3-1)
egcd((X-1)^2,X^3-1,X)
egcd([1,-2,1],[1,0,0,-1])
egcd([1,-2,1],[1,-1,2])

# egv eigenvectors eigenvects eigVc
1 Calcule les vecteurs propres d'une matrice diagonalisable.
2 Computes the eigenvectors of a diagonalizable matrix.
3 Calcula los vectores propios de una matriz diagonalizable.
0 Mtrx
-1 egvl
-2 jordan
egv([[-2,-2,1],[-2,1,-2],[1,-2,-2]])
egv([[1,1,3],[1,3,1],[3,1,1]])

# egvl eigenvalues eigVl
1 Renvoie la matrice de Jordan associée à A si les valeurs propres sont calculables.
2 Returns the Jordan matrix associated to A when the eigenvalues are calculable.
3 Calcula los valores propios enteros de una matriz diagonalizable.
0 Mtrx(A)
-1 egv
-2 jordan
egvl([[4,1],[-4,0]])
egvl([[-2,-2,1],[-2,1,-2],[1,-2,-2]])
egvl([[1,1,3],[1,3,1],[3,1,1]])

# eigenvals
1 Renvoie la liste des valeurs propres (calculables) d'une matrice.
2 Returns the list of the (calculable) eigenvalues of a matrix.
3 Calcula los valores propios enteros de una matriz.
0 Mtrx 
-1 egv
-2 jordan
eigenvals([[-2,-2,1],[-2,1,-2],[1,-2,-2]])
eigenvals([[1,1,3],[1,3,1],[3,1,1]])
eigenvals([[4,1],[-4,0]])

# else
1 Marque le début des instructions qd la condition d'un "if" est fausse; if (condition){instruction1;} else {instruction2;}
2 Starts false clause of an "if" statement: if (condition){instruction1;} else {instruction2;}
3 Comienza los comandos de la opción falsa de un "if": if (condition){instruction1;} else {instruction2;} 
0 
-1 if
 if (a>b) {a;} else {b;}

# element
1 Désigne un point pris sur une courbe ou un réel pris dans un intervalle
2 Is a point chosen on a curve or a real chosen in an interval
3 Designa un punto seleccionado de una curva o un real escogido de un intervalo
0 (Curve or Real_interval),[Val]
-1 is_element
 t:=element(0..1)
 t:=element(0..1,0.3)
 t:=element(0..1,0.3,0.02)
 P:=element(circle(i,1),t)
 M:=element(circle(i,1))
 N:=element(circle(i,1),pi/2)

# ellipse
1 ellipse(F1,F2,M)=ellipse de foyers F1,F2 passant par M ou tel que MF1+MF2=2*a (geo2d) et ellipse(p(x,y)) dessine la conique si deg(p)=2.
2 ellipse(F1,F2,M)=ellipse focus F1,F2 throught M or such as MF1+MF2=2*a (geo2d) and ellipse(p(x,y)) draws the conic if deg(p)=2.
3 ellipse(F1,F2,M)=elipse de focos F1,F2 que pasa por M o MF1+MF2=2*a (geo2d).
0 Pnt(F1),Pnt(F2),(Pnt(M) or Real(a)) y ellipse(p(x,y))=conic si deg(p)=2.
-1 hyperbola
-2 parabola
ellipse(-1,1,point(1+i))
ellipse(-1,1,1+sqrt(5))
ellipse(point(-1,0,0),point(1,0,0),point(1,1,1))

# epsilon2zero
1 Remplace par zéro les valeurs < epsilon
2 Values < epsilon are replaced by zero
3 Sustituye por 0 los valores < Epsilon
0 Expr
-1 evalf
epsilon2zero(1e-13+x+5)

# =
1 Symbole infixé pour reliant les 2 membres d'une équation.
2 Infixed symbol that connects the 2 members of an equation.
3 Simbolo infijo para una ecuación.
0 Expr,Expr
-1 equal
-2 equal2diff
-3 equal2list
-4 left
-5 right
 x+4=2
 x^2-3x+2=0
 equal(x+4,2)

# equal
1 Version préfixé de =
2 Prefixed version of =
3 Versión prefijo de =
0 Expr,Expr
-1 =
-2 equal2diff
-3 equal2list
-4 left
-5 right
 2*x=4
equal(2*x,4)
equal(x^2-3x+2,0)

# equal2diff
1 Transforme l'égalité A=B ou equal(A,B) en la différence A-B
2 A=B or equal(A,B) is converted into A-B  
3 Transforma A=B o equal(A,B) en A-B
0 Equal
-1 left 
-2 right
-3 equal2list
-4 equal
-5 =
equal2diff(x=2)
equal2diff(equal(x,2))

# equal2list
1 Transforme l'égalité A=B ou equal(A,B) en la liste [A,B]
2 A=B or equal(A,B)is converted into the list [A,B]  
3 Transforma A=B o equal(A,B) en la lista [A,B]
0 Equal
-1 left 
-2 right
-3 equal2diff
-4 equal
-5 =
equal2list(x=2)
equal2list(equal(x,2))

# equation
1 equation renvoie l'équation cartésienne d'une courbe
2 equation returns the cartesian equation of a curve
3 equation devuelve la ecuación cartesiana de una curva
0 GeoObj, VectParam 
-1 parameq
equation(line(1-i,i),[x,y])

# erase
1 Efface l'écran graphique
2 Erase the graphique screen
3 Borra la pantalla gráfica
0 NULL
-1 ClrGraph
-2 erase3d
erase()

# error ERROR throw
1 Génère l'affichage d'une erreur dans un programme
2 Generates the display of an error in a programme
3 Genera un error(dentro de un programa)
0 Str
-1 try
-2 catch
error("Argument should be integer")
error("je provoque une erreur")

# is_collinear
1 Renvoie 1 si les points sont alignés, 2 si les points sont confondus et 0 sinon.
2 Returns 1 if the points are aligned,2 if the points are the same and 0 otherwise.
3 Devuelve 1 si los puntos están alineados, 2 si los puntos están = y 0 si no.
0 LstPnt
-1 is_cocyclic
is_collinear(0,i,1+i,2*i)
is_collinear(point(0),point(1+i),point(2,2),point(-1-i))
is_collinear(point(0,0,0),point(1,1,0),point(2,2,0),point(-1,-1,1))

# is_cocyclic
1 Renvoie 1 si les points sont cocycliques,2 si seulement 2 points distincts, 3
si les points sont confondus et 0 sinon.
2 Returns 1 if the points are on a circle, 2 if only 2 distinct points, 3 if the points are the same and 0 otherwise.
3 Devuelve 1 si los 4 puntos forman una circunferencia,2 si 2 puntos, 3  si los puntos =,y 0 si no.
0 LstPnt
-1 is_colinear
is_cocyclic(0,i,1+i,1,1/2+i*(1/2+sqrt(2)/2))
is_cocyclic(1,-1,i,-i,1+i,-1-i)

# is_cycle
1 Renvoie 1 si l'argument est un cycle et 0 sinon.
2 Returns 1 if the argument is a cycle and 0 otherwise.
3 Deveulve 1 si el argumento es cíclico y 0 si no.
0 Lst
-1 is_permu 
-2 cycle2perm
-3 cycles2permu
is_cycle([1,0,5])
is_cycle([1,0,5,1])

# is_parallel
1 Renvoie 1 si 2 droites sont parallèles et 0 sinon.
2 Returns 1 if 2 lines are parallel and 0 otherwise.
3 Devuelve 1 si 2 líneas son paralelas y 0 si no.
0 Line or Plan ,Line or Plan
-1 is_perpendicular
is_parallel(line(0,i),line(1,1+i))
is_parallel(line([2,3,-2],[-1,-1,-1]),plane([-1,-1,-1],[1,2,-3],[0,0,0]))
is_parallel(line([0,0,0],[-1,-1,-1]),line([2,3,-2],[-1,-1,-1]))

# is_permu
1 Renvoie 1 si l'argument est une permutation et 0 sinon
2 Returns 1 if the arg is a permutation and 0 otherwise
3 Devuelve 1 si el argumentos es una permutación y 0 si no
0 Lst
-1 is_cycle
-2 permu2cycles
is_permu([4,2,3,1])
is_permu([4,2,3,1,0])

# is_perpendicular
1 Renvoie 1 si 2 droites sont perpendiculaires
2 Returns 1 if 2 lines are perpendicular
3 Devuelve 1 si dos líneas son perpendiculares
0 Line or Plan,Line or Plan
-1 is_parallel
-2 is_orthogonal
is_perpendicular(line(0,i),line(1,1+i))
is_perpendicular(line([2,3,-2],[-1,-1,-1]),line([1,0,0],[1,2,8]))
is_perpendicular(plane([0,0,0],[1,2,-3],[1,1,-2]),plane([-1,-1,-1],[1,2,-3],[0,0,0]))
is_perpendicular([2,3,-2],[-1,-1,-1]),plane([0,0,0],[1,2,-3],[1,1,-2]))

# euler Phi
1 Indicatrice d'Euler (euler(n)=card({p<n,gcd(n,p)=1})).
2 Euler's function  (euler(n)=card({p<n,gcd(n,p)=1})).
3 Función de Euler (eluler(n)=card({p<n,gcd(n,p)=1})).
0 Intg(n)
-1 gcd
euler(11)
euler(6)

# eval evalm
1 Évaluation de l'argument
2 Evaluates its argument
3 Evalua su argumento
0 Expr
-1 evalf
eval(2*sin(pi))

# evalf approx
1 Évaluation numérique du premier argument (le nombre de digits peut être donné comme second argument)
2 Numerical evaluation of the first argument (we can give the number of digits as second argument)
3 Evaluación numérica del argumento (argument2=el número de dígitos)
0 Expr,[Int]
-1 evalb
-2 eval
evalf(2*sin(1))
evalf(2*sin(1),40)
evalf(sqrt(2)+pi)
evalf(sqrt(2)+pi,30)

# evalb
1 Évaluation booléenne de l'argument
2 Boolean evaluation of the argument
3 Evaluación numérica del argumento
0 Expr
-1 evalf
-2 eval
evalb(a==2)
evalb(sqrt(2)+pi>a)

# exp
1 Exponentielle.
2 Exponential.
3 Exponencial.
0 Expr
-1 ln
exp(0)

# factor factoriser
1 Factorisation d'un polynôme.
2 Factorizes a polynomial.
3 Factoriza un polinomio.
0 Expr
-1 ifactor
-2 partfrac
-3 normal
factor(x^4-1)
factor(x^4+12*x^3+54*x^2+108*x+81)

# Factor
1 Renvoie la factorisation d'un polynôme, sans l'évaluer.
2 Factorizes a polynomial without evaluation.
3 Factoriza un polinomio, sin evaluar.
0 Expr
-1 factor
-2 ifactor
-3 normal
Factor(x^4-1)
Factor(x^4+12*x^3+54*x^2+108*x+81)

# factor_xn
1 Mise en facteur dans P de x^n (n=degré du polynôme P).
2 Factorizes x^n in P (n=degree of polynomial P).
3 Factoriza x^n en P (n=grado de polinomio P).
0 Poly(P)
-1 ifactor
-2 partfrac
-3 normal
factor_xn(x^4-1)
factor_xn(x^4+12*x^3+54*x^2+108*x+81)

# factorial
1 factorial(n)=n!
2 factorial(n)=n!
3 factorial(n)=n!
0 Intg
-1 comb
-2 perm
factorial(4)


# fcoeff
1 Renvoie le polynôme décrit par la liste (racine ou pôle,multiplicité).  
2 Returns the polinomial describe by the list (root or pole,order).
3 Devuelve el polinómio descrito por la lista (raíz o polo, multiplicidad).
0 Lst(root||pole,order)
-1 pcoeff
-2 froot
-3 proot
fcoeff([1,2,0,1,3,-1])

# expand fdistrib developper
1 Distribue totalement * et / par rapport à + et -
2 Full distribution of * and / over + and -
3 Aplica la función distribituva totalmente de * y / sobre + y -
0 Expr 
-1 normal
-2 simplify
-3 ratnormal
expand((x+y)*(z+1))
expand((a+b+c)/d)
expand((y+x)*(z+y)*(x+z))
expand((x+3)^4)
expand((2*x-2*1)*(x^2-3*x+2)+(x^2-2*x+3)*(2*x-3*1))

# for
1 Boucle: for (init;do_if_true;increment) {action;}
2 Loop: for (init;do_if_true;increment) {action;}
3 Bucle: for (init;do_if_true;increment) {action;}
0 
-1 from
-2 to 
-3 pour
-4 by
-5 {}
 {local n:=1; for(j:=0;j<=10;j++) n:=n*j;}
 {local s:=0; for(j:=1;j<=10;j:=j+2) s:=s*j;}
 s:=0;for j from 1 to 10 by 2 do s:=s+j end_for;

# feuille op
1 Renvoie les arguments d'un opérateur sous forme d'une suite.
2 Returns the arguments of an operator as a sequence.
3 Devuelve el argumento de un operador como una secuencia.
0 Op or Fnc
-1 sommet
-2 quote
-3 makesuite
feuille(quote(gcd(45,126)))
feuille('gcd(45,126)')
 feuille('1+2')[1]
feuille([1,2,3])

# float2rational exact
1 Convertit l'expression en une expression rationnelle ou réelle.  
2 Converts the expression to a rational or real expression. 
3 Convierte un número real en racional
0 Expr
-1  
-2 
float2rational(1.5)
float2rational(1.4141)
float2rational(0.156381102937)

# floor
1 Renvoie le plus grand entier <= à l'argument (partie entière)
2 Returns the greatest integer <=to the argument
3 Devuelve el mayor entero <= que el argumento
0 Real or Cplx
-1 round
-2 ceil
-3 iPart
floor(-2.5)
floor(2.5-4.2*i)

# froot
1 Renvoie la liste des racines et des pôles avec leur multiplicité de F.
2 Returns the list of roots and poles with their mulitiplicity of F.
3 Devuelve la lista de raíces y polos con su multiplicidad de F.
0 RatPoly(F)
-1 proot
-2 fcoeff
-3 pcoeff
-4 realroot
-5 complexroot
-6 rationalroot
-7 crationalroot
froot((x^5-2*x^4+x^3)/(x-3))
froot((x^5-2*x^4+x^3)/(x-1))

# fsolve
1 Résolution numérique d'une équation ou d'un système.
2 Numerical solution of an equation or a system of equation.
3 Resolución numérica de una ecuación o de un sistema de ecuaciones.
0 Expr,Var,[Guess or Interval],[Method]
-1 solve
-2 nSolve
-3 csolve
fsolve(cos(x)=x,x,-1..1,bisection_solver)
fsolve(cos(x)=x,x,0,newton_solver)
fsolve([x^2+y-2,x+y^2-2],[x,y],[0,0],newtonj_solver)

# nSolve
1 Résolution numérique d'une équation ou d'un système
2 Numerical solution of an equation or a system of equation
3 Resolución numérica de una ecuación o de un sistema de ecuaciones
0 Expr,Var,[Guess or Interval],[Method]
-1 solve
-2 fsolve
-3 csolve
nSolve(cos(x)=x,x)
nSolve(cos(x)=x,x=1.3)

# Gamma
1 Calcule les valeurs de la fonction Gamma au point x0
2 Calculus of Gamma at a point x0
3 Calculo de Gamma en un punto x0
0 Real(x0)
-1 Psi
-2 Beta
Gamma(5)
Gamma(1/2)

# gauss
1 Décompose une forme quadratique en somme/différence de carrés
2 Split a quadratic form as a sum/difference of square
3 Descompone una forma cuadrática como suma/diferencia de cuadrados
0 Expr,VectVar
-1 
gauss(x^2+2*a*x*y,[x,y])

# Gcd
1 Renvoie le PGCD de 2 polynômes ou de 2 entiers ou de 2 rationnels sans l'évaluer
2 Returns the greatest common divisor of 2 polynomials or of 2 integers without evaluation
3 Devuelve el máximo común divisor de 2 polinomios o de 2 enteros sin evaluar
0 (Intg or Poly),(Intg or Poly)
-1 gcd
Gcd(45,75)
Gcd(x^2-2*x+1,x^3-1)
Gcd(x^2-2*x+1,x^2+x-2)

# gcd igcd
1 PGCD de 2 polynômes de plusieurs variables ou de 2 entiers ou de 2 rationnels.
2 Returns the greatest common divisor of 2 polynomials of several variables or of 2 integers or of 2 rationnals.
3 Devuelve el máximo común divisor de 2 polinomios de n variables o de 2 enteroso de 2 racionals.
0 (Intg or Poly),(Intg or Poly)
-1 lcm
-2 euler
-2 modgcd
-3 ezgcd
-4 psrgcd
-5 heugcd
-6 Gcd
gcd(45,75)
gcd(15/7,50/9)
gcd(x^2-2*x+1,x^3-1)
gcd(t^2-2*t+1,t^2+t-2)
gcd((x^2-1)*(y^2-1)*z^2,x^3*y^3*z+(-(y^3))*z+x^3*z-z)


# gramschmidt
1 Renvoie une base orthonormale de E de base B pour le produit scalaire Sp
2 Returns an orthonormal base of E of base B for this scalar product  Sp
3 Devuelve una base ortonormal de E de base B con su producto escalar Sp
0 Basis(B),ScalarProd(Sp)
-1  
-2 
gramschmidt([1,1+x],(p,q)->integrate(p*q,x,-1,1))

# graph2tex
1 Convertit le graphique en fichier LaTeX
2 Converts the graph screen to a LaTeX file
3 Convierte el gráfico en fichero LaTeX
0 [Str("filename")]
-1 graph3d2tex
graph2tex("graph.tex")
graph2tex()

# graph3d2tex
1 Convertit le graphe 3D en fichier LaTeX
2 Converts the 3d graph screen to a LaTeX file
3 Convierte el gráfico 3D en fichero LaTeX
0 [Str"filename")]
-1 graph2tex
graph3d2tex("graph.tex")
graph3d2tex()

# hadamard 
1 Éxécute le produit terme à terme de 2 matrices
2 Performs an element by element multiplication of 2 matrix
3 Realiza el producto término a término de 2 matrices
0 Mtrx,Mtrx
-1 .*
-2 *
hadamard([[1,2],[3,4]],[[3,4],[5,6]])

# halftan_hyp2exp
1 Transforme les fonctions trigo en tan(x/2) et les fonctions hyperbo en exp
2 Transforms the trigo functions in tan(x/2) and hyperbo functions in exp
3 Transforma las funciones trigonométricas en tan(x/2) y las funciones hiperbólicas en exp 
0 ExprTrig
-1 hyp2exp
-2 halftan
halftan_hyp2exp(sin(x)+sinh(x))

# halt
1 Place un programme en exécution pas-à-pas
2 Put a program in steb-by-step debug mode
3 Pone un programa en modo depuración paso a paso 
0 NULL
-1 
halt()

# has
1 Teste la présence d'une variable dans une expression
2 Checks if a variable is in an expression
3 Comprueba si una variable está en una expresión
0 Expr,Var
-1 lname
-2 lvar
has(x+y,x)
has(x+y,n)

# altitude
1 hauteur(A,B,C) trace la hauteur issue de A du triangle ABC
2 altitude(A,B,C) draws the  altitude through A of the triangle ABC
3 altitude(A,B,C) dibuja la altura en A del triángulo ABC
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 perpendicular
altitude(-1,1-i,i)

# barycenter
1 barycentre([point1,coeff1],...) trace le barycentre de point1 poids coeff1...
2 barycenter([point1,coeff1],...) draws the barycenter of point1 with coeff1
3 
0 [Pnt,Real],[Pnt,Real],[Pnt,Real]
-1 isobarycenter
-2 midpoint
barycenter([point(-1),1],[point(1+i),2],[point(1-i),1])

# isobarycenter
1 isobarycentre(A,B,C,...) trace l'isobarycentre des n points A,B,C...
2 isobarycenter(A,B,C,...) draws the isobarycenter of the n points A,B,C...
3 isobarycenter(A,B,C,....) dibuja el isobarycenter del A,B,C
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 barycenter
-2 midpoint
isobarycenter(-1,1-i,i)

# median_line
1 mediane(A,B,C) trace la médiane issue de A du triangle ABC
2 median_line(A,B,C) draws the median-line through A of the triangle ABC
3 median_line(A,B,C) dibuja la median en A del triángulo ABC
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 midpoint
-2 perpen_bisector
median_line(-1,1-i,i)

# perpen_bisector
1 mediatrice(A,B) trace la médiatrice (droite ou plan) du segment AB. 
2 perpen_bisector(A,B) draws the perpen_bisector (line or plane) of the segment AB.
3 perpen_bisector(A,B) dibuja la perpen_bisector (2d o 3d) de segmento AB
0 (Pnt or Cplx),(Pnt or Cplx)
-1 midpoint
-2 median_line
perpen_bisector(1-i,i)
perpen_bisector([0,0,0],[5,5,0])

# midpoint
1 milieu(A,B) trace le milieu du segment AB
2 midpoint(A,B) draws the midel point of the segment AB
3 midpoint(A,B) dibuja el centro de segmento AB
0 (Pnt or Cplx),(Pnt or Cplx)
-1 median_line
-2 perpen_bisector
midpoint(-1,1-i,i)

# head
1 Désigne le premier élément d'un vecteur ou d'une suite d'éléments ou d'une chaine.
2 Is the first element of a vector or a sequence or a string.
3 Es el pirmer elemento de un vector o secuencia o cadena.
0 Vect or Seq or Str
-1 inter
-2 tail
-3 mid
head(1,2,3)
head([1,2,3])
head("bonjour")

# hermite
1 Renvoie le polynôme de Hermite de degré n
2 Returns nth Hermite polynomial
3 Devuelve el polinómio de Hermite de grado n
0 Intg(n)
-1 legendre
-2 laguerre
hermite(3)

# grad
1 Renvoie le gradient de expr
2 Returns the gradient of expr
3Calcula el gradient de expr
0 Expr(expr),LstVar
-1 hessian
grad(2*x^2*y-x*z^3,[x,y,z])

# hessian
1 Renvoie la hessienne de expr
2 Returns the hessian of expr
3 Calcula el hessiano de expr
0 Expr(expr),LstVar
-1 grad
hessian(2*x^2*y-x*z,[x,y,z])

# hilbert
1 Renvoie la nième matrice de Hilbert : Hjk=1/(j+k+1) j,k=1..n
2 Returns the order n Hilbert matrix :  Hjk=1/(j+k+1) j,k=1..n
3 Devuelve la matriz n-ésima de Hilbert: Hjk=1/(j+k+1) j,k=1..n
0 Intg(n)
-1  
hilbert(4)

# homothety
1 homothetie(C,k,A)=point A1 tel que vect(C,A1)=k*vect(C,A) i.e en 2d est la similidude de centre C, de rapport abs(k) et d'angle arg(k).
2 homothety(C,k,A)=point A1 such as vect(C,A1)=k*vect(C,A) i.e in 2d it is the similarity center C, coeff abs(k) and angle arg(k).
3 homothety(C,k,A)=punto A1 tal que vect(C,A1)=k*vect(C,A).
0 Pnt(C),Real(k),Pnt(A)
-1 similarity
-2 inversion
homothety(1+i,1/3,i)
homothety(point(1,1,1),1/3,point(0,1,0))
 h:=homothety(1+i,1/3);h(i)
 h:=homothety(point(1,1,1),1/3);h(point(0,1,0))

# inversion
1 inversion(C,k,A)=point(A1) avec A1 sur la droite(C,A) et mes_alg(CA1*CA)=k
2 inversion(C,k,A)=point A1 such as A1 on line(C,A) and mes_alg(CA1*CA)=k
3 inversion(C,k,A)=punto A1 tal que A1 en line(C,A) y mes_alg(CA1*CA)=k
0 Pnt(C),Real(k),Pnt(A)
-1 homothety
inversion(i,1/2,1+i)
inversion([1,1,1],-1/2,point(-1,-1,-1))
 inver:=inversion(i,1/2);inver(i)
 inver:=inversion([1,1,1],-1/2);inver(point(-1,-1,-1))

# hyp2exp
1 Transforme les fonctions hyperboliques en exponentielle 
2 Transforms the hyperbolic functions with the exponential function
3 Transforma las funciones hiperbólicas en exponenciales
0 ExprHyperb
-1 halftan_hyp2exp
hyp2exp(cosh(x)) 

# hyperbola
1 hyperbole(F1,F2,M)=hyperbole de foyers F1,F2 passant par M ou (|MF1-MF2|=2*a geo2d) et hyperbole(p(x,y)) dessine la conique si deg(p)=2. 
2 hyperbola(F1,F2,M)=hyperbole focus F1,F2 throught M or (|MF1-MF2|=2*a geo2d) and hyperbola(p(x,y)) draws the conic if deg(p)=2.
3 hyperbola(F1,F2,M)=hipérbola de focos F1,F2 y pasa por M (o |MF1-MF2|=2*a geo2d) y hyperbola(p(x,y))=conic si deg(p)=2.
0 Focus(F1),Focus(F2),(Pnt(M) or Real(a))
-1 ellipse
-2 parabola
hyperbola(-1,1,point(1+i))
hyperbola(-1,1,sqrt(5)-1)
hyperbola(point(-1,0,0),point(1,0,0),point(1,1,1))

# i
1 Racine carrée de -1
2 Square root of -1
3 Raíz cuadrada de -1
0 
-1 pi
-2 e
 i*i

# e
1 exp(1)
2 exp(1)
3 exp(1)
0 
-1 i
-2 pi
 evalf(e)

# pi
1 Le nombre pi
2 pi
3 El número pi
0 
-1 e
-2 i
 pi/4
 evalf(pi) 

# ibasis
1 Base d'une intersection de deux espaces vectoriels
2 Basis of the intersection of two vector spaces
3 Base de la intersección de dos espacios vectoriales
0 Lst(Vect,..,Vect),Lst(Vect,..,Vect)
-1 basis
ibasis([[1,0,0],[0,1,0]],[[1,1,1],[0,0,1]])

# infinity
1 Infini non signé
2 Unsigned infinity
3 Infinito, sin signo
0 
-1 +infinity
-2 -infinity


# +infinity inf
1 Plus infini
2 Plus infinity
3 Mas infinito
0 
-1 infinity
-2 -infinity


# -infinity
1 Moins infini
2 Minus infinity
3 Menos infinito
0 
-1 infinity
-2 +infinity

# ibpdv
1 Intégration par parties de f(x)=u(x)*v'(x) avec v(x) (ou 0 pour intégrer directement) comme 2ième argument. On peut rajouter comme argument la variable et aussi les bornes a et b pour une integrale définie.
2 Integration by parts of f(x)=u(x)*v'(x) with v(x) (or 0)as 2nd argument. You can specify a variable of integration and also the calculus of the integrate (bounds a and b).  
3 Integración por partes de f(x)=u(x)*v'(x) con v(x)(o 0)  como 2º argumento. Hay que especificar la variable de integración y cálculo de la integral (entre a y b). 
0 Expr(f(x)),Expr(v(x)),[Var(x)],[Real(a)],[Real(b)]
-1 ibpu
-2 int
ibpdv(ln(x),x)
ibpdv(ln(x),x,x,1,3)
ibpdv(x*ln(x),x^2/2)
ibpdv([x*ln(x),-1],0)
ibpdv(ibpdv(ln(x),x,x,2,3),0,x,2,3)

# ibpu
1 Intégration par parties de f(x)=u(x)*v'(x) avec u(x) (ou 0 pour intégrer directement) comme 2ième argument. On peut rajouter comme argument la variable et aussi les bornes a et b pour une integrale définie.
2 Integration by parts of f(x)=u(x)*v'(x) with u(x) (or 0) as 2nd argument. You can specify a variable of integration and also the calculus of the integrate (bounds a and b). 
3 Integración por partes con f(x)=u(x)*v'(x) con u(x) (o 0) como 2º argumento. Hay que especificar la variable de integración y cálculo de la integral (entre a y b).
0 Expr(f(x)),Expr(u(x)),[Var(x)],[Real(a)],[Real(b)]
-1 ibpdv
-2 int
ibpu(ln(x),ln(x))
ibpu(ln(x),ln(x),x,1,3)
ibpu(x*ln(x),ln(x))
ibpu([x*ln(x),-1],0)
ibpu(ibpu(ln(x),ln(x),x,2,3),0,x,2,3)

# ichinrem ichrem
1 Restes chinois pour des entiers.
2 Chinese remainders for integers.
3 Restos chinos de enteros.
0 LstIntg(a,p),LstIntg(b,q)
-1 gcd
-2 fracmod
ichinrem([2,7],[3,5])
ichinrem([2%7,3%5])
ichinrem([2%7,3%5,1%9])
ichinrem([(x+1)%2,(x+2)%3,(3*x-1)%5])

# if
1 Test: if (condition) true_action; else false_action; 
2 Test: if (condition) true_action; else false_action; 
3 Test: if (condition) true_action; else false_action; 
0 
-1 switch
-2 for
-3 local
-4 -> 
-5 {}
-6 si
 if (x<0) print("x negatif");
 x:=1;if (x>0) {x:=x+1; print("x est strictement plus grand que 1");x}
 if x<0 then print("x negatif"); end_if;
  x:=1;if x<0 then print("x negatif"); else print("x positif"); end_if;
 if (j<0) cos(j); else cosh(j);
 x:=0.1;if (x>0) {x:=x+1; print("x est strictement plus grand que 1");} else {x:=x-1;print("x est plus petit ou égal à -1");};x


# ifactor factoriser_entier
1 Factorisation d'un entier en facteurs premiers.
2 Factorization of an integer into prime factors.
3 Factorización de un entero en factores primos.
0 Intg
-1 factor
ifactor(50)
ifactor(123456789)

# ilaplace invlaplace
1 Transformée de Laplace inverse d'une fraction rationnelle
2 Inverse Laplace transform of a rational fraction
3 Anti-Transformada de Laplace de una fracción racional
0 Expr,[Var],[IlapVar]
-1 laplace
-2 ztrans
-3 invztrans
ilaplace(1/(x^2+1)^2)
ilaplace(s/(s^4-1),s,x)

# im imag
1 Partie imaginaire d'un nombre complexe
2 Returns the imaginary part of a complex number
3 Devuelve la parte imaginaria de un número complejo
0 Cplx
-1 re
-2 conj
im(1+2*i)
im((1+2*i)^2)
im([1+2*i,(1+2*i)^2])

# image
1 Image d'une application linéaire de matrice M
2 Image of a linear application of matrix M
3 Imagen de una aplicación lineal de matriz M
0 Mtrx(M)
-1 ker
-2 rref
image([[1,2],[3,6]])
image([[1,2,3],[1,3,6],[2,5,9]])

# in
1 Iteration for...end_for dans un ensemble
2 Iteration for ...end_for in a set
3 Iteración for ...end_for
0 
-1 for
 s:=0;for k in %{ 1,5,7 %} do s:=s+k; end_for
 for k in %{2,1,3%} do print(k); end_for

# incircle
1 inscrit(A,B,C) trace le cercle inscrit au triangle ABC.
2 incircle(A,B,C) draws the incircle of the ABC triangle.
3 incircle(A,B,C) dibuja la circunferencia inscrita en el triángulo ABC.
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 excircle
-2 circumcircle
incircle(0,1,1+i)

# excircle
1 exinscrit(A,B,C) trace le cercle exinscrit au triangle ABC relatif à A.
2 excircle(A,B,C) draws the A-excircle of the ABC triangle.  
3 excircle(A,B,C) dibuja la circunferencia exinscrita relativa al punto A.
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 incircle
-2 circumcircle
excircle(0,1,1+i)

# int integrate integrer
1 Primitive (la variable d'intégration est le 2ième argument) ou valeur de l'intégrale (bornes a et b).
2 Indefinite integral, you can specify a variable of integration or the calculus of the integrate (bounds a and b).
3 Integral indefinida, hay que especificar la variable de integración.
0 Expr,[Var(x)],[Real(a)],[Real(b)]
-1 Int
-2 diff
-3 plotarea
int(1/x)
int(1/(4+t^2),t)
int(1/(1-x^4),x,2,3)

# inter
1 Donne l'intersection de 2 courbes ou surfaces sous la forme d'un vecteur.
2 Gives the intersection of 2 curves or surfaces as a vector.
3 Devuelve la intersección de 2 cruvas o superficies como un vector.
0 Curve,Curve
-1 intersect
-2 head
inter(line(i,1-i),circle(0,1))
inter(plane(x=y+3),cone([0,0,0],[0,0,1],pi/6))
 inter(line(i,1-i),circle(0,1))[0]

# single_inter line_inter
1 Donne l'une des intersections de 2 courbes ou surfaces.
2 Gives one of the intersections of 2 curves or surfaces. 
3 Devuelve una entre las interseccións de 2 cruvas o superficies.
0 Curve,Curve
-1 intersect
-2 head
single_inter(line(i,1-i),circle(0,1))
single_inter(line(i,1-i),line(0,1))
single_inter(circle(1,sqrt(2)),circle(0,1))
single_inter(plane(x=y),plane(y=z))
single_inter(line(x=y+1,y=2*z),plane(y=z))

# iquo intDiv
1 Quotient euclidien de 2 entiers ou de 2 entiers de Gauss.
2 Euclidean quotient of 2 integers.
3 Cociente euclídeo de 2 enteros.
0 Intg,Intg
-1 irem
-2 smod
-3 quo
iquo(125,15)
iquo(125,41)
iquo(-7,3)
iquo(25+12*i,5+7*i)

# div
1 Quotient euclidien de 2 entiers ou de 2 entiers de Gauss (opérateur infixé)
2 Euclidean quotient of 2 integers (infixed operator).
3 Cociente  euclídeo de 2 enteros (operador infijo).
0 Intg,Intg
-1 iquo
-2 mod
 125 div 15
 125 div 41
 -7 div 3
 (25+12*i) div (5+7*i)

# iquorem
1 Quotient et reste euclidien de 2 entiers ou de 2 entiers de Gauss.
2 Euclidean quotient and remainder of 2 integers.
3 Cociente euclídeo y resto de 2 enteros.
0 Intg,Intg 
-1 irem
-2 iquo
-3 quorem
iquorem(125,15)
iquorem(125,41)
iquorem(25+12*i,5+7*i)

# irem remain
1 Reste euclidien de 2 entiers ou de 2 entiers de Gauss.
2 Euclidean remainder of 2 integers.
3 Resto euclídeo de 2 enteros.
0 Intg,Intg 
-1 iquo
-2 smod
-3 rem
irem(125,15)
irem(125,41)
irem(-7,3)
irem(25+12*i,5+7*i)

# is_pseudoprime
1 Test de pseudo-primalité (0 non premier, 1 probablement premier, 2 premier)
2 Pseudo-prime test (0 not prime, 1 probably prime, 2 prime)
3 
0 Intg
-1 prevprime
-2 nextprime
-3 is_prime
is_pseudoprime(1999)
is_pseudoprime(9856989898997)
is_pseudoprime(9856989898997789789)

# is_prime
1 Test "p-1"de Pocklington (renvoie les coeffs prouvant la primalité, 1 ou 0) 
2 Test "p-1"de Pocklington (returns the coeffs for a proof of primality, 1 or 0) 
3 
0 Intg
-1 prevprime
-2 nextprime
-3 is_pseudoprime
is_prime(1999)
is_prime(9856989898997)
is_prime(9856989898997789789)

# isprime isPrime
1 Test de primalité (=true ou false).
2 Probabilistic primality testing (=true or false).
3 Comprueba la primalidad (=true o false).
0 Intg
-1 prevprime
-2 nextprime
isprime(1999)
isprime(9856989898997)
isprime(9856989898997789789)

# isom
1 Recherche des éléments propres d'une isométrie 2-d ou 3-d
2 Find elements of a 2-d or 3-d isometry
3 Encuentra los elementos de un isometría 2-d y 3-d
0 Mtrx
-1 mkisom
isom([[0,1],[1,0]])

# lgcd
1 PGCD d'une liste de polynômes ou d'entiers
2 Returns the greatest common divisor of a list of polynomials or of integers
3 Devuelve el máximo común divisor de una lista de polinomios o de enteros
0 Seq or Lst 
-1 gcd
-2 lcm
-3 euler
-4 content
lgcd([45,75,20,15])
lgcd([x^2-2*x+1,x^3-1,x-1])
lgcd(x^2-2*x+1,x^3-1,x-1)
# jacobi_symbol
1 Symbole de Jacobi
2 Jacobi symbol
3 Símbolo de Jacobi
0 Intg,Intg
-1 legendre_symbol
jacobi_symbol(132,5)
jacobi_symbol(132,25)

# jordan
1 Renvoie la liste formée par la matrice de passage et la forme de Jordan d'une matrice.
2 Returns the list made by the matrix of passage and the Jordan form of a matrix.
3 
0 Mtrx
-1 egv
-2 egvl
-3 rat_jordan
jordan([[0,2],[1,0]]) 
jordan([[-2,-2,1],[-2,1,-2],[1,-2,-2]])
jordan([[1,1,-1,2,-1],[2,0,1,-4,-1],[0,1,1,1,1],[0,1,2,0,1],[0,0,-3,3,-1]])

# rat_jordan
1 Renvoie la liste formée par la matrice de passage et la forme de Jordan rationnelle d'une matrice.
2 Returns the list made by the matrix of passage and the rational Jordan form of a matrix.
3 
0 Mtrx  
-1 egv
-2 egvl
-3 jordan
-4 companion
rat_jordan([[0,2],[1,0]]) 
rat_jordan([[-2,-2,1],[-2,1,-2],[1,-2,-2]])
rat_jordan([[1,1,-1,2,-1],[2,0,1,-4,-1],[0,1,1,1,1],[0,1,2,0,1],[0,0,-3,3,-1]])

# ker kernel nullspace
1 Noyau d'une application linéaire de matrice M 
2 Kernel of a linear application of matrix M
3 Núcleo de una aplicación lineal de matriz M
0 Mtrx
-1 image
-2 rref
-3 Nullspace
ker([[1,2],[3,6]])
ker([[1,2,3],[1,3,6],[2,5,9]])

# Nullspace
1 Forme inerte de nullspace pour calculs modulaires (irem/mod)
2 Inert form of nullspace for modular computation (irem/mod)
3 
0 Mtrx
-1 image
-2 rref
-3 nullspace
Nullspace([[1,2],[3,6]])
Nullspace([[1,2,3],[1,3,6],[2,5,9]])

# Resultant
1 Forme inerte de resultant pour calculs modulaires (irem/mod)
2 Inert form of resultant for modular computation (irem/mod)
3 
0 Poly,Poly,Var
-1 resultant
Resultant(x^3+x+1,x^2-x-2,x)

# kill
1 Arrête l'exécution d'un programme en mode pas-à-pas
2 Stop step-by-step execution of a program
3 Para la ejecución paso a paso de un programa
0 NULL
-1
kill() 

# lagrange interp
1 Renvoie le polynôme de degré n-1 tel que P(xk)=yk k=0..n-1
2 Returns the interpolating polinomial of min degree for a pair of values
3 Devuelve la interpolación polinómica de menor grado para un par de valores
0 (Lst_xk,Lst_yk) or Mtrx_2*n
-1 spline
lagrange([1,3],[0,1])
lagrange([[1,3],[0,1]])

# laguerre
1 Renvoie le nième polynôme de Laguerre
2 Returns the nth Laguerre polynomial
3 Devuelve el polinómio de Laguerre de grado de n 
0 Intg(n)
-1 legendre
-2 hermite
laguerre(4)

# laplace
1 Transformée de Laplace
2 Laplace transform
3 Transformada de Laplace
0 Expr,[Var],[LapVar]
-1 invlaplace
-2 ztrans
-3 invztrans
laplace(exp(x)*sin(x))
laplace(sin(x)^2,x,s)

# laplacian
1 Calcule le laplacien de E par rapport à la liste de variables
2 Returns the Laplacian of E with respect to the list of variables
3 Calcula la laplaciana 
0 Expr(E),LstVar
-1  
-2 
laplacian(exp(z)*cos(x*y),[x,y,z])

# lcm
1 PPCM de 2 polynômes de plusieurs variables ou de 2 entiers ou de 2 rationnels.
2 Returns the lowest common multiple of 2 polynomials of several variables or of 2 integers or of 2 rationnals.
3 Devuelve el mínimo común múltiplo de 2 polinomios de n variables o de 2 enteros o de 2 racionals.
0 (Intg or Poly),(Intg or Poly)
-1 gcd
lcm(6,4)
lcm(1251,123)
lcm(5/7,50/9)
lcm(x^2-2*x+1,x^3-1)
lcm(t^2-2*t+1,t^2+t-2)
lcm((x^2-1)*(y^2-1)*z^2,x^3*y^3*z+(-(y^3))*z+x^3*z-z)

# legendre
1 Renvoie le nième polynôme de Legendre
2 Returns the nth Legendre polynomial
3 Devuelve el polinómio de Legendre de grado n 
0 Intg(n)
-1  
legendre(4)

# locus
1 lieu(M,A) trace le lieu de M (ou lieu(d,A) trace l'enveloppe de d) quand A:=element(C) (C est une courbe). Les instructions des exemples ci-après, doivent être écrites dans un niveau de géométrie sur des lignes différentes.  
2 locus(M,A) draws the locus of M (or locus(d,A) draws the envelope of d) when A:=element(C) (C is a curve). The example instructions below, must be written in a geometric level on different lines.
3 locus(M,A) dibuja el lugar de M (locus(d,A) dibuja el sobre de d) cuando A:=element(C) (C es una curva).
0 Pnt,Elem
-1 envelope
-2 trace
 A:=element(circle(i,1+i));M:=homothety(0,2,A);locus(M,A)
 A:=element(line(x=0));d:=perpen_bisector(1,A);locus(d,A)

# lin lineariser
1 Linéarisation des exponentielles
2 Linearization of exponentials
3 Linealización de exponenciales
0 Expr 
-1 tlin
-2 texpand
lin(exp(x)^n)
lin((exp(x)^3+exp(x))^2)

# linsolve resoudre_systeme_lineaire
1 Résolution d'un système d'équations linéaires
2 Linear equations system solver
3 Resolución de un sistema de ecuaciones lineales
0 LstLinEq,LstVar
-1 solve
-2 proot
-3 simult
-4 gaussjord
-5 pivot
-6 ref
linsolve([x+y+z=1,x-y=2,2*x-z=3],[x,y,z])
linsolve([m*x+y=a,x+m*y=b],[x,y])

# thickness epaisseur
1 Option (compatibilité Maple) d'une commande graphique pour définir l'epaisseur  des traits.
2 Option (Maple compatibility) of a graphic command to define the thickness of lines.
3 
0 Opt
-1 line_width
 segment(0,point(1,1),thickness=5)
 segment(0,point(1,1),epaisseur=5)

# axes
1 Option globale(compatibilité Maple) d'une commande graphique pour mettre ou non les axes.
2 Global option (Maple compatibility) of a graphic command to put or not the axes.
3 
0 Opt
-1 line_width
 axes=0;segment(0,point(1,1))
 axes=1;segment(0,point(1,1),epaisseur=5)

# style
1 Option locale (compatibilité Maple) d'une commande graphique pour tracer une droite en pointillé en mettant style=point.
2 Local option (Maple compatibility) of a graphic command to plot a line with dots with style=point.
3 
0 Opt
-1 line_width
 segment(0,point(1,1),style=point)
 line(y=x,style=point,display=green+line_width_2)

# title titre
1 Option globale d'une commande graphique pour mettre un titre au graphique.
2 Global option of a graphic command to put a title in a graphic.
3 
0 Opt
-1 line_width
 title="segment";segment(0,point(1,1),epaisseur=5)
 titre="segment";segment(0,point(1,1),epaisseur=5)

# gl_texture
1 Option permettant de mettre une image sur les rectangles de côtés parallèles aux axes en 2-d et sur les surfaces en 3-d ou permettant de mettre un fond sur un graphique 2-d.
2 Option that puts a picture in a rectangle of sides parallel to the axis (2-d) or on a 3-d surface or to fill the background (2-d).
3 
0 Opt=NameFich
 carre(i,1+i,gl_texture="image.jpg")
 gl_texture="image.jpg"; carre(i,1+i)

# gl_shownames
1 Option permettant de montrer ou  de cacher le nom des objets géométriques.
2 Option that shows or hides objects names.
3 
0 Opt=Boolean 
 gl_shownames=true;K:=carre(i,1+i)
 gl_shownames=false;K:=carre(i,1+i)

# gl_quaternion
1 Option permettant de définir le quaternion pour la visualisation des scènes 3-d (pas compatible avec l'interactivit\'e).
2 Option that  defines the quaternion for the visualization in 3-d scenes (do not use for interactive scenes).
3 
0 Opt=Lst
 gl_quaternion=[-0.35752,-0.50198,-0.64393,0.45338]

# gl_rotation
1 Option globale permettant de définir l'axe de rotation pour les animations par rotation des scènes 3-d.
2 Option that defines the rotation axis for the animation rotation of 3-d scene.
3 
0 Opt=NameFich
 gl_rotation=[1,1,1];cube([0,0,0],[3,0,0],[0,0,1])

# gl_x gl_y gl_z
1 Option globale permettant de définir le cadrage du graphique.
2 Option that sets the graphic configuration (do not use for interactive scenes).
3 
0 Opt=Interval
 gl_x=0..2; carre(i,1+i)

# gl_xtick gl_ytick gl_ztick
1 Option globale permettant de définir l'espacement des marques sur les axes des x,(resp y,z).
2 Option that defines the interval between tick marks on the x (or y or z) axis.
3 
0 Opt=Real
 gl_xtick=0.5
 gl_ytick=1

# gl_x_axis_unit gl_y_axis_unit gl_z_axis_unit
1 Option globale permettant de définir individuellement les noms des unités sur les axes des x (resp y,z).
2 Option that is an  individual definition of the units of the x, (or y or z) axis.
3 
0 Opt=Str
  gl_x_axis_unit="s";
 gl_y_axis_unit="m/s";

# gl_x_axis_name gl_y_axis_name gl_z_axis_name
1 Option globale permettant de définir individuellement les noms des axes x (resp y,z).
2 Option that is an individual definition of the names of the x (or y or z) axis.
3 
0 Opt=Str
 gl_x_axis_name="s";
 gl_y_axis_name="m/s";


# legend
1 legende(za,"ici") (ou legende([20,60],"ici")) "ici" est écrit au point d'affixe za (ou à la position [20,60] en pixel) et legende=["m","s"] écrit "m","s" comme unités sur les axes
2 legend(za,"here") (or legende([20,60],"here")) "here" is written at the point of affix za (or at the pixel position [20,60]) and legend=["m","s"] write "m","s" as units on the axis.
3 legend(za,"aqui") "aqui" es escrito en el punto de afijo za  y legend=["m","s"] escribir "m","s" como unidad en eje.
0 Cplx or Lst,Str
-1 labels
-2 angle 
legend(1+i,"Hello")
legend(1+i,"Hello",quadrant4,red)
legend([30,20],"bonjour")
 r:=evalf(sqrt(2));legend([30,20],string(r))
 r:=evalf(sqrt(2));legend([30,20],r)
 legende=["m","s"];point(1,1); 
 display(legend(1+i,"A"),red)
 point(2+i,legend="2+i",display=quadrant2+red)
 point([2,2*i],legend="1+i",display=quadrant2+red)
 polygon(2,1,i,2*i,legend="1+i",display=quadrant2+red)

# labels
1 labels=["u","v"]  renomme les axes en "u" et "v".
2 labels=["u","v"]  renames the axis with "u" et "v".
3 labels=["u","v"] "u" es escrito en lugar de "x" y "v" es escrito en lugar de "y" en los ejes.
0 Cplx or Lst,Str
-1 legend
-2 angle 
legend(1+i,"Hello")
legend([30,20],"bonjour")
 legende=["m","s"];point(1,1); 
 display(legend(1+i,"A"),red)

# legendre_symbol
1 Symbole de Legendre
2 Legendre symbol
3 Símbolo de Legendre
0 Intg,Intg
-1 jacobi_symbol
legendre_symbol(132,5)
legendre_symbol(132,25)

# ln log
1 Logarithme néperien
2 Natural logarithm
3 Logaritmo neperiano
0 Expr
ln(1)
ln(e)

# local
1 Définit des variables locales: f(x):={local (var1:=x),var2; instruction;};
2 Local variables definition: f(x):={local (var1:=x),var2; instruction;};
3 Definición de variables locales: f(x):={local (var1:=x),var2; instruction;};
0 
-1 for
-2 if 
-3 -> 
-4 {}
 f2(x):={local (a:=2),b; b:=a*x; return b;}

# logb
1 Logarithme à base b
2 Logarithm of base b
3
0 Real
-1 log
-2 log10
logb(5,2)
logb(7,10)

# log10
1 Logarithme à base 10
2 Common logarithm (base 10)
3 Logaritmo en base 10
0 Expr
log10(10)

# distance
1 Calcule la distance entre 2 points ou un point et une courbe
2 Calculates the distance between 2 points or a point and a curve
3 Calcula la distancia entre 2 puntos o entre 1 punto y una curva 
0 (Pnt or Cplx),(Pnt or Cplx or Curve)
-1 distance2
distance(point(0),point(1+i))
distance(1+i,segment(1-i,i))
distance(0,1+i)

# distance2
1 Calcule le carré de la distance entre 2 points ou un point et une courbe
2 Calculates the square of the distance between 2 points or a point and a curve
3 Calcula el cuadrado de la distancia entre 2 puntos o entre un punto y una curva
0 (Pnt or Cplx),(Pnt or Cplx or Curve)
-1 distance
distance2(point(0),point(1+i))
distance2(1+i,segment(1-i,i))
distance2(0,1+i)

# limit limite
1 Limite d'une expression en un point (a or +/-infinity)
2 Limit of an expression at a limit point (a or +/-infinity)
3 Límite de una expresión en un punto (a o +/-infinity)
0 Expr,Var,Val,[Dir]
-1 series
-2 taylor
limit((n*tan(x)-tan(n*x))/(sin(n*x)-n*sin(x)),x,0)
limit(sin(x)/(x^2-3*x),x,0)
limit((2*x-1)/exp(1/(x-1)),x,+infinity)
limit(exp(1/x),x,0,1)

# lu
1 Pour A une matrice numérique, renvoie p permutation, L et U tels que PA=LU (P=permu2mat(p))
2 For a numerical matrix A, returns p permutation, L and U such that PA=LU (P=permu2mat(p))
3 Para una matriz numérica A, devuelve permutación p, y U tales que PA=LU (P=permu2mat(p))
0 Mtrx
-1 qr
-2 cholesky
-3 LU
lu([[1,2],[3,4]])
lu([[6,12,18],[5,14,31],[3,8,18]])

# lvar
1 Liste des variables d'un objet (avec dépendance rationnelle)
2 List of rational variables in the object
3 Lista de variables racionales en un objeto
0 Expr 
-1 lname
-2 has
lvar(exp(x)*2*sin(y))
lvar(exp(x)*2*sin(y)+ln(x))

# lname indets
1 Liste des variables de l'expression
2 List of variables in the expression
3 Lista de las variables en un objeto
0 Expr 
-1 has
-2 lvar
lname(exp(x)*2*sin(y))

# norm l2norm
1 Norme l2 d'un vecteur=sqrt(x1^2+x2^2+...xn^2)
2 Returns the l2 norm of a vector=sqrt(x1^2+x2^2+...xn^2)
3 Norma de un vector=sqrt(x1^2+x2^2+...xn^2)
0 Vect
-1 maxnorm
-2 l1norm
norm([1,2])
norm([1,2,3,-4])

# maxnorm 
1 Norme du max d'un vecteur (ou d'une matrice): maxnorm([x1,x2,..,xn])=max(|x1|,..,|xn|)
2 Norm with the max  of a vector (or of a matrix): maxnorm([x1,x2,..,xn])=max(|x1|,..,|xn|)
3 Norma de un vector (o de una matriz): maxnorm([x1,x2,..,xn])=max(|x1|,..,|xn|)
0 Vect or Mtrx
-1 l2norm
-2 l1norm
maxnorm([1,2])
maxnorm([1,2,3,-4])

# rowNorm rownorm
1 Renvoie le maximum des sommes des valeurs absolues des éléments situés sur les lignes de la matrice: rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)).
2 Returns the max of the l1_norm of the rows of a matrix: rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)).
3 Norma de una matriz:rowNorm(a_{j,k})=max_j(sum_k(|a_{j,k}|)). 
0 Vect or Mtrx
-1 norm
rowNorm([[1,2],[3,-4]])
rowNorm([[1,2,3,-4],[-5,3,2,1]])

# colNorm colnorm
1 Renvoie le maximum des sommes des valeurs absolues des éléments situés sur les colonnes de la matrice: colNorm(a_{j,k})=max_k(sum_j(|a_{j,k}|))
2 Returns the max of the l1_norm fo the columns of a matrix: colNorm(a_{j,k})=max_k(sum_j(|a_{j,k}|))
3 Norma de una matriz:colNorm(a_{j,k})=max_k(sum_j(|a_{j,k}|)) 
0 Vect or Mtrx
-1 norm
colNorm([[1,2],[3,-4]])
colNorm([[1,2,3,-4],[-5,3,2,1]])

# max
1 Maximum de deux reels
2 Maximum of two reals
3 Máximo de dos reales
0 Real,Real
-1 min
max(25,35)

# makelist
1 Renvoie une liste faite à partir d'une fonction ou d'une constante.
2 Returns a list made with a function or with a constant.
3 Devuelve una lista hecha a partir de una función o a partir de una constante.
0 Fnc,InitVal,FinalVal,StepVal
-1 seq
-2 makemat
-3 $
makelist(x->x^2,1,10,2)
makelist(4,1,10)
makelist(x->ifte(x<5,"A","B"),1,10)

# map
1 Applique la fonction f à tous les éléments de l
2 Apply the function f at the elements of the list l
3 Aplica la función f a los elementos de la lista l
0 Lst(l),Fnc(f)
-1 apply
map([1,2,3],x->x^3)

# apply 
1 Applique la fonction f à tous les éléments d'une liste l (option matrix pour une matrice).
2 Apply the function f at the elements of the list l (option matrix for a matrix).
3 Aplica la función f a los elementos de la lista l (opción matrix para una matriz).
0 Fnc(f),Lst(l)
-1 map
-2 unapply
-3 matrix
apply(x->x^3,[1,2,3])
apply(x->x+1,[[1,2,3],[1,2,3]],matrix)

# maple_mode
1 Passe en mode Xcas (0), Maple (1), Mupad (2), TI89 (3)
2 Switchs to mode Xcas (0), Maple (1), Mupad (2), TI89 (3)
3 Cambia a modo Xcas (0), Maple (1), Mupad (2), TI89 (3)
0 Intg(0) or 1 or 2 or 3
maple_mode(1)
maple_mode(0)

# maple2mupad
1 maple2mupad("fichier1","fichier2") traduit fichier1(Maple) en fichier2(MuPAD)
2 maple2mupad("file1","file2") translate file1(Maple) to file2(MuPAD)
3 maple2mupad("file1","file2") convierte file1(Maple) en file2(MuPAD)
0 Str("Name_Maplefile"),Str("Name_Mupadfile")
-1 maple2xcas

# maple2xcas
1 maple2xcas("fichier1","fichier2") traduit fichier1(Maple) en fichier2(xcas)
2 maple2xcas("file1","file2") translate file1(Maple) to file2(xcas)
3 maple2xcas("file1","file2") convierte file1(Maple) en file2(xcas)
0 Str("NameMapleFile"),Str("NameXcasFile")
-1 maple2mupad

# mupad2maple
1 mupad2maple("fichier1","fichier2") traduit fichier1(MuPAD) en fichier2(Maple)
2 mupad2maple("file1","file2") translate file1(MuPAD) to file2(Maple)
3 mupad2maple("file1","file2") convierte file1(MuPAD) en file2(Maple)
0 Str("NameMupadFile"),Str("NameMapleFile")
-1 mupad2xcas

# mupad2xcas
1 mupad2xcas("fichier1","fichier2") traduit fichier1(MuPAD) en fichier2(xcas)
2 mupad2xcas("file1","file2") translate file1(MuPAD) to file2(xcas)
3 mupad2xcas("file1","file2") convierte file1(MuPAD) en file2(xcas)
0 Str("NameMupadFile"),Str("NameXcasFile")
-1 mupad2maple 

# min
1 Minimum de deux réels
2 Minimum of two reals
3 Mínimo de dos reales
0 Real,Real
-1 max
min(25,35)

# mkisom
1 Matrice d'une isométrie donnée par ses éléments propres
2 Matrix of an isometry given its elements
3 Matriz de una isometría dados sus elementos
0 Vect,(Sign(1) or -1)
-1 isom
mkisom([1,2],1)
mkisom([[1,0,0],pi/3],-1)
mkisom(pi,1)

# minus
1 minus est un opérateur infixé pour avoir la diffèrence de 2 ensembles
2 minus is a infixed operator to get the difference of 2 sets 
3 minus es un operador infijo para obtener la diferencia de 2 sets, vectores o secuencias
0 (Vect or Set),(Vect or Set)
-1 union
-2 intersect
 [1,2,3] minus [2,5,6]
 %{1,2,3%} minus %{2,5,6%}
 
# moyal
1 Produit de Moyal de 2 symboles
2 Moyal product of 2 symbols
3 Producto Moyal de 2 expresiones simbólicas
0 Expr,Expr,VectVar
-1 
moyal(x^2+y^4,x^4-y^2,[x,y],5)

# newton
1 newton(f(x),x,a,p) calcule une racine de f(x) par la methode de Newton en partant de a avec p itérations (par défaut p=20).
2 newton(f(x),x,a,p)=one root of f(x) by Newton method begining with a and p iterations (by default p=20).
3 newton(f(x),x,a,p) calcula una raíz de f(x) por el método de Newton comenzando en a (por defecto p=20). 
0 Expr(f(x)),Var(x),[ApproxVal(a),NumIter(p)]
-1 rootof
newton(x^2-2,x)
newton(x^2-2,x,2)
newton(x^2-2,x,-2)
newton(x^2-2,x,2,5,1e-7)

# nextprime
1 Prochain nombre premier ou pseudo premier après un entier donné
2 Next prime or pseudo-prime after a given integer
3 Siguiente número primo o pseudo-primo después del dado
0 Intg
-1 prevprime
-2 is_prime
-3 ithprime
nextprime(9856989898990)
nextprime(97160249868928888261606009)

# normal evala
1 Simplifie l'expression
2 Symplify the expression
3 Simplifica la expresión
0 Expr
-1 simplify
normal(2*x+y=1)
normal(2*x*2)
normal((2*x+1)^2)

# not ! non
1 Renvoie l'inverse logique de l'argument 
2 Returns the logical inverse of the argument
3 Devuelve el inverso lógico del argumento
0 Boolean 
-1 or
-2 and
-3 xor
not(b==0)
b!=0

# nop
1 Instruction ne rien faire
2 No OPeration instruction
3 Instrucción para no hacer nada
0 NULL
-1 
nop()

# odesolve
1 odesolve(f(t,y),[t,y],[t0,y0],t1)=odesolve(t0..t1,f,y0)=y(t1) pour y sol approx de y'=f(t,y) et y(t0)=y0 avec y=vecteur pour les systèmes.
2 odesolve(f(t,y),[t,y],[t0,y0],t1)=odesolve(t0..t1,f,y0)=y(t1) for y approx sol of y'=f(t,y) and y(t0)=y0 with y=vector for systems.
3 odesolve(f(t,y),[t,y],[t0,y0],t1)=odesolve(t0..t1,f,y0)=y(t1) para y aprox solución de y'=f(t,y) e y(t0)=y0 e y=vector por sistema.
0 Expr,VectVar,VectInitCond,FinalVal,[tstep=Val,curve]
-1 plotode
-2 plotfield
-3 interactive_plotode
-4 desolve
odesolve(sin(t*y),[t,y],[0,1],2)
odesolve(0..2,(t,y)->sin(t*y),1)
odesolve(0..pi,(t,v)->{[-v[1],v[0]]},[0,1])
odesolve(sin(t*y),t=0..2,y,1,tstep=0.5)
odesolve(sin(t*y),t=0..2,y,1,tstep=0.5,curve)


# of
1 Renvoie la valeur f(a)
2 Returns the value : f(a) 
3 Devuelve el valor f(a)
0 Fnc(f),Real(a)
-1 at
of(x->x^2,4)

# option
1 Mot reservé pour compatibilité
2 Reserved word for compatibility
3 Palabra reservada por compatibilidad
0 
-1 

# order_size
1 Reste (terme en O) d'un développement en séries: limit(x^a*order_size(x),x=0)=0 si a>0 
2 Remainder (O term) of a series expansion: limit(x^a*order_size(x),x=0)=0 if a>0 
3 Resto (término en O) de un desarrollo en serie: limit(x^a*order_size(x),x=0)=0 si a>0 
0 Expr
-1 series
order_size(x)
 limit(sqrt(x)*order_size(x),x=0) 

# parabola
1 parabole(F,A)=foyer F, sommet A (dans le plan ABP) ou (parabole(A,c) d'équa. y=yA+c*(x-xA)^2 c=1/(2*p) et FA=p/2 geo2d) et parabole(p(x,y)) dessine la conique si deg(p)=2.
2 parabola(F,A)=focus F, top A (in the plane ABP) or (parabola(A,c) of equa. y=yA+c*(x-xA)^2 c=1/(2*p) and FA=p/2 geo2d) and parabola(p(x,y)) draws the conic if deg(p)=2.
3 parabola(F,A)=parábola de foco F yvértice A (en el plan ABP) o (parabola(A,c) de ecua. y=yA+c*(x-xA)^2 c=1/(2*p) y FA=p/2 geo2d) y parabola(p(x,y)=conic si deg(p)=2.
0 Pnt(F)||Pnt(xA+i*yA),Pnt(A)||Real(c),[Pnt(P)]
-1 ellipse
-2 hyperbola
parabola(point(0),point(2))
parabola(0,2)
parabola(point(0,0,0),point(1,0,0),point(1,1,1))

# parallel
1 parallele(A,D) (resp parallele(A,P) ou  parallele(A,D,DD)) trace la droite (resp le plan) passant par le point A parallèle à la droite D (resp parallèle au plan P ou aux droites D et DD) et, parallele(d,D) trace le plan parallèle à la droite D passant par d.
2 parallel(A,D) (resp parallel(A,P) or  parallel(A,D,DD)) draws the line (resp plane) through A parallel to the line D (resp parallel to the plane P or to the lines D,DD) and, parallel(d,D) draws the plane through d parallel to the line D.
3 parallel(A,D) (resp parallel(A,P) ou  parallel(A,D,DD)) dibuja la recta (resp el plan) a través de A paralela de la recta D y, parallel(d,D) dibuja el paralelo plan a través de d de la recta D.
0 Pnt or Line,Line or Plan,[Line]
-1 
parallel(1+i,line(1-i,i))
parallel(1+i,segment(1-i,i))
parallel(point([1,1,1]),line(x=0,y=0))
parallel([1,1,1],line(x=0,y=0))
parallel([1,1,1],plane(x=0))
parallel([1,0,0],line(x=0,y=0),line(x=y,y=z))
parallel(line(x=y,y=z),line(x=0,y=0))

# parameter
1 Mot reservé
2 Reserved word
3 Palabra reservada
0 
-1 

# plotparam paramplot DrawParm courbe_parametrique
1 plotparam(a(x)+i*b(x),x=x0..x1) trace la courbe X=a(x),Y=b(x) x=x0..x1 ou  plotparam([a(u,v),b(u,v),c(u,v)],[u=u0..u1,v=v0..v1]) trace la surface X=a(u,v),Y=b(u,v),Z=c(u,v) u=u0..u1 et v=v0..v1.
2 plotparam(a(x)+i*b(x),x=x0..x1) draws the curve X=a(x),Y=b(x) x=x0..x1 or  plotparam([a(u,v),b(u,v),c(u,v)],[u=u0..u1,v=v0..v1]) draws the surface X=a(u,v),Y=b(u,v),Z=c(u,v) u=u0..u1 and v=v0..v1.
3 plotparam(a(x)+i*b(x),x=x0..x1) dibuja la curva X=a(x), Y=b(x) x=x0..x1 o  plotparam([a(u,v),b(u,v),c(u,v)],[u=u0..u1,v=v0..v1]) dibuja la superficies X=a(u,v),Y=b(u,v),Z=c(u,v) u=u0..u1 y v=v0..v1.
0 Cplx||Lst,Var||Lst(Var)
-1 plotfunc
plotparam(sin(t)+i*cos(t),t)
plotparam([sin(x),cos(x)],x=0..1)
plotparam(sin(x)+i*cos(x),x=0..1,tstep=0.01)
plotparam([v*cos(u),v*sin(u),v],[u,v])
plotparam([v*cos(u),v*sin(u),v],[u=0..pi,v=0..3],ustep=0.1,vstep=0.2)

# parameq
1 parameq(C) renvoie le nombre complexe = équation paramètrique de la courbe C 
2 parameq(C) returns the complex number=parametric equation of the curve C
3 parameq(C) devuelve el número complejo = ecuación paramétrica de la curva C
0 GeoObj 
-1 equation  
parameq(circle(0,1))
parameq(line(i,1-i))

# partfrac
1 Décomposition en éléments simples d'une fraction rationnelle
2 Performs partial fraction decomposition on a fraction
3 Efectua la descomposición parcial de una fracción
0 RatFrac
-1 factor
-2 normal
partfrac((x)/(4-x^2))
partfrac((x^2-2*x+3)/(x^2-3*x+2))
partfrac(a/(z*(z-b)),z)

# cpartfrac
1 Décomposition en éléments simples dans C d'une fraction rationnelle
2 Performs partial fraction decomposition in C of a fraction
3 Efectua la descomposición parcial en C de una fracción
0 RatFrac
-1 factor
-2 normal
cpartfrac((x)/(4-x^2))
cpartfrac((x^2-2*x+3)/(x^2-3*x+2))
cpartfrac(a/(z*(z-b)),z)

# pcar charpoly
1 Liste des coefficients du polynôme caractéristique d'une matrice ou polynôme caractéristique d'une matrice de variable le second argument.   
2 List of the coefficients of the characteristic polynomial of a matrix or characteristic polynomial of a matrix with the second argument as variable.
3 Polinomio característico de una matriz
0 Mtrx,[Var]
-1 jordan
-2 egv
-3 egvl
-4 companion
-5 rat_jordan
-6 pmin
pcar([[1,2],[3,4]])
pcar([[1,2],[3,4]],x)
pcar([[1,2,3],[1,3,6],[2,5,7]])
pcar([[1,2,3],[1,3,6],[2,5,7]],z)

# pcar_hessenberg
1 Polynôme caractéristique d'une matrice par la méthode de Hessenberg (si les coeffs sont dans un corps fini)
2 Characteristic polynomial of a matrix by the Hessenberg method 
3 Polinomio característico de una matriz en methodo de Hessenberg
0 Mtrx,[Var]
-1 jordan
-2 pcar
-3 egvl
pcar_hessenberg([[1,2],[3,4]])
pcar_hessenberg([[1,2],[3,4]],x)
pcar_hessenberg([[1,2,3],[1,3,6],[2,5,7]])

# perm nPr
1 perm(n,p)=nombre d'arrangements de p objets pris parmi n
2 perm(n,p)=number of arrangements of p objects taken among  n
3 perm(n,p)=número de combinaciones de p objetos tomados de n en n
0 Intg(n),Intg(p)
-1 comb
-2 factorial
perm(4,2)

# perpendicular
1 perpendiculaire(A,droite(B,C)) trace la droite perpendiculaire à la droite BC , passant par le point A et perpendiculaire(d,plan(B,C,D)) trace le plan perpendiculaire au plan(B,C,D)) passant par la droite d. 
2 perpendicular(A,line(B,C)) draws the orthogonal line of line BC throught A and perpendicular(d,plane(B,C,D)) draws the orthogonal plane of plane(B,C,D) throught d.
3 perpendicular(A,line(B,C)) dibuja la línea perpendicular a la línea BC a través de A y perpendicular(d,plane(B,C,D)) dibuja le plan perpendicular a el plane(B,C,D) a través de d.
0 (Pnt or Line ),(Line or Plan) 
-1  altitude 
perpendicular(1,line(1,i))
perpendicular(1,0,1+i)
perpendicular([0,0,0],line(x=y,y=z))
perpendicular(line([0,0,0],[1,1,0]),plane(x+y+z=1))

# orthogonal
1 orthogonal(A,droite(B,C)) trace le plan orthogonal à la droite BC passant par A et orthogonal(A,plan(B,C,D)) trace la droite orthogonale au plan(B,C,D)) passant par A. 
2 orthogonal(A,line(B,C)) draws the orthogonal plane of line BC throught A and orthogonal(A,plane(B,C,D)) draws the orthogonal line of plan(B,C,D) throught A.
3 orthogonal(A,line(B,C)) dibuja el plan perpendicular a la línea BC a través de A y orthogonal(A,plane(B,C,D)) dibuja la línea perpendicular a el plan(B,C,D) a través de A.
0 (Pnt),(Line or Plan) 
-1 altitude 
orthogonal(point(0,0,0),line(point(1,0,0),point(0,1,0)))
orthogonal(point(0,0,0),plane(point(1,0,0),point(0,1,0),point(0,0,1)))

# proot
1 Retourne les racines approchées d'un polynôme donné par ses coefficients (ne marche pas en général pour les racines multiples)
2 Returns all computed roots of a polynom given by its coefficients (may not work if roots are not simple)
3 Devuelve todas las raíces de un polinomio dados sus coeficientes
0 Vect||Poly
-1 pcoeff
-2 peval
-3 realroot
-4 complexroot
-5 rationalroot
-6 crationalroot
proot([1,0,-2])
proot(x^2-2)
proot([1,2,-25,-26,120])

# pcoeff pcoef
1 Retourne les coefficients du polynôme dont les racines sont données en argument
2 Returns the polynom coefficients having the roots specified as argument
3 Devuelve los coeficientes de un polinomio dadas sus raices
0 Vect 
-1 proot
-2 peval
pcoeff([1,0,0,0,1])
pcoeff([1,0,-2])

# peval polyEval
1 Évalue en un point x0, un polynôme donné par ses coefficients
2 Evaluates at a point x0, a polynom given by its coefficients 
3 Evalua en un punto x0, un polinomio dados sus coeficientes
0 Vect,Real(x0) 
-1 proot
-2 pcoeff
peval([1,0,-2],1)
peval([1,2,-25,-26,120],8)

# plot graphe
1 Trace le graphe d'une fonction (ou d'une liste de fonctions) d'1 variable
2 Plot a one-variable function
3 Dibuja la gráfica de una función de 1 variable
0 (Expr or LstExpr),Var[=VarMin..VarMax],[color=LstColor]
-1 plotfunc
-2 plotparam
-3 animate
-4 animate3d
-5 plotarea
plot(x-1/6*x^3,x)
plot([2*x-1,sin(x)],x=1..2)
plot(sin(x),x=-2..2,color=green,xstep=0.1)
plot([2*x-2,2*sin(x)],x=1..2,color=[green,red],legende=["2x-2","sin"])

# plotfunc funcplot DrawFunc Graph
1 Trace le graphe d'une fonction d'1 ou 2 variables avec superposition
2 Plot a 1 variable or 2 variables function with superposition
3 Dibuja la gráfica de una función de 1 o 2 variables e superpongo
0 Expr,[Var(x) or VectVar] ,[Intg(color)]
-1 plot
-2 plot3d
-3 plotparam
-4 animate
-5 animate3d
-6 plotdensity
plotfunc(-2*x+1,x=1..2,color=red)
plotfunc([-2*x+1,x^2-2],x=-2..2,color=[red,yellow],xstep=0.2)
plotfunc(x^2-y^2,[x,y],xstep=0.5,ystep=0.3)
plotfunc(x^2+y^2,[x=-1..1,y=-2..2],nstep=900)
plotfunc((x+i*y)^2,[x=-1..1,y=-2..2],nstep=900,affichage=rempli)

# plotimplicit implicitplot
1 plotimplicit(f(x,y),x,y) ou plotimplicit(f(x,y),[x,y]) graphe de f(x,y)=0
2 plotimplicit(f(x,y),x,y) or plotimplicit(f(x,y),[x,y]) graph of f(x,y)=0
3 plotimplicit(f(x,y),x,y) o plotimplicit(f(x,y),[x,y]) gráfica de f(x,y)=0
0 Expr,Var1,Var2
-1 plotcontour
-2 unfactored
-3 plotinequation
plotimplicit(x^2+y^2-1,x,y)
plotimplicit(x^2+y^2-1,[x,y])
plotimplicit(x^2+y^2-1,x,y,unfactored)
plotimplicit(x^2+y^2-1,[x,y],unfactored)
plotimplicit(y^3=x^3-x^2,x,y,xstep=0.1,ystep=0.1)
plotimplicit(y^3=x^3-x^2,[x,y],xstep=0.1,ystep=0.1)
plotimplicit((x+5)^2+(y+4)^2-1,x=-6..-4,y=-5..-3)
plotimplicit((x+5)^2+(y+4)^2-1,[x=-6..-4,y=-5..-3])

# fieldplot plotfield
1 fieldplot(f(x,y),[t,y]) trace le champ des tgtes (normalisé ou non selon l'option) de l'equa diff y'=f(t,y)
2 fieldplot(f(t,y),[t,y]) draws the plotfield of the diff equation y'=f(t,y)
3 fieldplot(f(t,y),[t,y]) dibuja el campo de tangentes de la ecuación diferencial y'=f(t,y)
0 Expr,VectVar,[Opt]
-1 interactive_plotode
-2 odeplot
-3 odesolve
-4 desolve
fieldplot(sin(t*y),[t,y],xstep=0.5,ystep=0.5)
fieldplot(-t*y,[t,y])
fieldplot(-t*y,[t,y],normalize)
fieldplot(-t*y,[t,y],normalize,xstep=0.5,ystep=0.5)
fieldplot(-t*y,[t=-6.868..6.868,y=-6.868..6.868],normalize)

# interactive_plotode interactive_odeplot
1 Trace une sol pour chaque pt t0+i*y0 désigné par la souris (Esc=arret) 
2 Draws a sol for each point t0+i*y0 clicked with the mouse (Esc=halt) 
3 Dibuja una solución para cada punto t0+i*y0 pinchando con el ratón (Esc=interrumpir)
0 Expr,VectVar
-1 odeplot
-2 plotfield
-3 odesolve
-4 desolve
interactive_plotode(sin(t*y),[t,y])
interactive_plotode(-t*y,[t,y])

# odeplot plotode
1 odeplot(f(t,y),[t,y],[t0,y0]) trace la solution de y'=f(t,y) et y(t0)=y0
2 odeplot(f(t,y),[t,y],[t0,y0]) draws the solution of y'=f(t,y) and y(t0)=y0
3 odeplot(f(t,y),[t,y],[t0,y0])) dibuja la solución de y'=f(t,y) con y(t0)=y0
0 Expr,VectVar,VectInitCond
-1 interactive_plotode
-2 fieldplot
-3 odesolve
-4 desolve
odeplot(sin(t*y),[t,y],[0,1])
odeplot(sin(t*y),[t=-10..10,y],[0,1])
odeplot(sin(t*y),[t=-3..3,y],[0,1],tstep=0.1,color=vert)
odeplot([x-0.3*x*y, 0.3*x*y-y], [t,x,y],[0,0.3,0.7])
odeplot([x-0.3*x*y, 0.3*x*y-y], [t,x,y],[0,0.3,0.7],plan)

# pmin
1 Renvoie le polynôme minimal de A
2 Returns the minimal polynomial of A
3 devuele el polinómio mínimo de A
0 Mtrx,[Var] 
-1 pcar
-2 jordan
pmin([[1,0],[0,1]])
pmin([[1,0],[0,1]],x)

# plotpolar polarplot DrawPol courbe_polaire
1 plotpolar(f(x),x,a,b) trace la courbe en polaire r=f(x) pour x dans [a,b]
2 plotpolar(f(x),x,a,b) draws the polar curve r=fx) for x in [a,b]
3 plotpolar(f(x),x,a,b) dibuja la curva polar r=f(x) para x perteneciente a [a,b]
0 Expr,Var,VarMin,VarMax
-1 plotparam
-2 plotfunc 
-3 plotpolar
plotpolar(sin(2*x),x,0,pi)

# pixon
1 Allume un pixel
2 Pixel on
3 Activa un pixel
0 Real(x),Real(y)
-1 pixoff
pixon(1,2)

# pixoff
1 Eteint un pixel
2 Pixel off
3 Desactiva un pixel
0 Real(x),Real(y)
-1 pixon
pixoff(1,2)

# potential
1 Renvoie U tel que gradient(U)=derive(U,Vector_of_variable)=V
2 Returns U such as derive(U,Vector_of_variable)=V
3 Devuelve U tal que grad(U)=derive(U,Vector_of_variable)=V
0 Vect(V),VectVar
-1 derive
-2 vpotential
potential([2*x*y+3,x^2-4*z,-4*y],[x,y,z])

# powmod powermod
1 Calcule a^n modulo p ou modulo p,P(x) (puissance rapide)
2 Computes a^n modulo p or modulo p,P(x) (fast algorithm)
3 Calcula a^n modulo p (cálculo rápido)
0 Intg(a),Intg(n),Intg(p),[Expr(P(x))],[Var]
-1
powmod(17,452,19)
powmod(x+1,452,19,x^4+x+1,x)

# preval
1 Renvoie F(b)-F(a)
2 Returns F(b)-F(a)
3 Devuelve F(b)-F(a)
0 Expr(F(var)),Real(a),Real(b),[Var]
-1 subst
preval(x^2-2,2,3)
preval(y^2-2,2,3,y)

# prevprime
1 Nombre premier ou pseudo-premier précédent un entier donné
2 Previous prime or pseudo-prime before a given integer
3 Anterior número primo o pseudo-primo del entero dado
0 Intg 
-1 nextprime
-2 is_prime
-3 ithprime
prevprime(9856989898999)
prevprime(97160249868928888261606009)

# prepend
1 Met l'élément au début de la liste  
2 Puts the element at the begining of the list 
3 Pone el elemento al principio de la lista 
0 Lst,Elem 
-1 append
-2 concat
prepend([1,2],3) 

# print Disp
1 Permet d'afficher un résultat intermédiaire dans un programme 
2 Prints a result in a program 
3 Muestra el resultado de un programa 
0 Expr or Str
-1 
print("salut")
print(a)

# projection
1 projection(C,A) est la projection orthogonale de A sur la courbe C
2 projection(C,A) is the orthogonal projection of A on the curve C
3 projection(C,A) es la proyección ortogonal de A en la curva C
0 Curve,Pnt
-1 perpendicular
 H:=projection(line(i,1-i),1+i)
 K:=projection(circle(0,1),1+i)
 J:=projection(circle(0,1),point(1+2*i))

# program
1 Mot reservé
2 Reserved word
3 Palabra reservada
0 
-1 

# proc
1 Début de procédure (comme en MuPAD)
2 Begin a procedure (like with MuPAD)
3 Comienza un procedimiento (como en MuPAD)
0 
-1 
 proc ... begin ... end_proc;

# Psi
1 Psi(a,n)=nième dérivée de la fonction DiGamma (=ln@Gamma) au point a (Psi(a,0)=Psi(a))
2 Psi(a,n)=nth-derivative of the function DiGamma (=ln@Gamma)at point a (Psi(a,0)=Psi(a))
3 Psi(a,n)=n-ésima derivada de la función DiGamma (=ln@Gamma)en el punto a (Psi(a,0)=Psi(a))
0 Real(a),Intg(n)
-1 Gamma
Psi(3,1)

# ptayl
1 Renvoie le polynôme de Taylor Q tel que P(x)=Q(x-a)
2 Returns the Taylor polynomial Q such as P(x)=Q(x-a)
3 Devuelve el polinómio de Taylor Q tal que P(x)=Q(x-a)
0 Poly(P(var)),Real(a),[Var]
-1 series
-2 taylor
ptayl(x^2+2*x+1,1)
ptayl(x^2+2*x+1,-1)
ptayl(y^2+2*y+1,1.1,y)

# purge DelVar
1 purge(nomvar) enlève la valeur stockée dans la variable nomvar
2 purge(varname) unassign the variable varname
3 purge(nombrevariable) borra la variable nombrevariable
0 Var
-1 sto
-2 restart
-3 assume
-4 about
purge(t)
purge(C)

# pwd
1 Répertoire de travail actuel
2 Current working directory
3 Directorio de trabajo actual
0 NULL
-1 cd
pwd()

# p1oc2
1 Renvoie la permutation produit de p1 et de c2
2 Returns the permutation product of p1 and c2
3 Devuelve la permutación producto de p1 y c2
0 Permut,Cycle
-1 c1op2
-2 p1op2
p1oc2([0,2,1],[2,1,3])

# p1op2
1 Renvoie la permutation produit de p1 et de p2
2 Returns the permutation product of p1 and p2
3 Devuelve la permutación producto de p1 y p2
0 Permut,Permut
-1 c1op2
-2 p1oc2
p1op2([0,2,1],[1,0,3,2])

# qr
1 Pour A matrice numérique, renvoie R (right) telle que A=QR et Q orthogonale
2 For a numerical matrix A, returns R (right) such that A=QR and Q orthogonal
3 Para una matriz numérica A, devuelve R (derecha) tal que A=QR y Q es ortogonal
0 Mtrx
-1 lu
qr([[1,2],[3,4]])

# quote hold
1 Retourne son argument sans l'évaluer (et aussi a:=quote(a) qui purge a)
2 Returns its argument unevaluated (and also a:=quote(a) that purge a)
3 Devuelve su argumento sin evaluar (y también a:=quote(a) que purge a)
0 Expr
-1 
quote(1+2)
quote(1/x+1/(x-1))
quote((x+1)*(x-1))

# quo
1 Quotient euclidien de 2 polynômes
2 Euclidean quotient of 2 polynomials
3 Cociente euclídeo de 2 polinomios
0 (Vect or Poly),(Vect or Poly),[Var] 
-1 rem
-2 quorem
-3 Quo
-4 iquo
quo([1,2,3,4],[-1,2])
quo(x^3+2x^2+3x+4,-x+2)
quo(t^3+2t^2+3t+4,-t+2,t)

# Quo
1 Renvoie le quotient euclidien de 2 polynômes sans l'évaluer
2 Returns the euclidean quotient of 2 polynomials without evaluation
3 Cociente euclídeo de 2 polinomios sin evaluar
0 (Vect or Poly),(Vect or Poly),[Var]  
-1 quo
-2 quorem
Quo([1,2,3,4],[-1,2])
Quo(x^3+2x^2+3x+4,-x+2)
Quo(t^3+2t^2+3t+4,-t+2,t)

# quorem divide
1 Quotient et reste euclidien de 2 polynômes
2 Euclidean quotient and remainder of 2 polynomials
3 Cociente euclídeo y resto de 2 polinomios
0 (Vect or Poly),(Vect or Poly),[Var] 
-1 rem
-2 quo
-3 iquorem
quorem([1,2,3,4],[-1,2])
quorem(x^3+2x^2+3x+4,-x+2)
quorem(t^3+2t^2+3t+4,-t+2,t)
quorem(t^4-1,(t+1)^2,t)

# q2a
1 q2a(q(x,y),[x,y])=la matrice symétrique associée à la forme quadratique q
2 q2a(q(x,y),[x,y])=the symmetric matrix associated to the quadratic form q
3 q2a(q(x,y),[x,y])=matriz simétrica asociada a la forma cuadrática q
0 QuadraForm, VectVar
-1 a2q
q2a(x^2+2*x*y+2*y^2,[x,y])

# rand
1 Renvoie un entier (resp un réel ou une fonction réelle) aléatoire uniformément distribué dans 0.. n-1 (resp dans [p; n]) (n entier par défaut=2^32) ou n entiers entre b1 et b2 ou n éléments de L.
2 Returns a random integer (resp a real or a real function) with uniform distribution in 0..n-1 (resp in [p;n])(n integer by defaults=2^32) or n integers between b1 and b2 or n elements of L.
3 Devuelve un número (resp un número real o una función real) aleatorio entre 0 y n-1 (resp en [p;n]) (n=número por defecto=2^32)
0 Intg(n) or Interval(p..n) or NULL,[Intg(b1) or List(L)],[Intg(b2)]
-1 srand
-2 randpoly
-3 ranm
-4 randvector
-5 hasard
rand(4)
rand()
rand(0,2)
rand(0..2)()
 f:=rand(0..2)
rand(3,1,10)
rand(3,["r","r","r","b","n"])

# hasard
1 Renvoie un entier (resp un réel ou une fonction réelle) aléatoire uniformément distribué dans 0.. n-1 (resp dans [p; n]) (n entier par défaut=2^32) ou n entiers entre b1 et b2 ou n éléments de L. Si hasard a un seul argument il peut se passer de () (compatibilité langage tortue) 
2 Returns a random integer (resp a real or a real function) with uniform distribution in 0..n-1 (resp in [p;n])(n integer by defaults=2^32) or n integers between b1 and b2 or n elements of L. If hasard has only one argument, () are not necessary (compatibility with turtle language) 
3 Devuelve un número (resp un número real o una función real) aleatorio entre 0 y n-1 (resp en [p;n]) (n=número por defecto=2^32)
0 Intg(n) or Interval(p..n) or NULL,[Intg(b1) or List(L)],[Intg(b2)]
-1 rand
-2 randpoly
-3 ranm
-4 randvector
-5 srand
 hasard 4
 hasard
hasard(0,2)
 hasard 0..2
 f:=hasard 0..2
hasard(3,1,10)
hasard(3,["r","r","r","b","n"])

# randnorm randNorm
1 Renvoie un réel aléatoirement distribué selon la loi normale N(mu,sigma)
2 Returns a random real with normal distribution N(mu,sigma)
3 Devuelve un número aleatorio según N(mu,sigma)
0 Real(mu),Real(sigma)
-1 rand
-2 randpoly
-3 ranm
-4 randvector
randnorm(0,1)
randnorm(2,1)

# randpoly randPoly
1 Renvoie un polynôme de variable var (ou x), de degré n et dont les coefficients sont des entiers aléatoires équirépartis sur -99,+99 
2 Returns a polinomial of variable var (or x), of degree n and where the coefficients are random integers in the range -99 through 99 with uniform distribution
3 Devuelve el polinomio de variable var (o x), degrado n donde los coeficientes son enteros aleatorios entre -99 y 99
0 [Var(var)],Intg(n)
-1 ranm
-2 randvector
randpoly(5)
randPoly(t,8)

# ranm randMat randmatrix
1 Renvoie une liste de taille n ou une matrice n*m constituée d'entiers aléatoires uniformément distribués entre -99 et 99 ou de nombres aléatoires distribués selon la loi mise entre-quote
2 Returns a list of size n or a n*m matrix that contains random integers in the range -99 through 99 with uniform distribution or contains random numbers according to the law put between quote
3 Devuelve una lista de tamaño n o una matriz de la dimensión especificada que contiene enteros aleatorios entre -99 y 99 
0 Intg(n), [Intg(m)],[Interval or quote(DistribLaw)]
-1 idn
-2 randPoly
-3 rand
-4 randvector
ranm(3)
ranm(3,2)
ranm(3,2,6)
ranm(3,2,'randnorm(0,1)')
ranm(3,2,'rand(3)')
ranm(3,2,1..2)

# randvector
1 Renvoie une liste de taille n constituée d'entiers aléatoires uniformément distribués entre -99 et 99 ou de nombres aléatoires distribués selon la loi mise entre-quote
2 Returns a list of size n that contains random integers in the range -99 through 99 with uniform distribution or contains random numbers according to the law put between quote
3 Devuelve una lista de tamaño n o una matriz de la dimensión especificada que contiene enteros aleatorios entre -99 y 99 
0 Intg(n), [Intg(m)],[Interval or quote(DistribLaw)]
-1 idn
-2 randPoly
-3 rand
-4 ranm
randvector(3)
randvector(3,6)
randvector(3,'randnorm(0,1)')
randvector(3,'rand(3)')
randvector(3,1..2)

# randperm
1 Renvoie une permutation aléatoire de [0,1,2,..,n-1]
2 Returns a random permutation of [0,1,2,..,n-1] 
3 Devuelve una permutación aleatoria de [0,1,2,..,n-1]
0 Intg(n)
-1 permu2cycles
-2 is_permu
randperm(4)
randperm(7)

# nextperm
1 Renvoie la permutation suivante dans l'ordre lexicographique.
2 Returns the next permutation with the lexicographic order.
3 Devuelve la permutación  siguiente.
0 Intg(n)
-1 prevperm
-2 is_permu
nextperm([0,2,1,3])
nextperm([0,3,2,1])

# prevperm
1 Renvoie la permutation précédente dans l'ordre lexicographique.
2 Returns the previous permutation with the lexicographic order.
3 Devuelve la permutación  anterior.
0 Intg(n)
-1 nextperm
-2 is_permu
prevperm([0,1,3,2])
prevperm([0,1,2,3])

# radius
1 rayon(C) donne le rayon du cercle C
2 radius(C) gives the radius of the circle C
3 radius(C) devuelve el radio de la circunferencia C
0 Crcle
-1 center
-2 circle
radius(incircle(-1,1-i,i))

# rcl
1 Rapelle le contenu d'une variable sans l'évaluer
2 Recalls an identifier content, does not evaluate it
3 Llama al contenido de una variable, no lo evalua 
0 Var
-1 
rcl(a)

# re real
1 Partie réelle d'un nombre complexe
2 Returns the real part of a complex number
3 Devuelve la parte real de un número complejo
0 Cplx or LstCplx
-1 im
-2 conj
re(1+2*i)
re((1+2*i)^2)
real([1+2*i,(1+2*i)^2])

# rem 
1 Reste euclidien de 2 polynômes
2 Euclidean remainder of 2 polynomials
3 Resto euclídeo de 2 polinomios
0 (Vect or Poly),(Vect or Poly),[Var]
-1 quo
-2 quorem
-3 Rem
-4 irem
rem([1,2,3,4],[-1,2])
rem(x^3+2x^2+3x+4,-x+2)
rem(t^3+2t^2+3t+4,-t+2,t)

# Rem
1 Renvoie le reste euclidien de 2 polynômes sans l'évaluer
2 Returns the euclidean remainder of 2 polynomials without evaluation
3 Resto euclídeo de 2 polinomios sin evaluar
0 (Vect or Poly),(Vect or Poly),[Var]
-1 rem
-2 quorem
Rem([1,2,3,4],[-1,2])
Rem(x^3+2*x^2+3*x+4,-x+2)
Rem(t^3+2*t^2+3*t+4,-t+2,t)

# remove
1 Enlève les éléments e de l qui vérifient f(e)=vrai
2 Remove the elements e of l such that f(e)=true
3 Borra los elementos e de l tales que f(e)=verdadero
0 FncBool(f),Lst(l)
-1 select
remove(x->x>=5,[1,2,6,7])

# reorder
1 Réordonne les variables de E selon l'ordre donné dans le 2ième argument
2 Reorders the variables in E according to the order of the 2nd argument 
3 Reordena las variables en E de acuerdo con el orden del 2º argumento
0 Expr, LstVar
-1  
-2 
reorder(x^2+2*x+y^2,[y,x])

# resultant
1 Résultant de deux polynômes
2 Resultant of two polynomials
3 Resultante de 2 polinomios
0 Poly,Poly,Var
-1 sylvester
-2 gcd
resultant(x^2-1,x^3-1,x)
resultant(x^3-p*x+q,3*x^2-p,x)

# sylvester
1 Matrice de sylvester de deux polynômes
2 Sylvester matrix of two polynomials
3 Matriz de sylvester de 2 polinomios
0 Poly,Poly,Var
-1 resultant
sylvester(x^2-1,x^3-1,x)
sylvester(x^3-p*x+q,3*x^2-p,x)

# rootof
1 Polynôme fonction d'une racine d'un polynôme irréductible
2 Polynomial in terms of a root of an irreducible polynomial
3 Polinomio en términos de la raíz de un polinomio irreducible
0 Poly,Poly
-1
rootof([1,0],[1,0,10,0,1])

# rotation
1 rotation(B,a1,A) (resp rotation(d,a1,A)) est le transformé de A par rotation de centre B (resp d'axe d) et d'angle a1. 
2 rotation(B,a1,A)(resp rotation(d,a1,A)) is the transformed of A by rotation of center B (resp of axis d)and of angle a1
3 rotation(B,a1,A)(resp rotation(d,a1,A))=transformación de A por rotación (centro B (resp eje d), ángulo a1)
0 (Pnt(B) or Cplx or Dr3),Angle(a1),(Pnt(A) or Curve)
-1 translation
-2 reflection
rotation(point(1+i),pi/2,point(i))
rotation(1+i,pi/3,line(i,1))
rotation(line(x=y,y=z),pi/2,point(1,-1,2))
 r:=rotation(1+i,pi/2);r(i)
 r:=rotation(line(x=y,y=z),pi/2);r(point(1,-1,2))

# rmbreakpoint
1 Éfface un point d'arrêt
2 Removes a breakpoint
3 Quita un punto de ruptura
0 Intg
-1 breakpoint
rmbreakpoint(1)

# rmwatch
1 Efface une variable de la table des variables affichées en pas-à-pas
2 Clears a variables from the table of displayed variables in step/step
3 Borra una variable de la tabla de variables en paso a paso
0 Var
-1 watch
rmwatch(a)

# rpn
1 Mode RPN (saisie polonaise inverse)
2 RPN mode
3 Modo RPN (Notación Polaca Inversa)
0 NULL
-1 alg
rpn()

# rref gaussjord
1 Réduction sous forme échelonnée de AX=b (M=A|(-b))
2 Row reduction to echelon form of  AX=b (M=A|(-b))
3 Reducción a la forma diagonal de AX=b (M=A|(-b))
0 Mtrx(M)
-1 ker
-2 image
-3 det
-4 Rref
-5 pivot
-6 ref
-7 keep_pivot
rref([[3,1,-2],[3,2,2]])
rref([[2,1,1,-1],[1,1,2,-1],[1,2,1,-4]])
rref([[1,1,0,0,-a1],[0,1,1,0,-a2],[0,0,1,1,-a3],[1,0,0,1,-a4]],keep_pivot)

# keep_pivot
1 Option  de la commande rref
2 Option of the rref command
3 Opción de rref
0 Opt
-1 rref
 rref([[1,1,0,0,-a1],[0,1,1,0,-a2],[0,0,1,1,-a3],[1,0,0,1,-a4]],keep_pivot)


# Rref
1 Renvoie la réduction sous forme échelonnée de AX=b (M=A|(-b)) sans évaluation.
2 Returns the row reduction to echelon form of  AX=b (M=A|b) without evaluation.
3 Reducción a la forma diagonal de AX=b (M=A|b) sin evaluar.
0 Mtrx(M)
-1 rref
Rref([[3,1,-2],[3,2,2]])
Rref([[2,1,1,-1],[1,1,2,-1],[1,2,1,-4]])

# ref
1 Réduction de Gauss de AX=b (M=A|(-b))
2 Reduction of Gauss of  AX=b (M=A|(-b))
3 Reducción de Gauss de AX=b (M=A|(-b))
0 Mtrx(M)
-1 rref
-2 det
ref([[3,1,-2],[3,2,2]])
ref([[2,1,1,-1],[1,1,2,-1],[1,2,1,-4]])

# same
1 Test d'égalité
2 Equality test
3 Comprobación de igualdad
0 Expr,Expr
-1 
same(a,b)
same((2-1)^2,2^2-2*2+1)

# sec
1 Sécante sec(x)=1/cos(x)
2 Secant sec(x)=1/cos(x)
3 Secante sec(x)=1/cos(x)
0 Expr
-1 cos
-2 asec
sec(pi/3)

# segment
1 segment(A,B) trace le segment AB
2 segment(A,B) draws the segment AB
3 segment(A,B) dibuja el segmento AB
0 (Pnt or Cplx),(Pnt or Cplx),[Var],[Var]
-1 line 
segment(i,1+i)
segment(point(i),point(1+i))
segment(point(i),point(1+i),A,B)


# half_line
1 demi_droite(A,B) trace la demi-droite AB d'origine A
2 half_line(A,B) draws the half-line AB with A as origin
3 half_line(A,B) dibuja la media-línea AB  con A=origen
0 (Pnt or Cplx),(Pnt or Cplx)
-1 line 
half_line(i,1+i)
half_line(point(i),point(1+i))

# series
1 Développement limité ou asymptotique
2 Series expansion at finite or infinite points
3 Desarrollo en serie en finitos o infinitos puntos
0 Expr,Equal(var=limit_point),[Order],[Dir(1,0,-1)]
-1 limit
-2 taylor
-3 pad
-4 convert
series(sin(x)/x,x=0)
series(ln(x+x^2)-ln(x),x=0,1)
series((x^4+x+2)/(x^2+1),x=0,5)
 convert(series(sin(x),x=0,6),polynom)

# select
1 Sélectionne les éléments e de l vérifiant f(e)=vrai
2 Selects the elements e of l such that f(e)=true
3 Selecciona los elementos e de l tales que f(e)=verdadero
0 FncBool(f),Lst(l)
-1 remove
select(x->x>=5,[1,2,6,7])

# sign
1 Retourne le signe (-1,0,+1) de l'argument
2 Returns the sign (-1,0,+1) of its argument
3 Devuelve el signo (-1,0,+1) de su argumento
0 Expr
-1 abs
sign(-4)
sign(4-5)

# signature
1 Renvoies la signature d'une permutation
2 Returns the signature of a permutation
3 Devuelve la ? de una permutación 
0 Permut
-1 permu2cycles
-2 is_permu
signature([1,0,3,4,2])

# sin
1 Sinus
2 Sinus
3 Seno
0 Expr
-1 asin
sin(0)

# sinh
1 Sinus hyperbolique
2 Hyperbolic sinus
3 Seno hiperbólico
0 Expr
-1 asinh
sinh(0)

# similarity
1 similitude(B,k,a1,A)=transformé de A dans la similitude (centre B ou axe d,rapport k,angle a1) (ou aussi homothetie(B,k*exp(i*a1),A)). 
2 similarity(B,k,a1,A)=transformed of A in the similarity (center B or axis d, coeff k,angle a1)(or also homothety(B,k*exp(i*a1),A)).
3 similarity(B,k,a1,A)=transformación de A por similitud (centro B o eje d, k, ángulo a1).
0 Pnt or Dr3,Real,Angle,Pnt
-1 homothety
similarity(1+i,2,pi/3,i)
similarity(line(x=y,y=z),2,pi/3,[-1,2,1])
 s:=similarity(1+i,2,pi/3);s(i)
 s:=similarity(line(x=y,y=z),2,pi/3),s([-1,2,1])

# size nops length
1 Renvoie la longueur d'une liste, d'une chaine de caractères ou d'une suite
2 Returns the size of a list, a string or a sequence
3 Devuelve el tamaño de una lista, cadena o secuencia
0 Lst or Str or Seq
-1 sizes
-2 dim
size([1,2,3])
size("bonjour")
size(1,2,3)

# sizes 
1 Renvoie la liste des longueurs d'une liste de listes
2 Returns the list of sizes of a list of lists
3 Devuelve la lista de tamaños de una lista de listas
0 Lst or Str or Seq
-1 size
-2 dim
sizes([[1,2,3],[1,2],[1]])

# zeros
1 Renvoie la liste des zéros (réels ou complexes selon le mode) de l'expression (ou la matrice dont les lignes sont les solutions du système : expression1=0,expression2=0...)
2 Returns the zeros (reals or complex according to the mode)of the expression (or the matrix where the lines are the solutions of the system : expression1=0,expression2=0...) 
3 Devuelve los zeros de la expresión
0 Expr,[Var]
-1 
zeros(x^2+4)
zeros(ln(x)^2-4)
zeros(ln(y)^2-2,y)
zeros([x^2-1,x^2-y^2],[x,y])

# solve resoudre
1 Résout une équation ou un système polynômial
2 Solves a (or a set of) polynomial equation
3 Resuelve una (o un set de ) ecuación polinómica
0 Expr,[Var] 
-1 linsolve
-2 proot
-3 fsolve
-4 csolve
-5 nSolve
solve(x^2-3=1)
solve(x^3-3*y,y)
solve([y-z=0,z-x=0,x-y=0,x-1+y+z=0],[x,y,z])
solve([x^2-y^2=0,x^2-z^2=0],[x,y,z])

# line_segments
1 Renvoie la liste des arêtes (1 arête=segment) du polyèdre P
2 Returns the list of the line_segments (1 line=segment) of the polyhedron P
3 Devuelve la lista de los aristas (1 arista=segment) de un políhedro P
0 Polygon or Polyedr(P)
-1 polyhedron
line_segments(polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6]))
line_segments(polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6]))[2]

# faces
1 Renvoie la liste des faces (1 face=matrice(n,3) dont les n lignes sont les n sommets de la face) du polyèdre P.
2 Returns the list of the faces (1 face=matrix(n,3) where the n rows are the n vertices of the face) of the polyhedron P.
3 Devuelve la lista de los lados (1 lado=matriz(n,3) donde las n filas son los n vértices de el lado) de un políhedro P.
0 Polygon or Polyedr(P)
-1 polyhedron
faces(polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6]))
faces(polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6]))[2]

# vertices vertices_abc
1 Renvoie la liste des sommets du polygone ou polyèdre P.
2 Returns the list of the vertices of the polygon or polyhedron P.
3 Devuelve la lista de los vértices de un polígono o políhedro P.
0 Polygon or Polyedr(P)
-1 isoceles_triangle
-2 polyhedron
vertices(isoceles_triangle(0,1,pi/4))
vertices(polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6]))
vertices(isoceles_triangle(0,1,pi/4))[2]

# vertices_abca
1 Renvoie la liste fermée [A,B,...A] des sommets du polygone ou polyèdre P.
2 Returns the closed list [A,B,...A] of the vertices of the polygon or polyhedron P.
3 Devuelve la lista [A,B,...A] de los vértices de un polígono o políhedro P.
0 Polygon or Polyedr(P)
-1 isoceles_triangle
-2 polyhedron
vertices_abca(isoceles_triangle(0,1,pi/4))
vertices_abca(polyhedron([0,0,0],[0,5,0],[0,0,5],[1,2,6]))
vertices_abca(isoceles_triangle(0,1,pi/4))[2]

# sommet
1 Renvoie le sommet d'un opérateur
2 Returns the sommet of an operator
3 Devuelve el comando de un operador
0 Op or Fnct
-1 feuille
-2 quote
sommet(quote(gcd(45,123)))
sommet('gcd(45,123)')

# smod mods
1 Retourne le reste symétrique de la division euclidienne de 2 entiers
2 Returns the Euclidean symmetric remainder of two integers
3 Devuelve el resto simétrico euclídeo de 2 enteros
0 Intg,Intg 
-1 irem
-2 iquo
-3 fracmod
smod(8,3)
smod(10,4)
smod(11,7)

# sqrt
1 Racine carrée
2 Square root
3 Raíz cuadráda
0 Expr
-1 
sqrt(50)
sqrt(x^2)

# sst
1 Exécute 1 instruction en pas-à-pas
2 Step 1 instruction
3 Ejecuta una instrucción paso a paso
0 NULL
-1 
sst()

# sst_in
1 Entre à l'intérieur d'une fonction en pas-à-pas
2 Enter into a function in step-by-step mode
3 Se introduce al interior de una función en modo paso a paso
0 NULL
-1 
sst_in()

# stack
1 Mot reservé
2 Reserved word
3 Palabra reservada
0 
-1 

# start
1 Boucle en mode RPN
2 RPN loop
3 Bucle en modo RPN
0 
-1 

# step by pas
1 Saut de la variable dans une itération (taille du saut)
2 Step in an iteration (step size of incrementation)
3 Incremento en una iteración (tamaño del salto).
0 
-1 for
-2 pour
 s:=0;for j from 1 to 10 step 2 do s:=s+j end_for
 s:=0;for j from 1 to 10 by 2 do s:=s+j end_for
 s:=0;pour j de 1 jusque 10 pas 2 do s:=s+j fpour

# sto Store
1 Stocke le premier argument dans la variable donnée comme deuxième argument
2 Store the first argument in the variable given as second argument
3 Guarda el primer argumento en la variable dada como segundo argumento
0 (Real or Str),Var
-1 :=
-2 =>
sto(2,a)
sto("salut",b)

# <=
1 Opérateur booléen infixé qui teste l'inégalité.
2 Boolean infixed operator that tests the inequality.
3 Operador infijo boolean que test una desigualdad.
0 Expr,Expr
-1 !=
-2 ==
-3 >=
-4 >
-5 <
 1+1<=2
 2<=3

# >=
1 Opérateur booléen infixé qui teste l'inégalité.
2 Boolean infixed operator that tests the inequality.
3 Operador infijo boolean que test una desigualdad.
0 Expr,Expr
-1 !=
-2 ==
-3 <=
-4 >
-5 <
 1+1>=2
 2>=3

# >
1 Opérateur booléen infixé qui teste l'inégalité.
2 Boolean infixed operator that tests the inequality.
3 Operador infijo boolean que test una desigualdad.
0 Expr,Expr
-1 !=
-2 ==
-3 >=
-4 <=
-5 <
 1+1>2
 4>3

# <
1 Opérateur booléen infixé qui teste l'inégalité.
2 Boolean infixed operator that tests the inequality.
3 Operador infijo boolean que test una desigualdad.
0 Expr,Expr
-1 !=
-2 ==
-3 >=
-4 <=
-5 >
 1+1<2
 2<3

# ==
1 Opérateur booléen infixé qui teste l'égalité.
2 Boolean infixed operator that tests the equality.
3 Operador infijo boolean que test una igualdad.
0 Expr,Expr
-1 !=
-2 <=
-3 >=
 1+1==2
 2==3

# !=
1 Opérateur booléen infixé qui teste la non égalité.
2 Boolean infixed operator that tests the difference.
3 Operador infijo boolean que test una  no igualdad.
0 Expr,Expr
-1 ==
-2 <=
-3 >=
 1+1!=2
 2!=3

# :=
1 Opérateur infixé qui stocke le deuxième argument dans la variable donnée comme premier argument.
2 Infixed operator that stores the second argument in the variable given as first argument.
3 Operador infijo que guarda el segundo argumento en la variable dada como primer argumento.
0 Var,(Real or Str)
-1 sto
-2 =<
-3 =>
 a:=2
 b:="salut"

# =<
1 Opérateur infixé qui stocke par référence le deuxième argument dans une variable (contenant une liste) donnée comme premier argument.
2 Infixed operator that stores by reference the second argument in a variable (containing a list) given as first argument.
3 Operador infijo que guarda el segundo argumento en la variable dada como primer argumento.
0 Var,(Real or Str)
-1 sto
-2 :=
 a:=[1,2,3]; a[1]=<5

# +=
1 Opérateur infixé : a+=b est équivalent à a:=a+b.
2  Infixed operator : a+=b equvalent to  a:=a+b.
3 Operador infijo : a+=b  equivalente a a:=a+b.
0 Var,(Real or Str)
-1 sto
 a:=2;a+=3


# *=
1 Opérateur infixé  : a*=b est équivalent à a:=a*b.
2  Infixed operator : a*=b equvalent to  a:=a*b.
3 Operador infijo : a*=b  equivalente a a:=a*b.
0 Var,(Real or Str)
-1 :=
 a:=2;a*=3


# -=
1 Opérateur infixé : a-=b est équivalent à a:=a-b.
2  Infixed operator : a-=b equvalent to  a:=a-b.
3 Operador infijo  : a-=b  equivalente a a:=a-b.
0 Var,(Real or Str)
-1 :=
 a:=2;a-=3


# /=
1 Opérateur infixé : a/=b est équivalent à a:=a/b.
2  Infixed operator : a/=b equvalent to  a:=a/b.
3 Operador infijo  : a/=b  equivalente a a:=a/b.
0 Var,(Real or Str)
-1 := 
 a:=2;a/=3

# =>
1 Opérateur infixé qui stocke le premier argument dans la variable donnée comme deuxième argument
2 Infixed operator that store the first argument in the variable given as second argument
3 Operador infijo que guarda el primer argumento en la variable dada como segundo argumento
0 (Real or Str),Var
-1 sto
-2 :=
 2=>a
 "salut"=>b

# subst substituer
1 Remplace une variable par sa valeur dans une expression
2 Substitutes a value for a variable in an expression
3 Sustituye una variable por un valor en una expresión
0 Expr,Var=value
-1 eval
subst(1/(4+x^2),x=2)
subst(x-2/(4+x^2),x=1)
subst('integrate(sin(x^2)*x,x)',x=sqrt(t))

# sum somme add
1 Somme discrète ou somme des éléments d'une liste (ou séquence)
2 Discret sum or sum of the elements of a list or a sequence
3 Suma discreta
0 Expr,Var,VarMin,VarMax
-1 +
sum(1/n^2,n,1,17)
sum(1/n^2,n,17,1)
sum(1/n^2,n,17,1,1)
sum(1/n^2,n,1,17,2)
sum(1,2,3,4)
sum([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]) 
sum(1/(x*(x+1)),x)
sum(cos(n*x),n)

# suppress
1 Renvoie l sans son élément d'indice n 
2 Returns l without the element of index n 
3 Devuelve l sin el elemento de índice n 
0 Vect(l),Intg(n)
-1 tail  
-2 mid
suppress([0,1,2,3],2)

# svd
1 Pour une matrice numérique A, renvoie U, S, Q tels que A=U*S*tran(Q)
2 For a numerical matrix A, returns U, S, Q such that A=U*S*tran(Q)
3 Para una matriz numérica A, devuelve U, S, Q tales que A=U*S*tran(Q)
0 Mtrx(A)
svd([[1,2],[3,4]])

# switch
1 Test (choix multiple): switch(variable) {case 1: {bloc1;} default: {bloc2;}};
2 Test (multiple choice): switch(variable) {case 1: {bloc1;} default: {bloc2;}};
3 Comprobación (múltiples opciones): switch(variable) {case 1: {bloc1;} default: {bloc2;}};
0 
-1 if
-2 case
-3 default
 a:=1;switch(a){case 0:{b:=1;break;} case 1:{b:=3;break;}default:{b:=0;}};b;
 f(x):={local y;switch (x){case 1:{return "un";} case 2:{y:="deux";break;}default:{y:="default";}};return(y);} 

# piecewise
1 Si condition1 renvoie expr1 sinon...si condition2p renvoie expr2p sinon renvoie expr2p+1.
2 If condition1 returns expr1 else...if condition2p returns expr2p else returns expr2p+1.
3 si condición1 devuelve expr1 sino... si condición2p devuelve expr2p sino devuelve expr2p+1. 
0 Cond1,Expr1,..,Cond2p,Expr2p,[Expr2p+1]
-1 if
-2 then
-3 else
-4 ifte
-5 switch
piecewise(x<=-pi,x+2*pi,x<=pi,x,x+2*pi)
piecewise(x<-2,-2,x<-1,3x+4,x<0,1,x+1)

# switch_axes
1 switch_axes() met ou enlève les axes de l'écran géométrique
2 switch_axes() put or erase the axes of the graphic-screen
3 switch_axes() pone o quita los ejes en la pantalla de geometría
0 [Intg(0 or 1)]
switch_axes()
switch_axes(0)
switch_axes(1)

# xyztrange
1 xyztrange permet d'initialiser l'écran graphique (cf bouton rouge geo)
2 xyztrange put or erase the axes on the graphic-screen (cf red button geo)
3 xyztrange permite inicializar la pantalla de geometría (cf botón rojo geo)
0 SeqReal
xyztrange(-5.0,5.0,-5.0,2.0,-10.0,10.0,-1.0,6.0,-5.0,5.0,-1.2384,2.0,1,0.0,1.0)

# reflection
1 reflection(D,C) (resp reflection(A,C))=symétrique de C dans la symétrie-droite D (resp sym-point A)
2 reflection(D,C) (or reflection(A,C))=symmetrical of C in the symmetry-line D (or sym-point A)
3 reflection(D,C) (o reflection(A,C))=simétrico de C en la línea de simetría D (o punto de simetría A)
0 (Pnt(A) or Line(D)),(Pnt(C) or Curve(C))
-1 rotation
-2 translation
reflection(line(0,1+i),A)
reflection(B,A)
reflection(line(0,1+i),circle(i,1+i))


# syst2mat
1 Renvoie la matrice M=A|(-b) associée au système Y=AX+b
2 Returns the matrix M=A|(-b) associate to the system Y=AX+b
3 Devuelve la matriz M=A|(-b) asociada al sistemaY=AX+b  
0 LstLinEq,LstVar
-1 linsolve 
-2 rref
syst2mat([x-y=1,x+2*y],[x,y])

# tablefunc
1 Tableau de valeurs d'une fonction : on doit être dans un tableur.
2 Table of value of a function : you must be in a spreadsheet.
3 Tabla de valores de una función (en spreadsheet).
0 Expr,Var
-1 tableseq
tablefunc(sin(x),x)
tablefunc(x^2-x-2,x)

# tableseq
1 Tableau de valeurs d'une suite (dans un tableur)
2 Table of value of a sequence (in a spreadsheet)
3 Tabla de valores de una secuencia (en spreadsheet)
0 Expr,(Var or LstVar),(InitVal or LstInitVal)
-1 tablefunc
tableseq(cos(x),x,0.0)
tableseq(x+y,[x,y],[1,1])

# seqsolve
1 Donne la valeur d'une suite récurrente (u_{n+1}=f(u_n) ou u_{n+2}=f(u_{n+1},u_n)...) ou d'un système de suites récurrentes.
2 Gives the value of a recurrent sequence (u_{n+1}=f(u_n) or u_{n+2}=f(u_{n+1},u_n)...) or of a system of recurrent sequences.
3 Valores de una secuencia recurrent (u_{n+1}=f(u_n) o u_{n+2}=f(u_{n+1},u_n)...).
0 (Expr or LstExpr),(Var or LstVar),(InitVal or LstInitVal)
-1 rsolve
-2 plotseq
-3 tableseq
seqsolve(2x+n,[x,n],1)
seqsolve(2x+n*3^n,[x,n],1)
seqsolve(x+y,[x,y,n],[1,1])
seqsolve([x+y,x],[x,y,n],[1,1])

# rsolve
1 Donne la valeur d'une suite récurrente ou d'un système de suites récurrentes.
2 Gives the value of a recurrent sequence or of a system of recurrent sequences.
3 Valores de una secuencia recurrent.
0 (Expr or LstExpr),(Var or LstVar),(InitVal or LstInitVal)
-1 seqsolve
-2 plotseq
-3 tableseq
rsolve(u(n+1)=2u(n)+n,u(n),u(0)=1)
rsolve(u(n+1)=2u(n)+n,u(n),u^2(1)=1)
rsolve([u(n+1)=3v(n)+u(n),v(n+1)=v(n)+u(n)],[u(n),v(n)],[u(0)=1,v(0)=2])

# tan
1 Tangente
2 Tangent
3 Tangente
0 Expr
-1 atan
tan(0)
tan(pi/4)

# tangent tangente
1 tangent(C,A) trace les tangentes (droite ou plan) à C passant par A.
2 tangent(C,A) draws the tangents (line or plane) to C throught A.
3 tangent(C,A) dibuja la tangente (2d o 3d) a C en A.
0 Curve(C),Pnt(A) 
-1 LineTan
tangent(circle(i,1+i),A)
tangent(plotfunc(sin(x)),3*pi/4)
tangent(plotfunc(sin(x)),point(3*pi/4+i*sqrt(2)/2))
tangent(plotfunc(x^2+y^2,[x,y]),[2,2])
tangent(plotfunc(x^2+y^2,[x,y]),point[2,2,8])

# tchebyshev1
1 Renvoie le nième polynôme de Tchebyshev 1ière espèce.
2 Returns the nth Tchebyshev polynomial of first sort.
3 Devuelve el n-ésimo polinómio de Tchebyshev de primer orden. 
0 Intg(n)
-1 tchebyshev2
-2 hermite
tchebyshev1(3)


# tchebyshev2
1 Renvoie le nième polynôme de Tchebyshev 2ième espèce.
2 Returns the nth Tchebyshev polynomial of second sort.
3 Devuelve el n-ésimo polinómio de Tchebyshev de segundo orden.
0 Intg(n)
-1 tchebyshev1
-2 hermite
tchebyshev2(3)

# test
1 Fonction de test pour les développeurs
2 Test fonction for system developpers
3 Función de comprobación para desarrolladores
0 Var 
-1 
test(x)

# then
1 Utilisé dans un test if: if (condition) then instruction; end_if;
2 Used in a test if: if (condition) then instruction; end_if;
3 Usado en una comprobación if: if (condition) then instruction; end_if;
0 
-1 if
 if (a<0) then a:=-a; end_if;

# tlin lineariser_trigo
1 Linéarisation trigonométrique
2 Trigonometric linearization
3 Linealización trigonométrica
0 ExprTrig 
-1 texpand
-2 lin
tlin(sin(x)^3)
tlin(cos(x)*cos(y))

# trace
1 Donne la trace d'une matrice carrée ou dessine la trace d'un objet géométrique lorsqu'on fait varier le paramètre (voir Trace dans le bouton Menu d'un niveau de géométrie et écrire seulement une instruction par ligne).
2 Returns the trace of a square matrix or draws the trace of a geometric object when the parameter changes (see Trace in Menu button of a geometric level and write only one instruction on each line).
3 Devuelve la traza de una matriz cuadrada o dibuja la traza de un geométrico objeto cuando los valores de el parámetro cambia.
0 Mtrx or GeoObj 
-1 det
-2 lieu
trace([[1,2,3],[1,3,6],[2,5,7]])
trace([[1+i,2,3],[1,3,6],[2,5,9-i]])
 assume(a=[0.7,-5,5,0.1]);trace(point(a-i*a))
 assume(a=[0.7,-5,5,0.1]);trace(inter_unique(droite(y=a*x+a),droite(y=2*a*x+1)))

# tran transpose
1 Transposée d'une matrice (sans conjugaison)
2 Transposes a matrix (without conjugation)
3 Transpone una matriz (sin conjuganción)
0 Mtrx
-1 conj
tran([[1,2,3],[1,3,6],[2,5,7]])
tran([[1+i,2,3],[1,3,6],[2,5,9-i]])
tran(conj([[1+i,2,3],[1,3,6],[2,5,9-i]]))

# translation
1 translation(B-A,C) (resp translation([a,b,c],C)) est le translaté de C ds la translation de vecteur AB (resp [a,b,c]).
2 translation(B-A,C) (resp translation([a,b,c],C))is the translated of C in the translation of vector AB (resp [a,b,c]).
3 translation(B-A,C) (resp translation([a,b,c],C))es el translado de C en el vector de translación AB (resp [a,b,c]).
0 Vect, Pnt(C)
-1 rotation
-2 reflection
translation(1+i,i)
translation([1,1,1],point[1,2,3])
 t:=translation(1+i);t(i)
 t:=translation([1,1,1]);t(point[1,2,3])

# triangle
1 triangle(A,B,C) trace le triangle ABC
2 triangle(A,B,C) draws the triangle ABC
3 triangle(A,B,C) dibuja el triángulo ABC
0 (Pnt or Cplx),(Pnt or Cplx),(Pnt or Cplx)
-1 equilateral_triangle
-2 isoceles_triangle
-3 right_triangle
triangle(point(1+i),1,0)
triangle(0,1,1+i)
triangle(point(0,0,0),point(3,3,3),point(0,3,3))

# equilateral_triangle
1 triangle_equilateral(A,B) (resp triangle_equilateral(A,B,P)) trace le triangle équilatèral ABC direct de coté AB (resp dans le demi-plan ABP). 
2 equilateral_triangle(A,B) (resp equilateral_triangle(A,B,P)) draws the direct equilateral triangle ABC of side AB (resp in the half-plane ABP).
3 equilateral_triangle(A,B) (resp equilateral_triangle(A,B,P)) dibuja el triángulo equilatero ABC de lado AB (resp en el half-plan ABP).
0 (Pnt(A) or Cplx),(Pnt(B) or Cplx),[Pnt(P)],[Var(C)]
-1 triangle
equilateral_triangle(point(1+i),0)
equilateral_triangle(0,1+i,C)
equilateral_triangle(point(0,0,0),point(3,3,3),point(0,0,3))
equilateral_triangle(point(0,0,0),point(3,3,3),point(0,0,3),C)

# isoceles_triangle
1 Trace le triangle isocèle ABC AB=AC et angle(AB,AC)=t (ou dans le plan ABP angle(AB,AC)=angle(AB,AP) ou angle(AB,AC)=t).
2 Draws the isoceles triangle ABC  AB=AC et angle(AB,AC)=t (or in the plane ABP angle(AB,AC)=angle(AB,AP) ou angle(AB,AC)=t).
3 Dibuja el triángulo isósceles ABC AB=AC y (AB,AC)=t (o en el plan ABP angle(AB,AC)=angle(AB,AP) o angle(AB,AC)=t).
0 (Pnt(A) or Cplx),(Pnt(B) or Cplx),(Angle(t) or Pnt(P) or Lst(P,t)),[Var(C)] 
-1 triangle
isoceles_triangle(i,1,pi/4)
isoceles_triangle(1,i,pi/4,C)
isoceles_triangle(point(0,0,0),point(3,3,3),point(0,0,3))
isoceles_triangle(point(0,0,0),point(3,3,3),[point(0,0,3),pi/4],C)

# right_triangle
1 Trace le triangle ABC rectangle en A avec AC=k*AB (ou dans le plan ABP AC=AP ou AC=k*AB).
2 Draws the A_rectangular triangle ABC with AC=k*AB (or in the plane ABP AC=AP or AC=k*AB).
3 Dibuja el triángulo rectángulo en A con AC=k*AB (o en el plan ABP AC=AP o AC=k*AB).
0 (Pnt(A) or Cplx),(Pnt(B) or Cplx),(Real(k) or Pnt(P) or Lst(P,k)),[Var(C)]
-1 triangle
right_triangle(1,i,tan(pi/3))
right_triangle(1,i,1/2,C)
right_triangle(point(0,0,0),point(3,3,3),point(0,0,3))
right_triangle(point(0,0,0),point(3,3,3),[point(0,0,3),1/2],C)
right_triangle(point(0,0,0),point(3,3,3),[point(0,0,3),1/2],C)

# trn
1 Renvoie la matrice adjointe de A =tran(conj(A))
2 Returns the adjoint matrix of A =tran(conj(A))
3 Devuelve la matriz adjunta de A=tran(conj(A))
0 Mtrx
-1 tran
-2 conj
trn([[1,2+i],[3,4]])

# truncate
1 Tronque le polynôme P à l'ordre n
2 Truncates the polynomial P at order n
3 Trunca el polinómio P al orden n
0 Poly(P),Intg(n)
-1 series
truncate((x^2+x)^2,3)

# try
1 Protection contre les erreurs: try {instructions;} catch(variable) {error_instructions;} (dans un programme)
2 Error protection: try {instructions;} catch(variable) {error_instructions;} (in a program)
3 Protección contra errores: try {instructions;} catch(variable) {error_instructions;} (dentro de un programa)
0 
-1 throw
-2 catch
 essai(x):={local y,err;try {y:=[[1,2]]+x;}catch (err){y:="erreur:"+err;} return y;}

# type
1 Renvoie n dans [1..12] définissant le type de l'argument
2 Returns n in [1..12] that define the type of the argument
3 Devuelve n de [1..12] que define el tipo del argumento
0 Expr
-1
type("abc")
type([1,2,3])

# union
1 union est un opérateur infixé pour avoir l'union de 2 ensembles
2 union is an infixed operator to get the union of 2 sets 
3 union es un operador infijo para obtener la unión de dos objetos
0 (Vect or Set),(Vect or Set)
-1 minus
-2 intersect
 [1,2,3] union [2,5,6]
 %{1,2,3%} union %{2,5,6%}

# valuation ldegree
1 Renvoie la valuation (degré du terme de plus bas degré) du polynôme P
2 Returns the valuation (degree of the term of lowest degree) of the polynomial P .
3 Devuelve la evaluación del polinómio P.
0 Poly(P)
-1 degree
-2 tcoeff
valuation(x^4+x^3)
valuation([1,1,0,0,0])
valuation(x^5+3*x^2)
valuation([5,0,0,3,0,0])

# vandermonde
1 Renvoie la matrice de Vandermonde=[V^0,V^1,..] 
2 Returns the Vandermonde matrix=[V^0,V^1,..] 
3 Devuelve la matriz de Vandermonde=[V^0,V^1,..]  
0 Vect(V)
-1 det 
vandermonde([1,2,a])

# VARS
1 Liste des variables et des répertoires du répertoire courant
2 List of the variables and folders of the current directory
3 
0 NULL
-1 lvar
VARS()

# vpotential
1 Renvoie U tel que curl(U)=V
2 Returns U such as curl(U)=V
3 Devuelve U tal que rot(U)=V
0 Vect(V),LstVar
-1 curl
-2 potential
vpotential([2*x*y+3,x^2-4*z,-2*y*z],[x,y,z])

# watch
1 Ajoute une variable à la liste des variables affichées en pas-à-pas
2 Adds a variable to the list of displayed variables in step by step
3 Añade una variable a la lista de las mostradas en paso a paso
0 Var
-1 rmwatch
watch(a)

# while
1 Boucle tantque (effectue les instructions tant que cond==true): while (cond) {i1;i2;};
2 Loop while (do the instructions while cond==true): while (cond) {i1;i2;};
3 Bucle mientras (realiza la instrucción mientras cond= verdadero): while (cond) {i1;i2;};
0 
-1 for
-2 tantque
-3 repeat
 pgcd(a,b):={local r;while (b!=0){r:=irem(a,b);a:=b;b:=r}return a;};
 quoreste(a,b):={local q:=0;while (a>=b){a:=a-b;q:=q+1;} return q,a;};

# repeat until repeter jusqua jusqu_a
1 Boucle repeter (effectue les instructions jusqu'à cond==true): repeter i1;i2;jusqua cond; ou repeat i1;i2; until cond;
2 Loop repeat (repeat the instructions until cond==true): repeat i1;i2; until cond; or repeter i1;i2;jusqua cond;
3 Bucle repeat (realiza la instrucción hasta cond= verdadero): repeat i1;i2; until cond; o repeter i1;i2;jusqua cond;
0 
-1 for
-2 tantque
 repeter jusqu_a ;
 repeat x:=x-5 until x<5 ;
 quoreste(a,b):={local q:=0;repeat a:=a-b;q:=q+1 until a<0;return q-1,a+b;};
 x:=32;repeat x:=x-5 until x<5;
 quoreste(a,b):={local q:=0;repeter a:=a-b;q:=q+1; jusqua a<0;return q-1,a+b;};
 x:=32;repeter x:=x-5; jusqua x<5;
 n:=1;repeter triangle_plein(10*n);saute(10*n);n:=n+1; jusqua n==5;
 n:=4;repeter triangle_plein(10*n);saute(10*n);n:=n-1; jusqua n==0;
 

# {}
1 Bloc d'instructions
2 Instructions bloc
3 Bloque de instrucciones
0 
-1 begin
-2 end
-3 bloc
-4 local
-5 return
 k(x):={local (n:=x+1);return x+n;}

# abcuv
1 Renvoie [u,v] vérifiant au+bv=c pour 3 polynômes a,b,c
2 Returns [u,v] such as au+bv=c for 3 polynomials a,b,c
3 Devuelve [u,v] tales que au+bv=c para 3 polinómios a,b,c 
0 Poly(a),Poly(b),Poly(c),[Var]
-1 egcd
-2 iabcuv
abcuv(x^2+2*x+1,x^2-1,x+1)
abcuv(X^2+2*X+1,X^2-1,X+1,X)
abcuv(x^2+2*x+1,x^2-1,x^3+1)
abcuv(X^2+2*X+1,X^2-1,X^3+1,X)
abcuv([1,2,1],[1,0,-1],[1,0,0,1])

# iabcuv
1 Renvoie [u,v] vérifiant au+bv=c pour 3 entiers a,b,c
2 Returns [u,v] such as au+bv=c for 3 integers a,b,c
3 Devuelve [u,v] tales que au+bv=c para 3 enteros a,b,c 
0 Intg(a),Intg(b),Intg(c)
-1 iegcd
-2 abcuv
iabcuv(21,28,7)
iabcuv(21,28,14)
iabcuv(21,28,1)

# iegcd igcdex bezout_entiers
1 Identité de Bézout pour 2 entiers
2 Extended greatest common divisor of 2 integers
3 Máximo común divisor extendido de 2 enteros
0 Intg,Intg
-1 gcd
-2 iabcuv
-3 egcd
iegcd(45,75)
iegcd(21,28)
iegcd(30,49)

# acos2asin
1 Remplace arccos(x) par pi/2-arcsin(x) dans l'argument
2 Replaces arccos(x) by pi/2-arcsin(x) in the argument
3 Reemplaza arccos(x) por pi/2-arcsin(x) en el argumento 
0 Expr
-1 acos2atan 
acos2asin(acos(x)+asin(x)) 
acos2asin(2*acos(x))

# acos2atan
1 Remplace arccos(x) par pi/2-arctan(x/sqrt(1-x^2)) dans l'argument
2 Replaces arccos(x) by pi/2-arctan(x/sqrt(1-x^2)) in the argument
3 Reemplaza arccos(x) por pi/2-arctan(x/sqrt(1-x^2)) en el argumento    
0 Expr
-1 acos2asin
acos2atan(2*acos(x))
acos2atan(acos(sqrt(1-x^2))+acos(x))

# asin2acos
1 Remplace arcsin(x) par pi/2-arccos(x) dans l'argument
2 Replaces arcsin(x) by pi/2-arccos(x) in the argument
3 Reemplaza arcsin(x) por pi/2-arccos(x) en el argumento  
0 Expr
-1 asin2atan 
asin2acos(acos(x)+asin(x)) 
asin2acos(2*asin(x))

# asin2atan
1 Remplace arcsin(x) par arctan(x/sqrt(1-x^2)) dans l'argument
2 Replaces arcsin(x) by arctan(x/sqrt(1-x^2)) in the argument
3 Reemplaza arcsin(x) por arctan(x/sqrt(1-x^2)) en el argumento  
0 Expr
-1 asin2acos 
asin2atan(2*asin(x))
asin2atan(asin(sqrt(1-x^2))+asin(x))

# collect
1 Factorisation d'un polynôme (ou d'une liste de poly) sur les entiers
2 Integer factorization of a polynomial (or of a list of poly)
3 Factorización de un polinómio (o de una lista de polinómios) 
0 Poly or LstPoly
-1 factor 
-2 factors
collect(x^2-4)
collect(x^2-2)
collect([x^2-2,x^2-4])

# idivis divisors
1 Renvoie la liste des diviseurs d'un entier
2 Returns the list of divisors of an integer
3 Devuelve la lista de divisores de un entero 
0 Intg or LstIntg
-1 divis
-2 ifactors 
idivis(36)
idivis(49)

# divis
1 Renvoie la liste des diviseurs d'un polynôme.
2 Returns the list of divisors of a polynomial.
3 Devuelve la lista de divisores de un polinómio. 
0 Poly or LstPoly
-1 idivis
-2 factors
-3 poly2symb
divis(x^2-1)
divis(x^4-1)
divis(t^4-1)
divis([x^4-1,x^2-1])
divis([x^4-1,t^2-1])
divis(poly2symb([1,0,0,0,-1],x))

# exp2pow
1 Transforme exp(n*ln(x)) en x^n.
2 Transforms exp(n*ln(x)) in x^n.
3 Transforma exp(n*ln(x)) en x^n.
0 Expr
-1 pow2exp
exp2pow(exp(3*ln(x)))
exp2pow(exp(x*ln(x)))


# exp2trig
1 Transforme les exponentielles complexes en sinus et cosinus.
2 Transforms the complex exponential into sinus and cosinus.
3 Transforma las exponenciales complejas en senos y cosenos.
0 Expr
-1 trig2exp
-2 atrig2ln
exp2trig(exp(i*x))
exp2trig(exp(-i*x))

# sincos
1 Transforme les exponentielles complexes en sinus et cosinus.
2 Transforms the complex exponential into sinus and cosinus.
3 Transforma las exponenciales complejas en senos y cosenos.
0 Expr
sincos(exp(i*x))
sincos(exp(-i*x))

# ifactors facteurs_premiers
1 Renvoie la liste des facteurs premiers d'un entier avec leur multiplicité.
2 Returns the list of prime factors of an integer (each factor is followed by its multiplicity).  
3 Devuelve la lista de factores primos de un entero y su orden de multiplicidad .
0 Intg or LstIntg
-1 ifactor
-2 factors
ifactors(36) 
ifactors([36,52])

# factors
1 Renvoie la liste des facteurs premiers d'un polynôme avec leur multiplicité.
2 Returns the list of prime factors of a polynomial (each factor is followed by its multiplicity).  
3 Devuelve la lista de factores primos de un polinómio y su orden de multiplicidad. 
0 Poly or LstPoly
-1 factor
-2 ifactors
factors(x^4-1)
factors([x^2,x^2-1])

# fourier_an
1 Renvoie le coefficient de Fourier an=2/T*integrate(f(x)*cos(2*pi*n*x/T),a,a+T).
2 Returns the nth Fourier coefficient an=2/T*integrate(f(x)*cos(2*pi*n*x/T),a,a+T).
3 Devuelve el coeficiente n-ésimo de Fourier an=2/T*integrate(f(x)*cos(2*pi*n*x/T),a,a+T). 
0 Expr(f(x)),Var(x),Period(T),Intg(n),Real(a)
-1 fourier_cn
-2 fourier_bn
-3 assume
fourier_an(x^2,x,2,0,-1)
fourier_an(x^2,x,2,n,-1)

# fourier_bn 
1 Renvoie le coefficient de Fourier bn=2/T*integrate(f(x)*sin(2*pi*n*x/T),a,a+T).
2 Returns the nth Fourier coefficient bn=2/T*integrate(f(x)*sin(2*pi*n*x/T),a,a+T).
3 Devuelve el coeficiente n-ésimo de Fourier bn=2/T*integrate(f(x)*sin(2*pi*n*x/T),a,a+T). 
0 Expr(f(x)),Var(x),Period(T),Intg(n),Real(a)
-1 fourier_cn
-2 fourier_an
-3 assume
fourier_bn(x^2,x,2,0,-1)
fourier_bn(x^2,x,2,n,-1)

# fourier_cn
1 Renvoie le coefficient de Fourier cn=1/T*integrate(f(x)*exp(-2*i*pi*n*x/T),a,a+T).
2 Returns the nth Fourier coefficient cn=1/T*integrate(f(x)*exp(-2*i*pi*n*x/T),a,a+T).
3 Devuelve el coeficiente n-ésimo de Fourier cn=2/T*integrate(f(x)*exp(-2*i*pi*n*x/T),a,a+T). 
0 Expr(f(x)),Var(x),Period(T),Intg(n),Real(a)
-1 fourier_an
-2 fourier_bn
-3 assume
fourier_cn(x^2,x,2,0,-1)
fourier_cn(x^2,x,2,n,-1)

# f2nd fxnd
1 Renvoie la liste formée par le numérateur et le dénominateur de l'argument.
2 Returns the list built with the numerator and the denominator of the argument.
3 Devuelve la lista formada por el numerdador y el denominador del argumento.
0 Frac or RatFrac
-1 simp2
-2 numer
-3 denom
-4 getNum
-5 getDenom
f2nd(42/12)
f2nd((x^2+2*x+1)/(x^2-1))

# gbasis
1 Base de Groebner de l'idéal engendré par la liste de polynômes.
2 Groebner basis of the ideal spanned by the list of polynomials.
3 Base Groebner de la generada por la lista de polinómios.
0 LstPoly,LstVar
-1 greduce
gbasis([x^2-y^3,x+y^2],[x,y])
gbasis([x1+x2+x3,x1*x2+x1*x3+x2*x3,x1*x2*x3-1],[x1,x2,x3])
gbasis([x1+x2+x3,x1*x2+x1*x3+x2*x3,x1*x2*x3-1],[x1,x2,x3],tdeg,with_cocoa=false)
gbasis([x1+x2+x3,x1*x2+x1*x3+x2*x3,x1*x2*x3-1],[x1,x2,x3],revlex,with_cocoa=true)

# greduce
1 Renvoie le reste de la division d'un polynôme par une base de Groebner.
2 Returns the remainder of the division of a polynomial by a Groebner basis.
3 Devuelve el resto de la división de un polinómio entre una base Groebner.
0 Poly,LstPoly,LstVar
-1 gbasis
greduce(x*y-1,[x^2-y^2,2*x*y-y^2,y^3],[x,y])
greduce(x1^2*x3^2,[x3^3-1,-x2^2-x2*x3-x3^2,x1+x2+x3],[x1,x2,x3],tdeg)
greduce(x1^2*x3^2-x2,[x3^3-1,-x2^2-x2*x3-x3^2,x1+x2+x3],[x1,x2,x3])

# halftan
1 Transforme sin(x),cos(x) et tan(x) en fonction de tan(x/2).
2 Transforms sin(x),cos(x) and tan(x) as function of tan(x/2).
3 Transforma sin(x),cos(x) y tan(x) como funciones de tan(x/2). 
0 Expr
halftan(sin(x))
halftan(cos(x))
halftan(tan(x))

# horner
1 Renvoie la valeur P(a) calculée selon la méthode de Hörner.
2 Returns the value of P(a) calculated with Horner's method.
3 Devuelve el valor de P(a) calculado con el método de Horner.
0 Poly(P),Real(a)
horner(x^2+1,2)
horner([1,0,1],2)
horner(x^2+y*x+y^3-1,2,y)

# ifte when IFTE
1 Si condition renvoie expr1 sinon renvoie expr2.
2 If condition returns expr1 else returns expr2.
3 si condición devuelve expr1 sino devuelve expr2. 
0 Cond,Expr1,Expr2
-1 if
-2 then
-3 else
x:=3;ifte(x>0,x+1,x-1)
a:=2;ifte(a>1,a+1,0)

# when
1 Si condition (même symbolique) renvoie expr1 sinon renvoie expr2 (? est la version infixé).
2 If condition (even symbolic) returns expr1 else returns expr2 (? is the infixed version).
3 Si  condición devuelve expr1 sino devuelve expr2 (? es la infijo versión) . 
0 Cond,Expr1,Expr2
-1 if
-2 then
-3 else
when(x>0,x+1,x-1)
when(n,1,0)
 (a>1)?a+1:0

# intersect
1 intersect est un opérateur infixé pour avoir l'intersection de 2 ensembles
2 intersect is a infixed operator to get the intersection of 2 sets 
3 intersect es un operador infijo para obtener la intersection de 2 sets, vectores o secuencias
0 (Vect or Set),(Vect or Set)
-1 union
-2 minus
 [1,2,3] intersect [2,5,6]
 %{1,2,3%} intersect %{2,5,6%}

# lncollect
1 Applique ln(a)+n*ln(b)->ln(a*b^n) pour n entier
2 Applies ln(a)+n*ln(b)->ln(a*b^n) for integers n
3 Aplica ln(a)+n*ln(b)->ln(a*b^n) para entero n
0 Expr
-1 texpand
lncollect(ln(x)+2*ln(y))

# makemat
1 Crée une matrice
2 Create a matrix
3 Crea una matriz
0 Fnct,RowsNumb,ColsNumb
-1 matrix
makemat((j,k)->j+k,3,2)
makemat((j,k)->1/(j+k+1),2,3)
makemat(sqrt(2),2,3)

# matrix
1 Crée une matrice m(j,k) de p lignes et q, m(j,k)=f(j,k) ou m(j,k)=a (ou option de apply)
2 Make a matrix m(j,k) with  p rows and q cols, m(j,k)=f(j,k) or m(j,k)=a (or option of apply)
3 Crea una matriz m(j,k) de r filas, c columnas, m(j,k)=f(j,k) o f(j,k)=a (o opción de apply)
0 Intg(p),Intg(q),(Fnc(f) or Val(a)) 
-1 makemat
-2 makelist
-3 apply
matrix(2,3,(j,k)->1/(j+k+1))
matrix(3,2,(j,k)->j+k) 
matrix(2,3,4)

# display color
1 Trace un objet géométrique en couleur (noir=0 rouge=1 vert=2 jaune=3 bleu=4),en trait +/- épais (line_width_n 0<n<8) et peut l'afficher selon une ligne pointillée (dash_line), rempli permet de remplir un polygone ou une courbe fermée.
2 Draws an geometrical object with colors black=0 red=1 green=2 yellow=3 blue=4, rempli put the color in the interior of a closed curve,line_width_n (0<n<8) is for the width of the line and dash_line is for dotted line.
3 Dibuja un objeto geométrico con colores:negro=0 rojo=1 verde=2 amarillo=3 azul=4.
0 [GeoObj or legende],Intg
-1 -<
-2 legende
display(A,1)
display(F:=point(2+1.5*i),2)
display(point(2+1.5*i),2)
display(legende(1+i,"abc"),4)
display(square(0,1),filled+red+line_width_6)
display(circle(0,1),filled)
display(line(y=x),green+dash_line+line_width_1)
display(red);square(0,1);
display(red+filled);square(0,1);

# line_width_1 line_width_2 line_width_3 line_width_4 line_width_5 line_width_6 line_width_7 ligne_epaisseur_1 ligne_epaisseur_2 ligne_epaisseur_3 ligne_epaisseur_4 ligne_epaisseur_5 ligne_epaisseur_6 ligne_epaisseur_7
1 Option de la commande affichage (ou display) pour une ligne. 
2 Option of the display command for a line.
3 Opción de display para una línea
0 Opt
-1 display
-2 thickness
 display(line(y=x),green+dash_line+line_width_1)
 display(segment(0,1+i),line_width_5)

# dash_line ligne_tiret solid_line ligne_trait_plein dashdot_line ligne_tiret_point dashdotdot_line ligne_tiret_pointpoint cap_flat_line ligne_chapeau_plat cap_square_line ligne_chapeau_carre cap_round_line ligne_chapeau_rond
1 Option de la commande affichage (ou display) pour une ligne. 
2 Option of the display command for a line.
3 Opción de display para una línea
0 Opt
-1 display
 display(line(y=x),green+dash_line+line_width_2)
 d:=display(line(2+i,1),cap_round_line)

# rhombus_point point_losange plus_point point_plus square_point point_carre cross_point point_croix triangle_point point_triangle star_point point_etoile point_point invisible_point point_invisible
1 Option de la commande affichage (ou display) pour un point. 
2 Option of the display command for a point.
3 Opción de display para uno punto.
0 Opt
-1 display
 F:=display(point(2+1.5*i),point_point)
 F:=display(point(2+1.5*i),rhombus_point)

# hidden_name nom_cache
1 Option de la commande affichage (ou display) pour ne pas afficher le nom. 
2 Option of the display command to hide the name.
3 Opción de display para esconder el nombre.
0 Opt
-1 display
 F:=display(point(2+1.5*i),hidden_name)
 F:=display(point(2+1.5*i),point_point+hidden_name)

# filled rempli
1 Option de la commande affichage (ou display) pour faire des figures pleines. 
2 Option of the display command to fill figures.
3 Opción de display.
0 Opt
-1 display
 F:=display(square(0,2+i),filled)
 C:=display(square(2,2+i),red+filled)

# white blanc black noir red rouge green vert blue bleu yellow jaune magenta cyan
1 Option de la commande affichage (ou display) pour afficher en couleur. 
2 Option of the display command to display with color.
3 Opción de display para escribir de color.
0 Opt
-1 display
 F:=display(point(2+1.5*i),red)
 F:=display(point(2+1.5*i),point_point+green)

# quadrant1 quadrant2 quadrant3 quadrant4
1 Option de la commande affichage pour afficher une légende. 
2 Option of the display command to write a legend.
3 Opción de display para escribir una leyenda.
0 Opt
-1 display
 display(legende(1+i,"abc"),4+quadrant2)

# -<
1 Opérateur infixé (équivalent à l'instruction préfixée couleur) qui définit les attributs d'une figure géométrique.
2 Infixed operator (equvalent to the prefixed instruction color) which define the attributs of a geometrical figure.
3 
0 GeoObj,Attribut
-1 color
 square(0,1) -< filled+red
 square(0,2) -< green
 square(0,2) -< green+dash_line
 square(0,2) -< filled

# ->
1 Opérateur infixé qui définit une fonction utilisateur: x->f(x)
2 Infixed operator which define an user function: x->f(x)
3 Operador infijo que define una función definida por el usuario: x->f(x)
0 VectVar(x),Expr(f(x))
-1 for
-2 if 
-3 local 
-4 {}
 x -> sin(x)
 f:= (x,y)->sin(x+y)+sin(x-y)
 k:=(x,y)->{if (x!=y) 0; else 1;}
 g:=(x,y)->return(sin(x+y),sin(x-y))

# mod %
1 Opérateur infixé qui renvoie n mod p un nombre de Z/pZ
2 Infixed operator which returns n mod p a number of Z/pZ
3 Operador infijo que devuelve n mod p un número de Z/pZ 
0 Intg(n),Intg(p)
-1 smod  
-2 irem
 15 mod 6

# pa2b2
1 Renvoie [a,b] tels que a^2+b^2=n (pour n  premier et n=1 (mod 4))
2 Returns [a,b] such as a^2+b^2=n (for n prime and n=1 (mod 4)) 
3 Devuelve [a,b] tales que a^2+b^2=n (para n primo y n=1 (mod 4)) 
0 Intg(n) 
pa2b2(17)
pa2b2(209) 

# permu2cycles
1 Convertit une permutation en un produit de cycles disjoints
2 Converts a permutation to a product of disjoined cycles 
3 Convierte una permutación en un producto de ciclos
0 Permut
-1  cycles2permu
-2 cycle2perm
permu2cycles([0,2,1,3,5,4])
permu2cycles([0,2,1,4,3,5])

# plotseq seqplot graphe_suite
1 Permet de visualiser les p premiers termes de la suite u(0)=a,u(n)=f(u(n-1))
2 For seeing the pth terms of the sequence u(0)=a,u(n)=f(u(n-1))
3 Permite ver los p primeros términos de la sucesión u(0)=a,u(n)=f(u(n-1))
0 Expr(Var),Var=[u0,xm,xM],Intg(p)
-1 seqsolve
-2 rsolve
plotseq(sqrt(2+x),6,5)
plotseq(sqrt(2+t),t=6,5)
plotseq(sqrt(2+x),x=[6,1,7],5,affichage=epaisseur_ligne_2)

# propfrac propFrac
1 Simplifie et écrit la fraction (ou fraction rationnelle) A/B sous la forme Q+R/B avec R<B (ou deg(R)<deg(B))
2 Simplifies and writes the fraction (or rationnal fraction) A/B as Q+R/B with R<B (or deg(R)<deg(B))
3 Simplifica y escribe la facción (o expresión racional) A/B como Q+R/B con R<B (o deg(R)<deg(B)) 
0 Frac or RatFrac
-1 partfrac
propfrac(28/12)
propfrac((x^2+2*x-1)/(x+1))

# rank
1 Renvoie le rang de la matrice
2 Returns the rank of the matrix 
3 Devuelve el rango de una matriz 
0 Mtrx
-1 det
-2 image
rank([[1,1,2],[2,1,3],[3,1,4]])
rank([[1,1,2],[2,1,3],[3,1,5]])

# romberg nInt
1 Renvoie la valeur approchée de integrate(f(x),x,a,b) par la méthode de Romberg
2 Returns the approximate value of integrate(f(x),x,a,b) by Romberg's method
3 Devuelve el valor aproximado de integrate(f(x),x,a,b) por el método de Romberg 
0 Expr(f(x)),Var(x),Real(a),Real(b)
-1 integrate
romberg(exp(x^2),x,0,1)
romberg(x^2,x,0,1)
romberg(exp(-x^2),x,-1,1)

# round
1 Arrondit le réel ou complexe en l'entier le plus proche ou en l'élément de Z[i] le plus proche, avec n décimales.
2 Arrounds the real or complex as the nearest integer or as nearest element of Z[i], with n decimals. 
3 Redondea el número real (o complejo) al entero más próximo (o elemento de Z[i]), con n decimals. 
0 Real or Cplx,[Intg(n)]
-1 floor 
-2 ceil
round(2.5)
round(-2.4)
round(-2.5+i*2.4)
round(1.234,2)

# epsilon
1 Renvoie la valeur de epsilon de la configuration du cas
2 Returns the value of epsilon of the cas configuration
3 Devuelve el valor de epsilon de la configuración del CAS 
0 NULL
-1  epsilon2zero
epsilon()

# simp2
1 Renvoie la liste [A/gcd(A,B),B/gcd(A,B)]
2 Returns the liste [A/gcd(A,B),B/gcd(A,B)]
3 Devuelve la lista [A/gcd(A,B),B/gcd(A,B)] 
0 Intg(A) or Poly(A),Intg(B) or Poly(B)
-1 gcd 
simp2(12,18)
simp2(x^3-1,x^2-1)

# simplify simplifier
1 Simplifie une expression
2 Simplifies an expression
3 Simplifica una expresión 
0 Expr
-1 normal
simplify(4*atan(1/5)-atan(1/239))
simplify(texpand((sin(3*x)+sin(7*x))/sin(5*x)))
simplify(texpand((cos(3*x)+cos(7*x))/cos(5*x)))

# sort
1 Renvoie la liste (ou suite) triée par ordre croissant ou selon la fonction donnée en second argument ou trie et collecte les termes égaux dans les sommes et produits.
2 Returns the sorted list (or sequence) with increassing order according with the second argument or sort and collect equal terms in sums and products.
3 Devuelve la lista ordenada en orden creciente or segun el segundo argumento.
0 LstReal or Seq
-1 SortA
-2 SortD
sort([3,2,2,4,1,0])
sort(3,2.1,2,4,1,0)
sort([3,4,2],(x,y)->x>y)
sort([[1,2],[2,3],[4,3]],(x,y)->when(x[1]==y[1],x[0]>y[0],x[1]>y[1]))
sort(y*x*2+x*y)

# split
1 Sépare les deux variables de l'expression (si elle n'a pas de dénominateur) ou renvoie [0]
2 Splits the two variables of the expression (without denominator) or returns [0]
3 Separa las 2 variables de la expresión (sin denominador) o devuelve [0]
0 Expr(var1,var2),Lst(var1,var2)
-1
split(x^3*y^2-y^2+x^3-1,[x,y])

# sum_riemann
1 Renvoie un équivalent au voisinage de var1=+infini de la somme de expr(var1,var2) pour var2:=1 à var1 lorsque la somme est une somme de riemann 
2 Returns an equivalent vhen var1=+infinity of the sum of expr(var1,var2) for var2:=1 to var1 when the sum is a sum of riemann 
3 Devuelve el equivalente a la suma de expr(var1,var2) desde var2:=1 hasta var1 cuando la suma es una suma de Riemann
0 Expr(var1,var2),Lst(var1,var2)
-1 
sum_riemann(1/(n+k),[n,k])
sum_riemann(n/(n^2+k),[n,k])
sum_riemann(n/(n^2+k^2),[n,k])

# sturmseq
1 Suite de Sturm associée à un polynôme ou à une fraction rationnelle.
2 Sturm sequence corresponding to a polynomial or to a rational fraction.
3 Secuencia de Sturm asociada a un polinómio.
0 Poly,[Var]
-1 sturm
-2 sturmab
sturmseq(x^3-1,x)
sturmseq(x^5-x^3,x)
sturmseq((x^5-x^3)/(x+2),x)

# sturm
1 Suite de Sturm associée à un polynôme ou nombre de changements de signe de ce polynôme dans ]a;b] ou de racines complexes dans a..b si a ou b est non réel.
2 Sturm sequence corresponding to a polynomial or number of sign changes of this polynomial in ]a;b].
3 Secuencia de Sturm asociada a un polinómio o número de cambios de signo de su polinómio en ]a;b].
0 Poly,[Var],[Cplx(a)],[Cplx(b)]
-1 sturmseq
-2 sturmab
sturm(x^3-1,x)
sturm(x^5-x^3,x)
sturm((x^5-x^3)/(x+2),x)
sturm(x^5-x^3,x,-2,5)
sturm(x^3-1,x,-2-i,5+3i)

# sturmab 
1 Nombre de changements de signe d'un polynôme dans ]a;b] ou de racines complexes dans a..b si a ou b est non réel.
2 Number of sign changes of a polynomial in ]a;b] or of complex roots in a..b if a or b is non-real.
3 Número de cambios de signo de un polinómio en ]a;b].
0 Poly,Var,Cplx(a),Cplx(b)
-1 sturm
-1 sturmseq
sturmab(x^3-1,x,-2,5)
sturmab(x^3-1,x,-2-i,5+3i)

# tail
1 Renvoie la liste (ou suite) privée de son premier élément
2 Returns the list (or sequence) without its first element
3 Devuelve la lista (o secuencia) sin el primer argumento 
0 Lst or Seq
-1 head
-2 mid
tail([3,2,4,1,0])
tail(3,2,4,1,0)
tail("bonjour")

# mid
1 Renvoie la liste de n (par défaut n=size(l)-d) éléments extraite de l en commencant par l'indice d.
2 Returns the extracted list of l with n (by default n=size(l)-d) elements and beginig at index d.
3 Devuelve la lista extraida de l con n (por defecto n=size(l)-d) elementos y comenzando en el de índice d.
0 Lst(l),Intg(d),Intg(n)
-1 head
-2 tail
mid([0,1,2,3,4,5,6],2,3)
mid([0,1,2,3,4,5,6],2)

# tan2sincos
1 Remplace tan(x) par sin(x)/cos(x) dans l'argument
2 Replaces tan(x) by  sin(x)/cos(x) in the argument
3 Reemplaza tan(x) por sin(x)/cos(x) en el argumento 
0 Expr
-1 sin2costan
-2 cos2sintan
-3 tan2sincos2
-4 tan2cossin2
tan2sincos(tan(x))

# sin2costan
1 Remplace sin(x) par cos(x)*tan(x) dans l'argument
2 Replaces sin(x) by cos(x)*tan(x) in the argument
3 Reemplaza sin(x) por cos(x)*tan(x) en el argumento 
0 Expr
-1 tan2sincos
-2 cos2sintan
-3 tan2sincos2
-4 tan2cossin2
sin2costan(sin(x))

# cos2sintan
1 Remplace cos(x) par sin(x)/tan(x) dans l'argument
2 Replaces cos(x) by  sin(x)/tan(x) in the argument
3 Reemplaza cos(x) por sin(x)/tan(x) en el argumento 
0 Expr
-1 tan2sincos
-2 sin2costan
-3 tan2sincos2
-4 tan2cossin2
cos2sintan(cos(x))

# tan2sincos2
1 Remplace tan(x) par sin(2*x)/(1+cos(2*x)) dans l'argument
2 Replaces tan(x) by  sin(2*x)/(1+cos(2*x)) in the argument 
3 Reemplaza tan(x) por sin(2*x)/(1+cos(2*x)) en el argumento 
0 Expr
-1 tan2cossin2
-2 tan2sincos 
-3 sin2costan
-4 cos2sintan
tan2sincos2(tan(x)) 

# tan2cossin2
1 Remplace tan(x) par (1-cos(2*x))/sin(2*x) dans l'argument
2 Replaces tan(x) by  (1-cos(2*x))/sin(2*x) in the argument 
3 Reemplaza tan(x) por (1-cos(2*x))/sin(2*x) en el argumento 
0 Expr
-1 tan2sincos2
-2 tan2sincos 
-3 sin2costan
-4 cos2sintan
tan2cossin2(tan(x)) 

# tanh
1 Tangente hyperbolique
2 Hyperbolic tangent
3 Tangente hiperbólica 
0 Expr
-1 atanh
-2 hyp2exp
tanh(0)
hyp2exp(tanh(1))

# tcollect tCollect rassembler_trigo
1 Rassemble des expressions trigonométriques
2 Collect trigonometric expressions
3 Agrupa expresiones trigonométricas 
0 Expr
-1 texpand
-2 tlin
tcollect(sin(x)+cos(x))

# texpand tExpand developper_transcendant
1 Développe des expressions transcendantes
2 Expand transcendental expressions
3 Expande expresiones transcendentales 
0 Expr
-1 tcollect
-2 tlin
-3 lin
texpand(sin(2*x)+exp(x+y))
texpand(cos(x+y))
texpand(cos(3*x))

# trig2exp
1 Remplace dans l'argument les fonctions trigo en exponentielles complexes sans linéariser
2 Replaces in the argument the trigonometric functions by complex exponentials without linearisation
3 Reemplaza las funciones trigonométricas por exponenciales complejas sin linealización 
0 Expr
-1 exp2trig
-2 atrig2ln
trig2exp(sin(x))

# trigcos
1 Simplifie l'argument avec les formules sin(x)^2+cos(x)^2=1 et tan(x)=sin(x)/cos(x) en privilégiant les cosinus
2 Simplifies the argument with the formulas sin(x)^2+cos(x)^2=1 and tan(x)=sin(x)/cos(x) privileging cosinus
3 Simplifica el argumento usando sin(x)^2+cos(x)^2=1 y tan(x)=sin(x)/cos(x) prefiriendo cosenos 
0 Expr
-1 trigsin 
-2 trigtan
trigcos(sin(x)^4+sin(x)^2)

# trigsin
1 Simplifie l'argument avec les formules sin(x)^2+cos(x)^2=1 et tan(x)=sin(x)/cos(x) en privilégiant les sinus
2 Simplifies the argument with the formulas sin(x)^2+cos(x)^2=1 and tan(x)=sin(x)/cos(x) privileging sinus
3 Simplifica el argumento usando sin(x)^2+cos(x)^2=1 y tan(x)=sin(x)/cos(x) prefiriendo senos 
0 Expr
-1 trigcos 
-2 trigtan
trigsin(cos(x)^4+sin(x)^2)

# trigtan
1 Simplifie l'argument avec les formules sin(x)^2+cos(x)^2=1 et tan(x)=sin(x)/cos(x) en privilégiant la fonction tangente
2 Simplifies the argument with the formulas sin(x)^2+cos(x)^2=1 and tan(x)=sin(x)/cos(x) privileging tangent 
3 Simplifica el argumento usando sin(x)^2+cos(x)^2=1 y tan(x)=sin(x)/cos(x) prefiriendo tangentes 
0 Expr
-1 trigsin
-2 trigcos
trigtan(cos(x)^4+sin(x)^2)

# tsimplify
1 Diminue le nombre de variables non rationnelles
2 Lower the number of non rational variables
3 Disminuye el número de variables no racionales
0 Expr
-1 simplify
tsimplify(exp(2*x)+exp(x))

# Zeta
1 Renvoie si a>1 sum(1/n^a,n,1,+infinity)
2 Returns if a>1 sum(1/n^a,n,1,+infinity)
3 Devuelve si a>1 sum(1/n^a,n,1,+infinito) 
0 Real(a)
-1 sum 
Zeta(2)

# open
1 Ouvre un fichier de nom s, renvoie le numero de handle du fichier
2 Opens a file named s, returns the file handle
3 open
0 Str(s)
-1 fopen
-2 close
 f:=open("filename")

# fopen
1 Ouvre un fichier de nom s, renvoie une variable de type fichier
2 Opens a file named s, returns a variable of type file
3 Abre un fichero llamado s, devuelve una variable de tipo fichero.
0 Str(s)
-1 fprint
-2 fclose
 f:=fopen("glouglou")

# fclose close
1 Ferme le fichier f.
2 Closes the file f.
3 Cierra el fichero f.
0 File(f)
-1 fprint
-2 fopen
fclose(f)

# fprint
1 Ecrit dans le fichier f des données
2 Writes in the file f some data
3 Escribe en el fichero f algunos datos.
0 File(f),Var,[Var,Var...]
-1 fopen
-2 fclose
fprint(f,x+1,"2")
fprint(f,"blabla")
fprint(f,Unquoted,"blabla")

# readwav
1 Lit un fichier son au format WAV
2 Reads a WAV sound file
3
0 Str(s)
-1 writewav
readwav("pop.wav")

# writewav
1 Ecrit un fichier son au format WAV
2 Writes a WAV sound file
3
0 Str(s),Lst(l)
-1 readwav
writewav("beep.wav",[[1,16,44100,80000],[65000$10000,0$10000,65000$10000,0$10000]])

# readrgb
1 Lit un fichier image, avec la taille originelle ou specifiee en argument 
2 Reads a picture file, using it's natural dimensions, or using specified dimensions
3
0 Str(s),[Intg(w)],[Intg(h)]
-1 writergb
readrgb("image.png")
readrgb("image.png",50,50)

# writergb
1 Ecrit un fichier PNG image de nom s a partir de la liste [[nombre_canaux,largeur,hauteur],rouge,vert,transparence,bleu] ou rouge,vert,transparence,bleu sont des matrices 
2 Write a PNG picture file named s from a list [[number_channels,width,height],red,green,alpha,blue] where red,green,alpha,blue are matrices
3
0 Str(s),Lst
-1 readrgb
 a:=readrgb("rgb_image.png");writergb("brg_image.png",[a[0],a[4],a[1],a[3],a[2]])

# Ei
1 Exponentielle integrale int(exp(t)/t,t=-inf..x)
2 Exponential integral int(exp(t)/t,t=-inf..x)
3
0 Expr
-1 Si
-2 Ci
Ei(1.0)

# Ci
1 Cosinus integral int(cos(t)/t,t=-inf..x)
2 Cosine integral int(cos(t)/t,t=-inf..x)
3
0 Expr
-1 Ei
-2 Si
Ci(1.0)

# Si
1 Sinus integral int(sin(t)/t,t=0..x)
2 Sine integral int(sin(t)/t,t=0..x)
3
0 Expr
-1 Ei
-2 Ci
Si(1.0)

# invztrans
1 Transformée en z inverse d'une fraction rationnelle
2 Inverse z transform of a rational fraction
3 Anti-Transformada z de una fracción racional
0 Expr,[Var],[InvZtransVar]
-1 ztrans
-2 laplace
-3 invlaplace
invztrans(1/(x^2+1)^2)
invztrans(z/(z^4-1),z,n)

# ztrans
1 Transformée en z d'une suite
2 z transform of a sequence
3
0 Expr,[Var],[ZtransVar]
-1 invztrans
-2 laplace
-3 invlaplace
ztrans(a^x)
ztrans(a^n,n,z)

# eval_level
1 Niveau d'evaluation en mode interactif
2 Evaluation level in interactive mode
0 [Intg]
eval_level()
eval_level(1)

