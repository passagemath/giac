dnl Process this file with autoconf to produce a configure script.
dnl  acinclude.m4 ---<aclocal> --->> aclocal.m4
dnl
dnl               <autoheader> --->> config.h.in
dnl
dnl  configure.in ---<autoconf>--->> configure
dnl
dnl  Makefile.am  ---<automake>--->> Makefile.in
dnl            src/Makefile.am --->> src/Makefile.in
dnl
dnl  configure    ---<sh>--->> config.status
dnl          Makefile.in --->> Makefile
dnl      src/Makefile.in --->> src/Makefile
dnl
dnl  Makefile   ---<make>--->> libgiac.la
dnl
dnl  All of the above can be done by the script autogen.sh.

AC_INIT(src/index.h)
AC_PREREQ(2.12)

dnl version information.
dnl
dnl Making releases:
dnl   GIACLIB_MICRO_VERSION += 1;
dnl   GIACLIB_INTERFACE_AGE += 1;
dnl   GIACLIB_BINARY_AGE += 1;
dnl if any functions have been added, set GIACLIB_INTERFACE_AGE to 0.
dnl if backwards compatibility has been broken,
dnl set GIACLIB_BINARY_AGE and GIACLIB_INTERFACE_AGE to 0.
dnl
dnl NOTE: these can't be renamed to GIAC_MAJOR_VERSION etc. because
dnl autoconf sees "AC_MAJOR_VERSION" and complains about an undefined macro
dnl (don't we all *love* M4?)...

GIACLIB_MAJOR_VERSION=0
GIACLIB_MINOR_VERSION=3
GIACLIB_MICRO_VERSION=0
GIACLIB_INTERFACE_AGE=0
GIACLIB_BINARY_AGE=0
GIACLIB_VERSION=$GIACLIB_MAJOR_VERSION.$GIACLIB_MINOR_VERSION.$GIACLIB_MICRO_VERSION

AC_SUBST(GIACLIB_MAJOR_VERSION)
AC_SUBST(GIACLIB_MINOR_VERSION)
AC_SUBST(GIACLIB_MICRO_VERSION)
AC_SUBST(GIACLIB_INTERFACE_AGE)
AC_SUBST(GIACLIB_BINARY_AGE)
AC_SUBST(GIACLIB_VERSION)

dnl This defines PACKAGE and VERSION.
ALL_LINGUAS="es de fr"
AM_GNU_GETTEXT
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE([giac], $GIACLIB_VERSION)
AM_MAINTAINER_MODE

dnl Optimization or debug
DEBUG_CONSTANT=yes
AC_ARG_ENABLE(debug,[  --enable-debug enables debug support [default=no]],DEBUG_CONSTANT=$enableval,DEBUG_CONSTANT=yes)
if test "x$DEBUG_CONSTANT" = "xyes" ;
then 
  GIAC_WARNING([Enabling debug support])
  AC_DEFINE(DEBUG_SUPPORT)
else
  GIAC_WARNING([Disabling debug support])
fi

dnl Garbage collector
GC_CONSTANT=no
AC_ARG_ENABLE(gc,[  --enable-gc enables gc support [default=no]],GC_CONSTANT=$enableval,GC_CONSTANT=no)
if test "x$GC_CONSTANT" = "xyes" ;
then 
  GIAC_WARNING([Enabling gc support])
  AC_CHECK_LIB(gc,GC_malloc_atomic)
else
  GIAC_WARNING([Disabling gc support])
fi

dnl Include semi-classical
AC_ARG_ENABLE(sscl,[  --enable-sscl enables support for semi-classical algorithms [default=no]],SSCL_CONSTANT=$enableval,SSCL_CONSTANT=no)
if test "x$SSCL_CONSTANT" = "xyes" ;
then 
  GIAC_WARNING([Adding semi-classical routines])
  AC_DEFINE(HAVE_SSCL)
else
  GIAC_WARNING([Disabling semi-classical routines])
fi


dnl Check for the compiler and all the utilities needed for the build.
dnl CXXFLAGS='-g'
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_INSTALL
AC_LANG_CPLUSPLUS
AM_PROG_LEX
AC_PROG_YACC
dnl AM_PROG_LIBTOOL
./ltconfig ltmain.sh
dnl Always use our own libtool.
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
AC_SUBST(LIBTOOL)dnl


AC_CHECK_LIB(m,main)

dnl Checking for dl
AC_ARG_ENABLE(dl,[  --enable-dl enables DL support [default=yes]],DL_CONSTANT=$enableval,DL_CONSTANT=yes)
if test "x$DL_CONSTANT" = "xno" ;
then 
GIAC_WARNING([DL support disabled, not checked])
else
AC_CHECK_LIB(dl,dlopen)
fi

dnl Check for stuff needed for building the Giac interactive shell (cas).
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(readline/readline.h readline/history.h)
if test "x${ac_cv_header_readline_readline_h}" != "xyes" -o "x${ac_cv_header_readline_history_h}" != "xyes"; then
  GIAC_WARNING([I could not find the headers for libreadline for cas.])
fi
GIAC_TERMCAP
LIBS="$LIBTERMCAP $LIBS"
AC_CHECK_LIB(readline, readline)
if test "x${ac_cv_lib_readline_readline}" = "xyes"; then
  GIAC_LIB_READLINE_VERSION
else
  GIAC_WARNING([I could not find libreadline for cas])
fi

dnl Make sure all the necessary standard headers are installed on the system.
AC_CHECK_HEADER(iostream, , GIAC_ERROR([The standard <iostream> header file could not be found.]))
AC_CHECK_HEADER(vector, , GIAC_ERROR([The standard <vector> header file could not be found.]))
AC_CHECK_HEADER(list, , GIAC_ERROR([The standard <list> header file could not be found.]))
AC_CHECK_HEADER(map, , GIAC_ERROR([The standard <map> header file could not be found.]))
AC_CHECK_HEADER(string, , GIAC_ERROR([The standard <string> header file could not be found.]))
AC_CHECK_HEADER(stdexcept, , GIAC_ERROR([The standard <stdexcept> header file could not be found.]))
AC_CHECK_HEADER(algorithm, , GIAC_ERROR([The standard <algorithm> header file could not be found.]))

dnl Checking for Gnu Sci Lib
AC_ARG_ENABLE(gsl,[  --enable-gsl enables GSL support [default=yes]],GSL_CONSTANT=$enableval,GSL_CONSTANT=yes)
if test "x$GSL_CONSTANT" = "xno" ;
then 
 GIAC_WARNING([GSL support disabled, not checked])
else
AC_CHECK_LIB(gslcblas,main)
AC_CHECK_LIB(gsl,gsl_sf_gamma)
fi

dnl Check for X11 anf fltk or cygwin and fltk...
dnl AC_CYGWIN
if test x$CYGWIN = xyes; then
AC_CHECK_LIB(gl,main)
AC_CHECK_LIB(fltk_gl,main)
AC_CHECK_LIB(fltk,main)
AC_CHECK_LIB(z,main)
AC_CHECK_LIB(png,main)
AC_CHECK_LIB(fltk_images,main)
AC_CHECK_LIB(flvw,main)
LIBS="$LIBS -lgdi32 -lwsock32"
CXXFLAGS="$CXXFLAGS -DWIN32"
AC_CHECK_LIB(intl.dll,main)
AC_CHECK_LIB(intl,main)
else
AC_PATH_XTRA
if test x$no_x = xyes; then
AC_MSG_RESULT([X libraries not found, checking for FLTK])
AC_CHECK_LIB(fltk_gl,main)
AC_CHECK_LIB(fltk,main)
AC_CHECK_LIB(flvw,main)
AC_CHECK_LIB(z,main)
AC_CHECK_LIB(png,main)
AC_CHECK_LIB(fltk_images,main)
else
AC_MSG_RESULT([X libraries found, checking for GUI])
dnl Graphical User Interface
AC_ARG_ENABLE(gui,[  --enable-gui enables GUI [default=yes]],GUI_CONSTANT=$enableval,GUI_CONSTANT=yes)
if test "x$GUI_CONSTANT" = "xno" ;
then 
GIAC_WARNING([GUI check disabled])
else
AC_CHECK_LIB(gl,main)
AC_CHECK_LIB(fltk_gl,main)
AC_CHECK_LIB(fltk,main)
AC_CHECK_LIB(flvw,main)
AC_CHECK_LIB(z,main)
AC_CHECK_LIB(png,main)
AC_CHECK_LIB(fltk_images,main)
LIBS="$LIBS$X_LIBS -lX11"
fi
fi
fi

dnl Checking for PARI
AC_ARG_ENABLE(pari,[  --enable-pari enables PARI support [default=yes]],PARI_CONSTANT=$enableval,PARI_CONSTANT=yes)
if test "x$PARI_CONSTANT" = "xno" ;
then 
GIAC_WARNING([PARI support disabled, not checked])
else
AC_CHECK_LIB(pari,main)
fi

dnl Checking for NTL
AC_ARG_ENABLE(ntl,[  --enable-ntl enables NTL support [default=yes]],NTL_CONSTANT=$enableval,NTL_CONSTANT=yes)
if test "x$NTL_CONSTANT" = "xno" ;
then 
GIAC_WARNING([NTL support disabled, not checked])
else
AC_CHECK_LIB(ntl,main)
fi

dnl Some local macros, inherited throuh aclocal.m4 from acinclude.m4:
GIAC_GMP_H_VERSION
GIAC_GMP_CHECK
AC_CHECK_LIB(mpfr,main)
dnl FIXME Can not link with mpfi I don't know why
dnl AC_CHECK_LIB(mpfi,main)

AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long long, 8)

AC_PATH_PROG(GNUPLOT, gnuplot, "no")
if test "x$GNUPLOT" = "xno" ;
then
GIAC_WARNING([gnuplot not found])
else
AC_DEFINE(WITH_GNUPLOT,"$GNUPLOT")
fi

dnl Checking for hash_map
AC_CHECK_HEADER(ext/hash_map, AC_DEFINE(EXT_HASH_MAP,1), [])
AC_CHECK_HEADER(hash_map, AC_DEFINE(HASH_MAP,1),[])

dnl Checking for sstream for mathml
AC_CHECK_HEADER(sstream, AC_DEFINE(HAVE_SSTREAM,1), )

dnl Output makefiles etc.
AC_OUTPUT([
src/Makefile
check/Makefile
doc/Makefile
doc/en/Makefile
doc/es/Makefile
doc/fr/Makefile
intl/Makefile
po/Makefile.in
examples/Makefile
examples/arit/Makefile
examples/codage/Makefile
examples/geo/Makefile
examples/lewisw/Makefile
examples/morley/Makefile
examples/simulation/Makefile
examples/polyfact/Makefile
examples/linalg/Makefile
examples/recur/Makefile
examples/demo/Makefile
debian/Makefile
Makefile
])

if test -z $prefix ;
then prefix="/usr/local"
fi
                                                                                      
echo "#define giac_html_location \"$prefix/share/giac/doc/\"" > src/path.h
echo "#define giac_aide_location \"$prefix/share/giac/aide_cas\"" >> src/path.h
echo "#define giac_locale_location \"$prefix/share/locale/\"" >> src/path.h
echo "#define giac_gnuplot_location \"$GNUPLOT\"" >> src/path.h

dnl Display a final warning if there has been a GIAC_ERROR or a GIAC_WARNING
GIAC_CHECK_ERRORS
